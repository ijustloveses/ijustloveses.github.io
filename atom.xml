<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>泡茶说</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ijustloveses.github.io/"/>
  <updated>2016-10-08T01:41:18.000Z</updated>
  <id>http://ijustloveses.github.io/</id>
  
  <author>
    <name>泡茶</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>First Step on Scala</title>
    <link href="http://ijustloveses.github.io/2016/10/08/Learning_Scala/"/>
    <id>http://ijustloveses.github.io/2016/10/08/Learning_Scala/</id>
    <published>2016-10-08T01:37:14.000Z</published>
    <updated>2016-10-08T01:41:18.000Z</updated>
    
    <content type="html">&lt;p&gt;Some tips while learning scala&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Env-Setup&quot;&gt;&lt;a href=&quot;#Env-Setup&quot; class=&quot;headerlink&quot; title=&quot;Env Setup&quot;&gt;&lt;/a&gt;Env Setup&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;docker pull hseeberger/scala-sbt&lt;/p&gt;
&lt;p&gt;docker run -it –rm hseeberger/scala-sbt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后 docker exec 进到容器里面去；然而，发现该镜像竟然没有 vi，那么可以通过目录映射，在容器外面编辑，在容器内部调试运行&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;docker run -d -v ${absolute_path_in_host}:/root/workspace/scala docker.io/hseeberger/scala-sbt sleep infinity&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;How-to-run-a-scala-script&quot;&gt;&lt;a href=&quot;#How-to-run-a-scala-script&quot; class=&quot;headerlink&quot; title=&quot;How to run a scala script&quot;&gt;&lt;/a&gt;How to run a scala script&lt;/h1&gt;&lt;p&gt;参考 &lt;a href=&quot;http://www.scala-lang.org/documentation/getting-started.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Scala-命令行中交互运行&quot;&gt;&lt;a href=&quot;#Scala-命令行中交互运行&quot; class=&quot;headerlink&quot; title=&quot;Scala 命令行中交互运行&quot;&gt;&lt;/a&gt;Scala 命令行中交互运行&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; scala&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;This is a Scala shell.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Type in expressions to have them evaluated.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Type :help for more information.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; object HelloWorld &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     |   def main(args: Array[String]): Unit = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     |     println(&amp;quot;Hello, world!&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     |   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     | &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;defined module HelloWorld&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; HelloWorld.main(Array())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello, world!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt;:q&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;编译运行，类似-java&quot;&gt;&lt;a href=&quot;#编译运行，类似-java&quot; class=&quot;headerlink&quot; title=&quot;编译运行，类似 java&quot;&gt;&lt;/a&gt;编译运行，类似 java&lt;/h3&gt;&lt;p&gt;编译&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; scalac HelloWorld.scala&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;指定编译目录&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; scalac -d classes HelloWorld.Scala&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;运行&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; scala HelloWorld&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;指定 classpath 运行&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; scala -cp classes HelloWorld&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过 scala 命令运行的程序，比如是顶级 scala object，也即满足以下条件中的一个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;object 扩展自 App&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;object HelloWorld extends App &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println(&amp;quot;Hello, world!&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;含有 main 函数，如前面命令行交互模式中的那段程序&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;脚本化运行&quot;&gt;&lt;a href=&quot;#脚本化运行&quot; class=&quot;headerlink&quot; title=&quot;脚本化运行&quot;&gt;&lt;/a&gt;脚本化运行&lt;/h3&gt;&lt;p&gt;比如脚本文件 script.sh 如下&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#!/usr/bin/env scala&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;object HelloWorld extends App &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println(&amp;quot;Hello, world!&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HelloWorld.main(args)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;那么，命令行下直接调用&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; ./script.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Some tips while learning scala&lt;/p&gt;
    
    </summary>
    
      <category term="Scala" scheme="http://ijustloveses.github.io/categories/Scala/"/>
    
    
      <category term="Docker" scheme="http://ijustloveses.github.io/tags/Docker/"/>
    
      <category term="Scala" scheme="http://ijustloveses.github.io/tags/Scala/"/>
    
      <category term="sbt" scheme="http://ijustloveses.github.io/tags/sbt/"/>
    
  </entry>
  
  <entry>
    <title>Architecting HBase Applications</title>
    <link href="http://ijustloveses.github.io/2016/09/22/HBase-intro/"/>
    <id>http://ijustloveses.github.io/2016/09/22/HBase-intro/</id>
    <published>2016-09-22T05:08:00.000Z</published>
    <updated>2016-09-22T05:11:57.000Z</updated>
    
    <content type="html">&lt;p&gt;Notes on “Architecting HBase Applications”&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;HBase-Principles&quot;&gt;&lt;a href=&quot;#HBase-Principles&quot; class=&quot;headerlink&quot; title=&quot;HBase Principles&quot;&gt;&lt;/a&gt;HBase Principles&lt;/h1&gt;&lt;h3 id=&quot;Table-Layout&quot;&gt;&lt;a href=&quot;#Table-Layout&quot; class=&quot;headerlink&quot; title=&quot;Table Layout&quot;&gt;&lt;/a&gt;Table Layout&lt;/h3&gt;&lt;p&gt;HBase 有两类表：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Systems Tables - used internally by HBase to keep track of meta information like the table’s access control lists (ACLs), metadata for the tables and regions, namespaces, and so on.&lt;/li&gt;
&lt;li&gt;User Table - what you will create for your use cases.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Table Layout: HBase ==&amp;gt; column families (CF) ==&amp;gt; column (CQ) ==&amp;gt; Cell&lt;/p&gt;
&lt;p&gt;row 是由有相同 row key 的多个 columns 组成的，每个 column 加上对应的 row key 称为 cell&lt;/p&gt;
&lt;p&gt;每个 cell 可能有多个不同的版本，对应不同的时间戳，cell 还可以被称为 KeyValue 对儿&lt;/p&gt;
&lt;p&gt;于是，换句话说，row 又可以定义为具有相同 row key 的一组 cells&lt;/p&gt;
&lt;p&gt;和传统 RDBMSs 不同，HBase 是稀疏存储的，如果 row key 对应的某 column 的值不存在，那么在 HBase 中就确实不会存储这个 column，而不是存储 null&lt;/p&gt;
&lt;p&gt;在定义 HBase table 的时候，只需要指定表名和 column families，不需要指定 columns，因为 columns 完全是动态生成和配置的&lt;/p&gt;
&lt;p&gt;在 HBase 中，row keys 和 columns 都是 alphabetically 排序好的，无论是在内存中还是在表文件中，故此如果要按数字排序，需要把数字转为 byte representation&lt;/p&gt;
&lt;p&gt;比如 9 和 1234 直接排序的话，1234 会在前面；如果想按大小排序，需要把两个数字分别保存为 0x00 0x00 0x04 0xD2 和 0x00 0x00 0x00 0x09，这样 9 就在前面了&lt;/p&gt;
&lt;h3 id=&quot;Table-Storage&quot;&gt;&lt;a href=&quot;#Table-Storage&quot; class=&quot;headerlink&quot; title=&quot;Table Storage&quot;&gt;&lt;/a&gt;Table Storage&lt;/h3&gt;&lt;p&gt;每个 HBase 表包含若干 Regions，每个 Region 包含若干 column families，每个 column family 包含一个 Store&lt;/p&gt;
&lt;p&gt;Store 包含一个 memstore 和若干个 HFiles，每个 HFile 包含若干 blocks，每个 block 包含若干 cells&lt;/p&gt;
&lt;p&gt;HBase 为了提供 scalability 和快速随机访问，把表数据分布到多个 RegionServers(对应 Hadoop的 Workers) 来存储&lt;/p&gt;
&lt;p&gt;每个 Region 只存储一个特定范围的表数据，对应的 start row key 和  end row key 保存在 hbase:meta 表中&lt;/p&gt;
&lt;p&gt;在同一个 Region 中，不同 column families 的数据被存储在不同的文件中，可以被区别配置，那么具有相似访问模式和相似格式的数据应该被放在同一个 column family 中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可压缩的文本信息数据和不可压缩的图像数据应该放在不同的 column families 中&lt;/li&gt;
&lt;li&gt;多读少写的数据和多写少读的数据，应该放到不同的 column families 中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;滥用 column family 会导致生成过多的小文件 (前面说了不同 CF 的数据会放在不同文件中)，给 memstore 带来很大压力，同时会导致更多的 Compaction 压力 (后面介绍 Compaction)&lt;/p&gt;
&lt;p&gt;理论和 HBase 设计上，并没有限制 column family 的个数；然而实践上，column family 基本上不会多于 3 个；如果确实需要多个 column family，不妨把表拆成多个表来的更有效率&lt;/p&gt;
&lt;p&gt;每个 Region 上的 column family 都对应一个 Store，其中数据会存储在 memstore 中，如果 memstore 满了，就 flush 到若干 HFiles 中&lt;/p&gt;
&lt;p&gt;HFile 被存储在 HDFS 上，由若干 Blocks 组成，每个 Block 默认 size 为 64 KB，可以被压缩存储；Blocks 按类型顺序存储：Data Block -&amp;gt; Index Block -&amp;gt; BloomFilter Block -&amp;gt; Trailer Block&lt;/p&gt;
&lt;p&gt;最终，HBase 表数据的最小存储单位是 cell，其实 row / column 这些都是逻辑概念，真正存储的是 cells 的集合&lt;/p&gt;
&lt;p&gt;比如下面的 HBase 表&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Keys&lt;/th&gt;
&lt;th&gt;CF1/CQ1&lt;/th&gt;
&lt;th&gt;CF1/CQ2&lt;/th&gt;
&lt;th&gt;CF2/CQ1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;042&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;E&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;123&lt;/td&gt;
&lt;td&gt;I&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在 HBase 中存储为&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Keys&lt;/th&gt;
&lt;th&gt;CF&lt;/th&gt;
&lt;th&gt;CQ&lt;/th&gt;
&lt;th&gt;val&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;042&lt;/td&gt;
&lt;td&gt;CF1&lt;/td&gt;
&lt;td&gt;CQ1&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;042&lt;/td&gt;
&lt;td&gt;CF2&lt;/td&gt;
&lt;td&gt;CQ1&lt;/td&gt;
&lt;td&gt;E&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;123&lt;/td&gt;
&lt;td&gt;CF1&lt;/td&gt;
&lt;td&gt;CQ1&lt;/td&gt;
&lt;td&gt;I&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;123&lt;/td&gt;
&lt;td&gt;CF1&lt;/td&gt;
&lt;td&gt;CQ2&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;当然，实际上的 cell 实现比上面的样子要复杂的多，会附带有 key length / value length / key / value / tags / cf length / cf / cq / timestamp / key type 等等各种属性信息&lt;/p&gt;
&lt;h3 id=&quot;Internal-Table-Operations&quot;&gt;&lt;a href=&quot;#Internal-Table-Operations&quot; class=&quot;headerlink&quot; title=&quot;Internal Table Operations&quot;&gt;&lt;/a&gt;Internal Table Operations&lt;/h3&gt;&lt;h4 id=&quot;Compaction&quot;&gt;&lt;a href=&quot;#Compaction&quot; class=&quot;headerlink&quot; title=&quot;Compaction&quot;&gt;&lt;/a&gt;Compaction&lt;/h4&gt;&lt;p&gt;HBase 把接收到的操作数据保存到 memstore 中，当 memstore 满了，就会 flush 到 HFile 中，于是就会在 HDFS 中产生很多的小文件&lt;/p&gt;
&lt;p&gt;HBase 会时不时的选择一些小文件进行 Compaction，整合成大文件，在保持数据 locality 的同时提高查询效率，减少 keep track of 过多小文件的压力，同时还可以清除已经被删除的数据&lt;/p&gt;
&lt;p&gt;Compaction 分为 Minor 和 major 两类&lt;/p&gt;
&lt;p&gt;Minor Compaction 只对 Region 中的部分文件进行，默认为超过两个 HFiles 就会触发 Compaction，HBase 会按策略选取某些文件进行处理；如果选取了的全部 HFiles，那么就提升为 major&lt;/p&gt;
&lt;p&gt;Minor Compaction 可能会做一些不完全的 data cleanup，之所以不完全，是因为只对部分文件进行处理，故此信息不够全面&lt;/p&gt;
&lt;p&gt;比如执行 cell 的删除操作，比如选中的 HFiles 中有一个 cell 的版本为 3，标记为删除，同时还有相同的 cell 版本为 2，那么就会删除版本为 2 的 cell&lt;/p&gt;
&lt;p&gt;之所以是不完全的 cleanup，是因为版本为 1 的 cell 可能没有被选中，故不会被删除；也由此，版本为 3 的 cell 也不能删除，否则就丢掉了删除标识，版本为 1 的 cell 就不会再被删除了&lt;/p&gt;
&lt;p&gt;Major Compaction 则是 Region 中 (甚至 Table 中) 的 HFiles 全部被选中处理，既可以被手动触发，也可以被配置为 weekly 执行&lt;/p&gt;
&lt;p&gt;上例中的 cell 的全部 1~3 版本都可以在 Major Compaction 中被删除，达到完全 cleanup 的效果&lt;/p&gt;
&lt;h4 id=&quot;Splits-Auto-Sharding&quot;&gt;&lt;a href=&quot;#Splits-Auto-Sharding&quot; class=&quot;headerlink&quot; title=&quot;Splits (Auto-Sharding)&quot;&gt;&lt;/a&gt;Splits (Auto-Sharding)&lt;/h4&gt;&lt;p&gt;和 Compaction 正好相反，随着 Compaction 的进行，HFiles 越来越大，也会导致问题，因为越大就越难于解析，难于进一步的 Compaction 等等&lt;/p&gt;
&lt;p&gt;HBase 配置了一个 maximum HFile size，0.94 版本之后设置为 10 GB，只要 Region 中的某个 column family 的 HFile 超过这个阈值，就会引发 Splits，效果是把 Region 一分为二&lt;/p&gt;
&lt;p&gt;注意，如果 Region 中有多个 column family，而只有一个的 HFile 超过了阈值，那么 Splits 的时候会把所有 column family 都分成两份；新的 Regions 的信息会在 hbase:meta 中更新&lt;/p&gt;
&lt;p&gt;还记得 Region 和 hbase:meta 表记录着数据 row key 范围的上下界，故此 Splits 一定不会把同一个 row key 的不同 column 分到不同的 region 中，即 All the columns stay together&lt;/p&gt;
&lt;h4 id=&quot;Balancing&quot;&gt;&lt;a href=&quot;#Balancing&quot; class=&quot;headerlink&quot; title=&quot;Balancing&quot;&gt;&lt;/a&gt;Balancing&lt;/h4&gt;&lt;p&gt;Regions 会被 Split，系统会 Fail，新的 servers 会加到 cluster 中来，故此负载会有可能不再很好的分布在集群的 RegionServers 中&lt;/p&gt;
&lt;p&gt;于是 HBase 每 5 分钟会运行 load balancer 来协调负载；0.96 版本后，默认使用 StochasticLoadBalancer 来做 balancing&lt;/p&gt;
&lt;h1 id=&quot;HBase-Sizing-and-Tuning&quot;&gt;&lt;a href=&quot;#HBase-Sizing-and-Tuning&quot; class=&quot;headerlink&quot; title=&quot;HBase Sizing and Tuning&quot;&gt;&lt;/a&gt;HBase Sizing and Tuning&lt;/h1&gt;&lt;h3 id=&quot;Hadoop-Tuning&quot;&gt;&lt;a href=&quot;#Hadoop-Tuning&quot; class=&quot;headerlink&quot; title=&quot;Hadoop Tuning&quot;&gt;&lt;/a&gt;Hadoop Tuning&lt;/h3&gt;&lt;p&gt;YARN allows for specific tuning around the number of CPUs utilized and memory consumption. Three main functions to take into consideration are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;yarn.nodemanager.resource.cpu-vcores&lt;/p&gt;
&lt;p&gt;  Number of CPU cores that can be allocated for containers.&lt;/p&gt;
&lt;p&gt;  由于超线程 CPU 的存在， total vcores = physical-cores * 1.5&lt;/p&gt;
&lt;p&gt;  这样，配置值为 total vcores - HBase 1 vocre - DataNode 1 vcore - NodeManager 1 vcore - 操作系统 1 vcore - 其他可能的服务如 Impala/Solr 1 vcore&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;yarn.nodemanager.resource.memory-mb&lt;/p&gt;
&lt;p&gt;  Amount of physical memory, in megabytes, that can be allocated for containers.&lt;/p&gt;
&lt;p&gt;  It is important not to over allocate memory for the node: 操作系统 8-16 GB，DataNode 2-4 GB，HBase 12-24 GB，其他分给 YARN framework&lt;/p&gt;
&lt;p&gt;  HBase heap space 不要超过 24 GB，否则会导致 garbage collection 过程时间过长(超过 30s)，使得 RegionServer 在 zookeeper 中超时&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;yarn.scheduler.minimum-allocation-mb&lt;/p&gt;
&lt;p&gt;  The minimum allocation for every container request at the RM, in megabytes，推荐 1-2 GB&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;HBase-Tuning&quot;&gt;&lt;a href=&quot;#HBase-Tuning&quot; class=&quot;headerlink&quot; title=&quot;HBase Tuning&quot;&gt;&lt;/a&gt;HBase Tuning&lt;/h3&gt;&lt;h4 id=&quot;Write-heavy-workload&quot;&gt;&lt;a href=&quot;#Write-heavy-workload&quot; class=&quot;headerlink&quot; title=&quot;Write-heavy workload&quot;&gt;&lt;/a&gt;Write-heavy workload&lt;/h4&gt;&lt;p&gt;Two main ways to get data into HBase: either through API (Java, Thrift, REST) or by using bulk load.&lt;/p&gt;
&lt;p&gt;最重要的区别在于，API 的方法要使用 WAL (write ahead log) 和 memstore，而 bulk load 是一种 short-circuit 短路型写操作，绕过了 WAL 和 memstore&lt;/p&gt;
&lt;h5 id=&quot;API-driven-write-model&quot;&gt;&lt;a href=&quot;#API-driven-write-model&quot; class=&quot;headerlink&quot; title=&quot;API-driven write model&quot;&gt;&lt;/a&gt;API-driven write model&lt;/h5&gt;&lt;p&gt;我们说，HBase 最主要的瓶颈就在于 WAL followed by the memstore，以下使一些优化写操作性能的公式 (假设一个 Region 只有一个 CF)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To determine region count per node&lt;/p&gt;
&lt;p&gt;  availableMemstoreHeap = HBaseHeap * memstoreUpperLimit  (总 HBase 内存堆 乘以 可用于 memstore 的比例)&lt;/p&gt;
&lt;p&gt;  recommendedActiveRegionCount = availableMemstoreHeap / memstoreSize  (前提假设了 Region 只有一个 CF，而每个 CF 对应一个 memstore，故此，可供 memstore 使用的总内存 除以 单个 memstore 的容量即可)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To determine raw space per node&lt;/p&gt;
&lt;p&gt;  rawSpaceUsed = recommendedRegionCount &lt;em&gt; maxfileSize &lt;/em&gt; replicationFactor  (Region 数 &lt;em&gt; 每个 Region 的文件容量 &lt;/em&gt; 复制系数)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To determine the number of WALs to keep&lt;/p&gt;
&lt;p&gt;  numberOfWALs = availableMemstoreHeap / (WALSize * WALMultiplier)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如：假设节点 HBase heap = 16 GB， Memstore upper limit = 0.5， Memstore size = 128 MB， Maximum file size = 20 GB， WAL size = 128 MB， WAL rolling multiplier = 0.95， replicationFactor = 3&lt;/p&gt;
&lt;p&gt;availableMemstoreHeap = 16,384 MB * 0.5 = 8192 MB&lt;/p&gt;
&lt;p&gt;recommendedActiveRegionCount = 8192 MB / 128 MB = 64&lt;/p&gt;
&lt;p&gt;rawSpaceUsed = 64 &lt;em&gt; 20G &lt;/em&gt; 3 = 3.75 TB&lt;/p&gt;
&lt;p&gt;numberOfWALs = 8192 MB / (128 MB * 0.95) = 67&lt;/p&gt;
&lt;h5 id=&quot;Bulk-load-write-model&quot;&gt;&lt;a href=&quot;#Bulk-load-write-model&quot; class=&quot;headerlink&quot; title=&quot;Bulk load write model&quot;&gt;&lt;/a&gt;Bulk load write model&lt;/h5&gt;&lt;p&gt;再次模型下，HFile 是在 MapRedue 的 Reduce 阶段被生成，然后使用 completebulkload 工具导入到 HBase 中&lt;/p&gt;
&lt;h4 id=&quot;Read-heavy-workload&quot;&gt;&lt;a href=&quot;#Read-heavy-workload&quot; class=&quot;headerlink&quot; title=&quot;Read-heavy workload&quot;&gt;&lt;/a&gt;Read-heavy workload&lt;/h4&gt;&lt;p&gt;The primary settings that need to be tweaked are the same as write workloads&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lowering memstore settings&lt;/li&gt;
&lt;li&gt;raising the block cache to allow for more data to be stored in memory&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HBase 0.96 引入了 bucket cache 的概念，允许数据同时在内存和低延迟的 disk (SSD/flash cards) 中保存&lt;/p&gt;
&lt;h1 id=&quot;Table-Design&quot;&gt;&lt;a href=&quot;#Table-Design&quot; class=&quot;headerlink&quot; title=&quot;Table Design&quot;&gt;&lt;/a&gt;Table Design&lt;/h1&gt;&lt;h3 id=&quot;一些表设计中的相关考虑&quot;&gt;&lt;a href=&quot;#一些表设计中的相关考虑&quot; class=&quot;headerlink&quot; title=&quot;一些表设计中的相关考虑&quot;&gt;&lt;/a&gt;一些表设计中的相关考虑&lt;/h3&gt;&lt;h4 id=&quot;Keys-Distribution&quot;&gt;&lt;a href=&quot;#Keys-Distribution&quot; class=&quot;headerlink&quot; title=&quot;Keys Distribution&quot;&gt;&lt;/a&gt;Keys Distribution&lt;/h4&gt;&lt;p&gt;HBase 中数据的 key 往往使用业务逻辑中的某些字段，而有时这些字段可能并不均匀分布，这导致了 hotspots 现象，引起负载不平衡，影响效率&lt;/p&gt;
&lt;p&gt;一种解决方法是采用非局部敏感的 Hash (这样，即使相似的 key 也会产生很大差异的 hash 值)，然后使用 hash 结果来做 key&lt;/p&gt;
&lt;h4 id=&quot;Compression&quot;&gt;&lt;a href=&quot;#Compression&quot; class=&quot;headerlink&quot; title=&quot;Compression&quot;&gt;&lt;/a&gt;Compression&lt;/h4&gt;&lt;p&gt;前面说过，HBase 数据的 HFile 是以 Block 为单位存储的，每个 Block 默认 64 KB，不压缩。实践中发现，对 Block 压缩存储总是会提升性能和效率&lt;/p&gt;
&lt;p&gt;通常的压缩算法有 LZO, GZ, SNOOPY, LZ4；每种算法各有优缺点，比如 GZ 压缩比高，但是操作更占用资源，相反的 SNOOPY 压缩比不高，但是压缩、解压速度都很快&lt;/p&gt;
&lt;h4 id=&quot;Data-block-encoding&quot;&gt;&lt;a href=&quot;#Data-block-encoding&quot; class=&quot;headerlink&quot; title=&quot;Data block encoding&quot;&gt;&lt;/a&gt;Data block encoding&lt;/h4&gt;&lt;p&gt;这是 HBase 的一个属性，用于对 keys 进行编码存储，具体来说就是如果基于前面已保存的 keys 来编码当前 key&lt;/p&gt;
&lt;p&gt;常用算法为 FAST_DIFF，让 HBase 只存储当前 key 和 previous key 之间的 difference&lt;/p&gt;
&lt;p&gt;还记得最细粒度下 HBase 中存储的其实是 cell，或者说一个 (key, cf, cq, val) 的四元组。那么对于一个有很多个字段 (cells) 的 row 记录，只存储 difference 会减少很多存储空间&lt;/p&gt;
&lt;h4 id=&quot;Bloom-filter&quot;&gt;&lt;a href=&quot;#Bloom-filter&quot; class=&quot;headerlink&quot; title=&quot;Bloom filter&quot;&gt;&lt;/a&gt;Bloom filter&lt;/h4&gt;&lt;p&gt;Bloom filter 可以是 False positive (hash conflict)，但是不会 False Negative。这样，可以在查询的时候，先以很小代价判断 key 是否存在，减少无谓的 I/O 开销&lt;/p&gt;
&lt;h4 id=&quot;Presplitting&quot;&gt;&lt;a href=&quot;#Presplitting&quot; class=&quot;headerlink&quot; title=&quot;Presplitting&quot;&gt;&lt;/a&gt;Presplitting&lt;/h4&gt;&lt;p&gt;Presplitting 是指让 HBase 在创建 table 的时候，预先把 table 分开为多个 Regions 存储，保证初始化时候的负载就分布在多个 Regions 上，避免形成 hotspots&lt;/p&gt;
&lt;h4 id=&quot;建表实例&quot;&gt;&lt;a href=&quot;#建表实例&quot; class=&quot;headerlink&quot; title=&quot;建表实例&quot;&gt;&lt;/a&gt;建表实例&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# /usr/local/hbase/bin/hbase shell&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hbase(main):001:0&amp;gt; create &amp;apos;sensors&amp;apos;, &amp;#123;NUMREGIONS =&amp;gt; 6, SPLITALGO =&amp;gt; &amp;apos;HexStringSplit&amp;apos;&amp;#125;, &amp;#123;NAME =&amp;gt; &amp;apos;v&amp;apos;, COMPRESSION =&amp;gt; &amp;apos;SNAPPY&amp;apos;, BLOOMFILTER =&amp;gt; &amp;apos;NONE&amp;apos;, DATA_BLOCK_ENCODING =&amp;gt; &amp;apos;FAST_DIFF&amp;apos;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ERROR: org.apache.hadoop.hbase.DoNotRetryIOException: java.lang.RuntimeException: native snappy library not available&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;看到，一些压缩算法需要预先安装对应的包才能工作，比如 SNOOPY&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;那么，去掉 COMPRESSION&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hbase(main):002:0&amp;gt; create &amp;apos;sensors&amp;apos;, &amp;#123;NUMREGIONS =&amp;gt; 6, SPLITALGO =&amp;gt; &amp;apos;HexStringSplit&amp;apos;&amp;#125;, &amp;#123;NAME =&amp;gt; &amp;apos;v&amp;apos;, BLOOMFILTER =&amp;gt; &amp;apos;NONE&amp;apos;, DATA_BLOCK_ENCODING =&amp;gt; &amp;apos;FAST_DIFF&amp;apos;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; Hbase::Table - sensors&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hbase(main):009:0&amp;gt; describe &amp;apos;sensors&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Table sensors is ENABLED&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sensors&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;COLUMN FAMILIES DESCRIPTION&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;NAME =&amp;gt; &amp;apos;v&amp;apos;, DATA_BLOCK_ENCODING =&amp;gt; &amp;apos;FAST_DIFF&amp;apos;, BLOOMFILTER =&amp;gt; &amp;apos;NONE&amp;apos;, REPLICATION_SCOPE =&amp;gt; &amp;apos;0&amp;apos;, VERSIONS =&amp;gt; &amp;apos;1&amp;apos;, COMPRESSION =&amp;gt; &amp;apos;NONE&amp;apos;, MIN&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_VERSIONS =&amp;gt; &amp;apos;0&amp;apos;, TTL =&amp;gt; &amp;apos;FOREVER&amp;apos;, KEEP_DELETED_CELLS =&amp;gt; &amp;apos;FALSE&amp;apos;, BLOCKSIZE =&amp;gt; &amp;apos;65536&amp;apos;, IN_MEMORY =&amp;gt; &amp;apos;false&amp;apos;, BLOCKCACHE =&amp;gt; &amp;apos;true&amp;apos;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hbase(main):010:0&amp;gt; put &amp;apos;sensors&amp;apos;, &amp;apos;key1&amp;apos;, &amp;apos;v:&amp;apos;, &amp;apos;val1&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 row(s) in 0.0200 seconds&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hbase(main):022:0&amp;gt; put &amp;apos;sensors&amp;apos;, &amp;apos;key2&amp;apos;, &amp;apos;v:f1&amp;apos;, &amp;apos;val2&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 row(s) in 0.0220 seconds&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hbase(main):024:0* scan &amp;apos;sensors&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ROW                                  COLUMN+CELL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; key1                                column=v:, timestamp=1473144773543, value=val1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; key2                                column=v:f1, timestamp=1473144907953, value=val2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 row(s) in 0.0790 seconds&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;NUMREGIONS 和 SPLITALGO 仅用于创建 table，而并不保存在 table 的 metadata里。故此，一旦创建了 table，那么就无法再去获取这两个参数的信息了&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Notes on “Architecting HBase Applications”&lt;/p&gt;
    
    </summary>
    
      <category term="HBase" scheme="http://ijustloveses.github.io/categories/HBase/"/>
    
    
      <category term="Architect" scheme="http://ijustloveses.github.io/tags/Architect/"/>
    
      <category term="HBase" scheme="http://ijustloveses.github.io/tags/HBase/"/>
    
      <category term="NoSql" scheme="http://ijustloveses.github.io/tags/NoSql/"/>
    
  </entry>
  
  <entry>
    <title>Microservices in Go - Part I.</title>
    <link href="http://ijustloveses.github.io/2016/08/25/Microservice-in-go-part1/"/>
    <id>http://ijustloveses.github.io/2016/08/25/Microservice-in-go-part1/</id>
    <published>2016-08-25T07:47:13.000Z</published>
    <updated>2016-08-25T07:56:13.000Z</updated>
    
    <content type="html">&lt;p&gt;Metrics in Go&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;初步搭建可运行环境-–-metrics-server&quot;&gt;&lt;a href=&quot;#初步搭建可运行环境-–-metrics-server&quot; class=&quot;headerlink&quot; title=&quot;初步搭建可运行环境  – metrics_server&quot;&gt;&lt;/a&gt;初步搭建可运行环境  – metrics_server&lt;/h3&gt;&lt;h5 id=&quot;influxdb-amp-grafana-docker-containers&quot;&gt;&lt;a href=&quot;#influxdb-amp-grafana-docker-containers&quot; class=&quot;headerlink&quot; title=&quot;influxdb &amp;amp; grafana docker containers&quot;&gt;&lt;/a&gt;influxdb &amp;amp; grafana docker containers&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;influxdb - json timeseries database&lt;/li&gt;
&lt;li&gt;grafana - charts&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run --name influxdb -d -p 8083:8083 -p 8086:8086 -e PRE_CREATE_DB=&amp;quot;metric&amp;quot; tutum/influxdb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run --name grafana -d --link influxdb:influxdb &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -e INFLUXDB_HOST=influxdb &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -e INFLUXDB_PORT=8086 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -e INFLUXDB_NAME=metric         &amp;lt;--- 上面 influxdb container 启动时，预创建数据库 metric&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -e INFLUXDB_USER=root &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -e INFLUXDB_PASS=root &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -p 3300:80 hyperworks/grafana&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker images&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker.io/tutum/influxdb                           latest              5d606dc14680        6 months ago        275.2 MB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker.io/hyperworks/grafana                       latest              c2d5108b41f0        15 months ago       260 MB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker ps -a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CONTAINER ID        IMAGE                COMMAND             CREATED             STATUS              PORTS                                            NAMES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;461158dad923        hyperworks/grafana   &amp;quot;/run.sh&amp;quot;           6 hours ago         Up 6 hours          0.0.0.0:3300-&amp;gt;80/tcp                             grafana&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48681f0bddd1        tutum/influxdb       &amp;quot;/run.sh&amp;quot;           6 hours ago         Up 6 hours          0.0.0.0:8083-&amp;gt;8083/tcp, 0.0.0.0:8086-&amp;gt;8086/tcp   influxdb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://10.88.147.128:8083/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://10.88.147.128:8083/&lt;/a&gt; 可以看到 influxdb 的配置，以及运行一些查询和操作；另看到 influxdb 版本：v0.9.6&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://10.88.147.128:3300/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://10.88.147.128:3300/&lt;/a&gt; 可以看到 grafana 的登录页面，可以使用 admin/admin 登录；另看到 grafana 版本：version: 2.0.2&lt;/p&gt;
&lt;h5 id=&quot;golang-docker-container&quot;&gt;&lt;a href=&quot;#golang-docker-container&quot; class=&quot;headerlink&quot; title=&quot;golang docker container&quot;&gt;&lt;/a&gt;golang docker container&lt;/h5&gt;&lt;p&gt;为了找个小一些的，找了 go-1.7.0 + alpine&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker pull golang:1.7.0-alpine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker images&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker.io/golang                                   1.7.0-alpine        52493611af1e        7 days ago          241.1 MB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -it --rm --name metrics_server -p 3000:3000 --link influxdb:influxdb golang:1.7.0-alpine sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;查看环境&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/go # go env&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GOARCH=&amp;quot;amd64&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GOHOSTARCH=&amp;quot;amd64&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GOHOSTOS=&amp;quot;linux&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GOOS=&amp;quot;linux&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GOPATH=&amp;quot;/go&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GOROOT=&amp;quot;/usr/local/go&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GOTOOLDIR=&amp;quot;/usr/local/go/pkg/tool/linux_amd64&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CC=&amp;quot;gcc&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GOGCCFLAGS=&amp;quot;-fPIC -m64 -pthread -fmessage-length=0&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CXX=&amp;quot;g++&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CGO_ENABLED=&amp;quot;1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;试试看下载安装一个 go model&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/go # go get github.com/GeertJohan/go-metrics/influxdb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;go: missing Git command. See https://golang.org/s/gogetcmd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;失败了，原因是没有安装 git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;关闭容器，然后去掉 --rm 命令，再次启动&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -it --name metrics_server -p 3000:3000 --link influxdb:influxdb golang:1.7.0-alpine sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;安装 git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/go # apk add --no-cache git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/main/x86_64/APKINDEX.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/community/x86_64/APKINDEX.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(1/5) Installing libssh2 (1.7.0-r0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(2/5) Installing libcurl (7.50.1-r0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(3/5) Installing expat (2.1.1-r1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(4/5) Installing pcre (8.38-r1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(5/5) Installing git (2.8.3-r0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Executing busybox-1.24.2-r9.trigger&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OK: 22 MiB in 17 packages&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;退出，然后使用 docker commit 把安装好 git 的容器提交为镜像&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker commit metrics_server golang:1.7.0-alpine-git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker images&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;golang                                             1.7.0-alpine-git    4c832d88245a        11 seconds ago      258.1 MB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker.io/golang                                   1.7.0-alpine        52493611af1e        7 days ago          241.1 MB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;............&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;最后善后，把未 rm 的 metrics_server 容器 rm 掉&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker rm metrics_server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;本地创建-HttpServer-测试项目-metrics-server-go&quot;&gt;&lt;a href=&quot;#本地创建-HttpServer-测试项目-metrics-server-go&quot; class=&quot;headerlink&quot; title=&quot;本地创建 HttpServer 测试项目 metrics_server.go&quot;&gt;&lt;/a&gt;本地创建 HttpServer 测试项目 metrics_server.go&lt;/h5&gt;&lt;p&gt;目录 /home/vagrant/workspace/myproj/microservices_in_go/&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ cd /home/vagrant/workspace/myproj&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ mkdir microservices_in_go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ cd microservices_in_go/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Http 服务器代码，这里只是搭建一个 metric 数据定时导入 influxdb 的框架，然而并没有添加任何事件的监控&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ vim metrics_server.go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;github.com/GeertJohan/go-metrics/influxdb&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;github.com/rcrowley/go-metrics&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;net/http&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;time&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func MetricToInfluxDB(d time.Duration) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    go influxdb.Influxdb(metrics.DefaultRegistry, d, &amp;amp;influxdb.Config&amp;#123;    ==&amp;gt;  goroutine to monitor metric and save into influxdb every d duration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Host: &amp;quot;influxdb:8086&amp;quot;,                                            ==&amp;gt;  这个 go 脚本会放到容器中运行，而这个容器会 link influxdb 容器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Database: &amp;quot;metric&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Username: &amp;quot;root&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Password: &amp;quot;root&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func IndexHandler(w http.ResponseWriter, r *http.Request) &amp;#123;          ==&amp;gt;  handler to handle http request&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    w.WriteHeader(http.StatusOK)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    w.Write([]byte(&amp;quot;Hello World!&amp;quot;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MetricToInfluxDB(time.Second * 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    http.HandleFunc(&amp;quot;/&amp;quot;, IndexHandler)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    http.ListenAndServe(&amp;quot;:3000&amp;quot;, nil)                               ==&amp;gt; 外部可以通过 10.88.147.128 访问&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;在-docker-中启动-golang-容器运行-HttpServer&quot;&gt;&lt;a href=&quot;#在-docker-中启动-golang-容器运行-HttpServer&quot; class=&quot;headerlink&quot; title=&quot;在 docker 中启动 golang 容器运行 HttpServer&quot;&gt;&lt;/a&gt;在 docker 中启动 golang 容器运行 HttpServer&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -it --rm --name metrics_server &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -p 3000:3000                      ==&amp;gt; 为了容器外访问 http server 的端口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    --link influxdb:influxdb          ==&amp;gt; 为了访问 influxdb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -v $&amp;#123;PWD&amp;#125;:/go                     ==&amp;gt; 把当前目录映射到容器的默认初始目录 /go，目的是可以访问前面实现的 metrics_server.go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    golang:1.7.0-alpine-git sh        ==&amp;gt; 使用刚刚安装好 git 的 golang 镜像&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/go # go get github.com/GeertJohan/go-metrics/influxdb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/go # go get github.com/rcrowley/go-metrics&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/go # ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;metrics_server.go  pkg                src&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/go # go run metrics_server.go  报错！&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2016/08/25 01:41:57 Server returned (404): 404 page not found&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2016/08/25 01:41:57 Server returned (404): 404 page not found&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2016/08/25 01:41:57 Server returned (404): 404 page not found&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2016/08/25 01:41:57 Server returned (404): 404 page not found&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...............&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;退出容器，容器由于 --rm 选项自动清除&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;经 google，发现 &lt;a href=&quot;https://www.brianchristner.io/how-to-setup-docker-monitoring/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to setup Docker Monitoring&lt;/a&gt; 评论区中有人说这是 influxdb:0.9 的问题&lt;/p&gt;
&lt;p&gt;故此尝试调整到 influxdb:0.8.8&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;关闭已有 0.9.6 的 influxdb 容器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker rm -f influxdb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;尝试运行 0.8.8 版本的 influxdb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run --name influxdb -d -p 8083:8083 -p 8086:8086 -e PRE_CREATE_DB=&amp;quot;metric&amp;quot; tutum/influxdb:0.8.8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;然后再次运行 golang with git 容器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -it --rm --name metrics_server -p 3000:3000 --link influxdb:influxdb -v $&amp;#123;PWD&amp;#125;:/go golang:1.7.0-alpine-git sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这次不需要再 go get github models 了，因为上次 get 到的新 models 都放到当前目录的 pkg &amp;amp; src 子目录下，而这个目录是通过 -v 和宿主连接，自动 persist&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/go # go run metrics_server.go&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这次 http server 不再报错了&lt;/p&gt;
&lt;p&gt;然后在其他 shell 执行  $ curl 10.88.147.128:3000，看到输出  Hello World!  说明 Http Server 正常运行； 浏览器上也可以正常看到输出 Hello World! 了&lt;/p&gt;
&lt;p&gt;再次查看 influxdb web 管理界面，使用 root/root 可以正常登录，并看到 metric 数据库已经在列&lt;/p&gt;
&lt;p&gt;善后，清除不好用的 influxdb 0.9.6 版本： $ docker rmi ${label of influxdb:latest}&lt;/p&gt;
&lt;p&gt;至此，框架已经搭好，后面就是看看如何通过这个框架添加对事件的监控和统计了&lt;/p&gt;
&lt;h3 id=&quot;监控事件&quot;&gt;&lt;a href=&quot;#监控事件&quot; class=&quot;headerlink&quot; title=&quot;监控事件&quot;&gt;&lt;/a&gt;监控事件&lt;/h3&gt;&lt;h5 id=&quot;HttpServer-中添加事件&quot;&gt;&lt;a href=&quot;#HttpServer-中添加事件&quot; class=&quot;headerlink&quot; title=&quot;HttpServer 中添加事件&quot;&gt;&lt;/a&gt;HttpServer 中添加事件&lt;/h5&gt;&lt;p&gt;修改 metrics_server.go 中的代码&lt;/p&gt;
&lt;p&gt;定义两个全局变量，分别代表首页访问次数，以及首页响应时间&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var requestCounter metrics.Counter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var responseTime metrics.Timer&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;IndexHandler() 函数中，加入两个全局变量的更新操作&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;requestCounter.Inc(1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;startReqTime := time.Now()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;defer responseTime.Update(time.Since(startReqTime))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;显然， requestCounter 比较简单，每次访问直接 inc(1) 即可； responseTime 这个用到了 defer，这样在函数结束之前会根据函数开始时的时间来计算响应时间&lt;/p&gt;
&lt;p&gt;main() 函数中，初始化并注册事件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;requestCounter = metrics.NewCounter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;metrics.Register(&amp;quot;count_request&amp;quot;, requestCounter)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;responseTime = metrics.NewTimer()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;metrics.Register(&amp;quot;response_time&amp;quot;, responseTime)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MetricToInfluxDB(time.Second * 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;看到，事件注册之后，调用 MetricToInfluxDB 函数，这个函数会把 metrics.DefaultRegistry 中注册的事件数据传到 influxdb 的对应数据库 metric 中&lt;/p&gt;
&lt;h5 id=&quot;启动-HttpServer&quot;&gt;&lt;a href=&quot;#启动-HttpServer&quot; class=&quot;headerlink&quot; title=&quot;启动 HttpServer&quot;&gt;&lt;/a&gt;启动 HttpServer&lt;/h5&gt;&lt;p&gt;这次在 docker run 中直接调用 go run metrics_server.go, 而不是像以前那样只是调用 sh&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;方法一：去掉 --rm，加上 -d，这样启动的容器在后台运行；之所以要去掉 --rm，是因为它和 -d 不兼容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -it -d --name metrics_server -p 3000:3000 --link influxdb:influxdb -v $&amp;#123;PWD&amp;#125;:/go golang:1.7.0-alpine-git go run metrics_server.go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;方法二：保留 --rm，不使用 -d，这样容器将直接在前台运行，整个 shell 阻塞住，一直等待接收请求&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -it --rm --name metrics_server -p 3000:3000 --link influxdb:influxdb -v $&amp;#123;PWD&amp;#125;:/go golang:1.7.0-alpine-git go run metrics_server.go&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里采用方法一，于是可以直接在同一个 shell 中查询容器状态&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker ps -a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CONTAINER ID        IMAGE                     COMMAND                  CREATED             STATUS              PORTS                                                      NAMES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3bcec22768d0        golang:1.7.0-alpine-git   &amp;quot;go run metrics_serve&amp;quot;   14 seconds ago      Up 13 seconds       0.0.0.0:3000-&amp;gt;3000/tcp                                     metrics_server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;db0eb6d58f8d        tutum/influxdb:0.8.8      &amp;quot;/run.sh&amp;quot;                3 hours ago         Up 3 hours          0.0.0.0:8083-&amp;gt;8083/tcp, 0.0.0.0:8086-&amp;gt;8086/tcp, 8084/tcp   influxdb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;461158dad923        hyperworks/grafana        &amp;quot;/run.sh&amp;quot;                29 hours ago        Up 29 hours         0.0.0.0:3300-&amp;gt;80/tcp                                       grafana&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;测试事件监控效果&quot;&gt;&lt;a href=&quot;#测试事件监控效果&quot; class=&quot;headerlink&quot; title=&quot;测试事件监控效果&quot;&gt;&lt;/a&gt;测试事件监控效果&lt;/h5&gt;&lt;p&gt;浏览器中连续访问 &lt;a href=&quot;http://10.88.147.128:3000/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://10.88.147.128:3000/&lt;/a&gt; 6 次&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;influxdb 网站 http://10.88.147.128:8083/ ，首页 Databases 部分，点击 metric 对应的 Explore Data，在查询页面中运行 **list series**，得到全部 series&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;list_series_result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;time  name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0     count_request.count&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0     response_time.timer&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;查询页面中查询 select value from response_time.timer，报错：ERROR: Field value doesn’t exist in series response_time.timer&lt;/p&gt;
&lt;p&gt;查询 select * from response_time.timer 得到一些图和表，发现 fields 中没有 value 字段，有的是 count 字段  (这个查询比较慢，要耐心 …)&lt;/p&gt;
&lt;p&gt;查询 select count from response_time.timer 得到 count 字段相关的图和表；下面去 grafana 中查看&lt;/p&gt;
&lt;p&gt;grafana 网站 &lt;a href=&quot;http://10.88.147.128:3300/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://10.88.147.128:3300/&lt;/a&gt; ，&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Home -&amp;gt; New (to create new dashboard) 进入新的 dashboard 页面&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;点击左边的小条处 -&amp;gt; Add Panel -&amp;gt; Graph -&amp;gt; Save Dashboard&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Graph 中间上方 &amp;quot;no title (click here)&amp;quot; 点击 -&amp;gt; Edit 打开 Edit form&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;选中 Metric Tab 页， Series 框输入 response_time.timer，select 框中选择 mean(count)，保持其他选项不变 (比如 group by time = 30s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;得到时序图，哈哈哈&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;`&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同理还可以查看 count_request.count 相关的图表和数据，从略&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Metrics in Go&lt;/p&gt;
    
    </summary>
    
      <category term="Microservice" scheme="http://ijustloveses.github.io/categories/Microservice/"/>
    
    
      <category term="笔记" scheme="http://ijustloveses.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Docker" scheme="http://ijustloveses.github.io/tags/Docker/"/>
    
      <category term="Microservice" scheme="http://ijustloveses.github.io/tags/Microservice/"/>
    
      <category term="Go" scheme="http://ijustloveses.github.io/tags/Go/"/>
    
      <category term="Influxdb" scheme="http://ijustloveses.github.io/tags/Influxdb/"/>
    
      <category term="Grafana" scheme="http://ijustloveses.github.io/tags/Grafana/"/>
    
      <category term="Metrics" scheme="http://ijustloveses.github.io/tags/Metrics/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes Microservices with Docker</title>
    <link href="http://ijustloveses.github.io/2016/07/27/Kubernetes-microservices-with-docker/"/>
    <id>http://ijustloveses.github.io/2016/07/27/Kubernetes-microservices-with-docker/</id>
    <published>2016-07-27T06:18:13.000Z</published>
    <updated>2016-07-27T06:18:54.000Z</updated>
    
    <content type="html">&lt;p&gt;Some tips on Kubernetes Microservices with Docker&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Why-Kubernetes&quot;&gt;&lt;a href=&quot;#Why-Kubernetes&quot; class=&quot;headerlink&quot; title=&quot;Why Kubernetes&quot;&gt;&lt;/a&gt;Why Kubernetes&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;便于把多个协作的应用整合为服务&lt;/li&gt;
&lt;li&gt;便于 Scale 服务&lt;/li&gt;
&lt;li&gt;解决 Docker 跨机器容器之间的通讯问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Docker 的 Image / Container 不说了&lt;/li&gt;
&lt;li&gt;Node 就是不同的物理/虚拟机器，同分布式中的概念&lt;/li&gt;
&lt;li&gt;Pods 就是相互协作并提供服务的若干容器的组合，Pod 内的容器运行在同一个 Minion 上，视为统一管理单元，共享 volumes &amp;amp; network &amp;amp; ip&lt;/li&gt;
&lt;li&gt;RC (Replication Controllers) 控制 Pods 的 replica 数量，实现 Rescheduling &amp;amp; Scaling.&lt;/li&gt;
&lt;li&gt;同一个 Node 同一个 Pods 的不同 replica 分别有各自的 network，&lt;strong&gt;提供完全相同的功能&lt;/strong&gt; ；看起来就像是多个不同 Nodes 上分别启动了同一个 Pods&lt;/li&gt;
&lt;li&gt;Service 是真实应用服务的抽象，是由 RC 暴露出来的 Endpoints，同一个 Pods 的不同 Replica 分别有各自的 Endpoint&lt;/li&gt;
&lt;li&gt;Pods / RC / Service 通过标签 Labels (key/value pair in nature) 相互识别&lt;/li&gt;
&lt;li&gt;Kubernetes 创建和管理服务的方式有两种：命令式和声明式；声明式采用配置文件，更灵活，更可控，功能也更多&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;集群中使用-Kubernates&quot;&gt;&lt;a href=&quot;#集群中使用-Kubernates&quot; class=&quot;headerlink&quot; title=&quot;集群中使用 Kubernates&quot;&gt;&lt;/a&gt;集群中使用 Kubernates&lt;/h3&gt;&lt;p&gt;先说下 Docker 的 network: 在 1.9 之后，Docker 通过 network 可以使得同一个 Node 节点上的多个容器通过其名字相互识别，相当于多个容器各自有不同的 ip&lt;/p&gt;
&lt;p&gt;但是，多个 Nodes 上启动多个容器，能够通过 network 相互识别并协同工作么？目前我还没找到合适的方法。&lt;/p&gt;
&lt;p&gt;使用 Kubernetes 集群，并 hack Docker 的默认网络设置，可以达到这个目的！具体步骤简略的说，如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install Master Kubernetes Node&lt;ul&gt;
&lt;li&gt;Install Docker&lt;/li&gt;
&lt;li&gt;Setup bootstrap instance of Docker, 这是指启动一个新的 Docker instance, 方法是指定 -H unix:///xxxxxx.sock，和默认的 Docker Instance 并存&lt;/li&gt;
&lt;li&gt;通过新的 Docker Instance 安装 Etcd，一个分布式 key/value Store，用于维护分布式集群的网络信息&lt;/li&gt;
&lt;li&gt;停止默认的 Docker Instance，然后通过新的 Docker Instance 安装 Flannel，后者会启动一个网络环境，记录在 /run/flannel/subnet.env&lt;/li&gt;
&lt;li&gt;修改默认的 Docker 配置，把 DOCKER_OPT 中的网络配置成 Flannel 启动的网络&lt;/li&gt;
&lt;li&gt;安装 bridge-util，并删除 Docker 安装上的默认的 docker0 subnet&lt;/li&gt;
&lt;li&gt;重新启动默认的 Docker Instance，那么此时这个 Docker 使用的就是 Flannel 创建的子网络&lt;/li&gt;
&lt;li&gt;安装 Kubernetes 及其 Service Proxy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Install Worker Kubernetes Node，完全类似上面，只是有一些不同&lt;ul&gt;
&lt;li&gt;不需要安装 Etcd 了&lt;/li&gt;
&lt;li&gt;安装 Flannel 的时候需要指定 Master Ip&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至此，Kubernetes 集群安装完毕，可以使用 kubectl get nodes 来确认集群节点都 OK，并可以管理 Pods 和 Services 了&lt;/p&gt;
&lt;h3 id=&quot;评价&quot;&gt;&lt;a href=&quot;#评价&quot; class=&quot;headerlink&quot; title=&quot;评价&quot;&gt;&lt;/a&gt;评价&lt;/h3&gt;&lt;p&gt;这本书 3+ 分吧，不能再多了，基本上就是操作手册，对于熟悉工具还是有一定帮助的，只不过实在是太啰嗦了，全书的知识点有限得很&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Some tips on Kubernetes Microservices with Docker&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://ijustloveses.github.io/categories/Docker/"/>
    
    
      <category term="笔记" scheme="http://ijustloveses.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Kubernetes" scheme="http://ijustloveses.github.io/tags/Kubernetes/"/>
    
      <category term="Docker" scheme="http://ijustloveses.github.io/tags/Docker/"/>
    
      <category term="Microservice" scheme="http://ijustloveses.github.io/tags/Microservice/"/>
    
      <category term="分布式" scheme="http://ijustloveses.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>7周7并发模型 P6 - Data Parallelism with GPU</title>
    <link href="http://ijustloveses.github.io/2016/07/06/7concurrent-models-in-7weeks-part6/"/>
    <id>http://ijustloveses.github.io/2016/07/06/7concurrent-models-in-7weeks-part6/</id>
    <published>2016-07-06T18:27:25.000Z</published>
    <updated>2016-07-07T05:52:02.000Z</updated>
    
    <content type="html">&lt;p&gt;Notes on 7 Concurrent Models in 7 Weeks - Part 6. Data Parallelism with GPU&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;GPGPU-Programming-Basis&quot;&gt;&lt;a href=&quot;#GPGPU-Programming-Basis&quot; class=&quot;headerlink&quot; title=&quot;GPGPU Programming Basis&quot;&gt;&lt;/a&gt;GPGPU Programming Basis&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;The amount of data that needs to be processed is huge, the actual operations on that data are relatively simple vector or matrix operations.&lt;/li&gt;
&lt;li&gt;This makes them very amenable to data parallelization, in which multiple computing units perform the same operations on different items of data in parallel.&lt;/li&gt;
&lt;li&gt;GPUs combine pipelining and multiple ALUs with a wide range of other techniques, unfortunately, which’s little commonality between different GPUs.&lt;/li&gt;
&lt;li&gt;OpenCL targets multiple architectures by defining a C-like language that allows us to express a parallel algorithm abstractly.&lt;/li&gt;
&lt;li&gt;Divide your problem into the smallest workitems you can, OpenCL compiler and runtime then worry about how best to schedule those work-items on the available hardware.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Our-First-OpenCL-Program-Pair-wise-Multiply&quot;&gt;&lt;a href=&quot;#Our-First-OpenCL-Program-Pair-wise-Multiply&quot; class=&quot;headerlink&quot; title=&quot;Our First OpenCL Program - Pair-wise Multiply&quot;&gt;&lt;/a&gt;Our First OpenCL Program - Pair-wise Multiply&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Implement a kernel which is the core work item algorithm.&lt;/li&gt;
&lt;li&gt;Create a context within which the kernel will run together with a command queue.&lt;/li&gt;
&lt;li&gt;Compile the kernel.&lt;/li&gt;
&lt;li&gt;Create buffers for input and output data.&lt;/li&gt;
&lt;li&gt;Enqueue a command that executes the kernel once for each work-item.&lt;/li&gt;
&lt;li&gt;Retrieve the results.&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;Kernel&quot;&gt;&lt;a href=&quot;#Kernel&quot; class=&quot;headerlink&quot; title=&quot;Kernel&quot;&gt;&lt;/a&gt;Kernel&lt;/h5&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;__&lt;span class=&quot;function&quot;&gt;kernel &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;multiply_arrays&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(__global &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;* inputA,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              __global &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;* inputB,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              __global &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;* output)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = get_global_id(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  output[i] = inputA[i] * inputB[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The OpenCL standard defines both C and C++ bindings. However, unofficial bindings are available for most major languages. We stick to C here.&lt;/p&gt;
&lt;p&gt;It calls get_global_id() to determine which work-item it’s handling.&lt;/p&gt;
&lt;h5 id=&quot;Context-and-Command-Queue&quot;&gt;&lt;a href=&quot;#Context-and-Command-Queue&quot; class=&quot;headerlink&quot; title=&quot;Context and Command Queue&quot;&gt;&lt;/a&gt;Context and Command Queue&lt;/h5&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cl_platform_id platform;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clGetPlatformIDs(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &amp;amp;platform, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cl_device_id device;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clGetDeviceIDs(platform, CL_DEVICE_TYPE_GPU, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &amp;amp;device, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cl_context context = clCreateContext(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &amp;amp;device, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cl_command_queue &lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt; = clCreateCommandQueue(context, device, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;We want a simple context that only contains a single GPU, so after identifying a platform with clGetPlatformIDs(), we pass CL_DEVICE_TYPE_GPU to clGetDeviceIDs() to get the ID of a GPU.&lt;/p&gt;
&lt;p&gt;The clCreateCommandQueue() method takes a context and a device and returns a queue that enables commands to be sent to that device.&lt;/p&gt;
&lt;h5 id=&quot;Compile-the-Kernel&quot;&gt;&lt;a href=&quot;#Compile-the-Kernel&quot; class=&quot;headerlink&quot; title=&quot;Compile the Kernel&quot;&gt;&lt;/a&gt;Compile the Kernel&lt;/h5&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* source = read_source(&lt;span class=&quot;string&quot;&gt;&quot;multiply_arrays.cl&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cl_program program = clCreateProgramWithSource(context, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, (&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;**)&amp;amp;source, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(source);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clBuildProgram(program, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cl_kernel kernel = clCreateKernel(program, &lt;span class=&quot;string&quot;&gt;&quot;multiply_arrays&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Create-Buffers&quot;&gt;&lt;a href=&quot;#Create-Buffers&quot; class=&quot;headerlink&quot; title=&quot;Create Buffers&quot;&gt;&lt;/a&gt;Create Buffers&lt;/h5&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; NUM_ELEMENTS 1024&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cl_float a[NUM_ELEMENTS], b[NUM_ELEMENTS];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;random_fill(a, NUM_ELEMENTS);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;random_fill(b, NUM_ELEMENTS);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cl_mem inputA = clCreateBuffer(context, CL_MEM_READ_ONLY | CL_MEM_COPY_HOST_PTR, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(cl_float) * NUM_ELEMENTS, a, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cl_mem inputB = clCreateBuffer(context, CL_MEM_READ_ONLY | CL_MEM_COPY_HOST_PTR, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(cl_float) * NUM_ELEMENTS, b, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cl_mem output = clCreateBuffer(context, CL_MEM_WRITE_ONLY, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(cl_float) * NUM_ELEMENTS, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Execute-the-Work-Items&quot;&gt;&lt;a href=&quot;#Execute-the-Work-Items&quot; class=&quot;headerlink&quot; title=&quot;Execute the Work Items&quot;&gt;&lt;/a&gt;Execute the Work Items&lt;/h5&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;clSetKernelArg(kernel, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(cl_mem), &amp;amp;inputA);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clSetKernelArg(kernel, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(cl_mem), &amp;amp;inputB);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clSetKernelArg(kernel, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(cl_mem), &amp;amp;output);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; work_units = NUM_ELEMENTS;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clEnqueueNDRangeKernel(&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;, kernel, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &amp;amp;work_units, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;First set the kernel’s arguments with clSetKernelArg(), then clEnqueueNDRangeKernel() queues an N-dimensional range (NDRange) of work-items.&lt;/p&gt;
&lt;p&gt;In our case, N is 1 (the 3rd argument to clEnqueueNDRangeKernel()) and the number of work-items is 1,024 (NUM_ELEMENTS).&lt;/p&gt;
&lt;h5 id=&quot;Retrieve-Results-and-Clean-up&quot;&gt;&lt;a href=&quot;#Retrieve-Results-and-Clean-up&quot; class=&quot;headerlink&quot; title=&quot;Retrieve Results and Clean up&quot;&gt;&lt;/a&gt;Retrieve Results and Clean up&lt;/h5&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cl_float results[NUM_ELEMENTS];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clEnqueueReadBuffer(&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;, output, CL_TRUE, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(cl_float) * NUM_ELEMENTS, results, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clReleaseMemObject(inputA);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clReleaseMemObject(inputB);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clReleaseMemObject(output);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clReleaseKernel(kernel);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clReleaseProgram(program);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clReleaseCommandQueue(&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clReleaseContext(context);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;We create the results array and copy from the output buffer with the clEnqueueReadBuffer() function.&lt;/p&gt;
&lt;h5 id=&quot;Profiling&quot;&gt;&lt;a href=&quot;#Profiling&quot; class=&quot;headerlink&quot; title=&quot;Profiling&quot;&gt;&lt;/a&gt;Profiling&lt;/h5&gt;&lt;p&gt;Simply change the last parameter of clEnqueueNDRangeKernel() to enable profiling, as below:&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cl_event timing_event;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; work_units = NUM_ELEMENTS;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clEnqueueNDRangeKernel(&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;, kernel, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &amp;amp;work_units, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &amp;amp;timing_event);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cl_float results[NUM_ELEMENTS];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clEnqueueReadBuffer(&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;, output, CL_TRUE, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(cl_float) * NUM_ELEMENTS, results, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cl_ulong starttime;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clGetEventProfilingInfo(timing_event, CL_PROFILING_COMMAND_START, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(cl_ulong), &amp;amp;starttime, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cl_ulong endtime;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clGetEventProfilingInfo(timing_event, CL_PROFILING_COMMAND_END, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(cl_ulong), &amp;amp;endtime, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Elapsed (GPU): %lu ns\n\n&quot;&lt;/span&gt;, (&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)(endtime - starttime));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clReleaseEvent(timing_event);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;For this task, the GPU is more than nine times faster than a single CPU core.&lt;/p&gt;
&lt;h5 id=&quot;What-if-there-are-multiple-devices&quot;&gt;&lt;a href=&quot;#What-if-there-are-multiple-devices&quot; class=&quot;headerlink&quot; title=&quot;What if there are multiple devices&quot;&gt;&lt;/a&gt;What if there are multiple devices&lt;/h5&gt;&lt;p&gt;To get fix number devices&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cl_device_id devices[&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cl_uint num_devices;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clGetDeviceIDs(platform, CL_DEVICE_TYPE_ALL, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, devices, &amp;amp;num_devices);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;num_devices will have been set to the number of available devices, and the first num_devices entries of the devices array will have been filled in.&lt;/p&gt;
&lt;p&gt;This works fine, but what if there are more than eight available devices?&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cl_uint num_devices;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clGetDeviceIDs(platform, CL_DEVICE_TYPE_ALL, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &amp;amp;num_devices);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cl_device_id* devices = (cl_device_id*)&lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(cl_device_id) * num_devices);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clGetDeviceIDs(platform, CL_DEVICE_TYPE_ALL, num_devices, devices, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;No explaination needed.&lt;/p&gt;
&lt;h5 id=&quot;Error-handling&quot;&gt;&lt;a href=&quot;#Error-handling&quot; class=&quot;headerlink&quot; title=&quot;Error handling&quot;&gt;&lt;/a&gt;Error handling&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;Some OpenCL functions return error codes, CL_SUCCESS indicates that the function succeeded; any other value indicates that it failed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So some kind of utility function or macro to simplify the error handling process, for example:&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; CHECK_STATUS(s) do &amp;#123; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cl_int ss = (s); \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; (ss != CL_SUCCESS) &amp;#123; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fprintf(stderr, &lt;span class=&quot;string&quot;&gt;&quot;Error %d at line %d\n&quot;&lt;/span&gt;, ss, __LINE__); \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        exit(1); \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; while (0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This allows us to write the following:&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CHECK_STATUS(clSetKernelArg(kernel, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(cl_mem), &amp;amp;inputA));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Some other OpenCL functions take an error_ret parameter.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here’s how we can call it with error handling:&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cl_int status;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cl_context context = clCreateContext(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &amp;amp;device, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &amp;amp;status);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CHECK_STATUS(status);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Multidimensional-Work-Item-Ranges&quot;&gt;&lt;a href=&quot;#Multidimensional-Work-Item-Ranges&quot; class=&quot;headerlink&quot; title=&quot;Multidimensional Work-Item Ranges&quot;&gt;&lt;/a&gt;Multidimensional Work-Item Ranges&lt;/h3&gt;&lt;p&gt;When executing a kernel via clEnqueueNDRangeKernel(), an index space is defined where each point is identified by a unique global ID that represents a work-item.&lt;/p&gt;
&lt;p&gt;A kernel can find the global ID of the work-item it’s executing by calling get_global_id().&lt;/p&gt;
&lt;p&gt;In the 1st example, the index space is unidimensional, and therefore the kernel only needed to call get_global_id() once.&lt;/p&gt;
&lt;p&gt;We will create a kernel that multiplies two-dimensional matrices and therefore calls get_global_id() twice.&lt;/p&gt;
&lt;h5 id=&quot;Parallel-Matrix-Multiplication&quot;&gt;&lt;a href=&quot;#Parallel-Matrix-Multiplication&quot; class=&quot;headerlink&quot; title=&quot;Parallel Matrix Multiplication&quot;&gt;&lt;/a&gt;Parallel Matrix Multiplication&lt;/h5&gt;&lt;p&gt;kernel is as below:&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;__&lt;span class=&quot;function&quot;&gt;kernel &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;matrix_multiplication&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(uint widthA,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    __global &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;* inputA,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    __global &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;* inputB,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    __global &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;* output)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = get_global_id(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = get_global_id(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Note that: outputWidth == widthB  &amp;amp;&amp;amp;  outputHeight == heightA  &amp;amp;&amp;amp;  widthA == heightB&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; outputWidth = get_global_size(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; outputHeight = get_global_size(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; widthB = outputWidth;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; total = &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; k &amp;lt; widthA; ++k) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    total += inputA[j * widthA + k] * inputB[k * widthB + i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  output[j * outputWidth + i] = total;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the kernel calculate the (j, i) item of A * B&lt;/li&gt;
&lt;li&gt;A, B &amp;amp; output Matrix are all save in a 1-dimensional array, instead of 2-demensional.&lt;/li&gt;
&lt;li&gt;This kernel executes within a two-dimensional index space, each point of which identifies a location in the output array.&lt;/li&gt;
&lt;li&gt;It can find out the range of the index space by calling get_global_size().&lt;/li&gt;
&lt;li&gt;This also gives us widthB, which is equal to outputWidth, but we have to pass widthA as a parameter.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Which is to say, if A is M&lt;em&gt;K dimension, B is K&lt;/em&gt;N dimension, then M &amp;amp; N are both global size, while K is a input parameter.&lt;/p&gt;
&lt;p&gt;To execute the kernal:&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; work_units[] = &amp;#123;WIDTH_OUTPUT, HEIGHT_OUTPUT&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CHECK_STATUS(clEnqueueNDRangeKernel(&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;, kernel, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, work_units, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This creates a 2-dimensional index space by setting work_dim to 2 and specifies the extent of each dimension by setting global_work_size to work_units.&lt;/p&gt;
&lt;h3 id=&quot;Data-Parallel-Reduce&quot;&gt;&lt;a href=&quot;#Data-Parallel-Reduce&quot; class=&quot;headerlink&quot; title=&quot;Data-Parallel Reduce&quot;&gt;&lt;/a&gt;Data-Parallel Reduce&lt;/h3&gt;&lt;h5 id=&quot;Query-Device-Info&quot;&gt;&lt;a href=&quot;#Query-Device-Info&quot; class=&quot;headerlink&quot; title=&quot;Query Device Info&quot;&gt;&lt;/a&gt;Query Device Info&lt;/h5&gt;&lt;p&gt;Uses clGetDeviceInfo() to query and print a device parameter with a value of type string.&lt;/p&gt;
&lt;p&gt;To wrap a function to query device info,&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;print_device_param_string&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(cl_device_id device, cl_device_info param_id, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* param_name)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; value[&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK_STATUS(clGetDeviceInfo(device, param_id, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(value), value, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%s: %s\n&quot;&lt;/span&gt;, param_name, value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;print_device_info&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(cl_device_id device)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print_device_param_string(device, CL_DEVICE_NAME, &lt;span class=&quot;string&quot;&gt;&quot;Name&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print_device_param_string(device, CL_DEVICE_VENDOR, &lt;span class=&quot;string&quot;&gt;&quot;Vendor&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print_device_param_uint(device, CL_DEVICE_MAX_COMPUTE_UNITS, &lt;span class=&quot;string&quot;&gt;&quot;Compute Units&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print_device_param_ulong(device, CL_DEVICE_GLOBAL_MEM_SIZE, &lt;span class=&quot;string&quot;&gt;&quot;Global Memory&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print_device_param_ulong(device, CL_DEVICE_LOCAL_MEM_SIZE, &lt;span class=&quot;string&quot;&gt;&quot;Local Memory&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print_device_param_sizet(device, CL_DEVICE_MAX_WORK_GROUP_SIZE, &lt;span class=&quot;string&quot;&gt;&quot;Workgroup size&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;So what is Compute Units and Workgroup size ? What is the difference between global and local memory ?&lt;/p&gt;
&lt;h5 id=&quot;Platform-Model&quot;&gt;&lt;a href=&quot;#Platform-Model&quot; class=&quot;headerlink&quot; title=&quot;Platform Model&quot;&gt;&lt;/a&gt;Platform Model&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;An OpenCL platform consists of a host that’s connected to one or more devices.&lt;/li&gt;
&lt;li&gt;Each device has one or more compute units, each of which provides a number of processing elements.&lt;/li&gt;
&lt;li&gt;Work-items execute on processing elements. A collection of work-items executing on a single compute unit is a work-group.&lt;/li&gt;
&lt;li&gt;The work-items in a workgroup share local memory, which can be used for communication between work-items executing in that work-group.&lt;/li&gt;
&lt;li&gt;A single work-item has its Private memory.&lt;/li&gt;
&lt;li&gt;Global memory is the memory available to all work-items executing on a device.&lt;/li&gt;
&lt;li&gt;Constant memory is a region of global memory that remains constant during execution of a kernel.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;So, Host =&amp;gt; Devices =&amp;gt; Compute Units =&amp;gt; WorkGroup =&amp;gt; WorkItem&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            GlobalMem                   LocalMem     PrivateMem&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;A-Single-Work-Group-Min&quot;&gt;&lt;a href=&quot;#A-Single-Work-Group-Min&quot; class=&quot;headerlink&quot; title=&quot;A Single Work-Group Min()&quot;&gt;&lt;/a&gt;A Single Work-Group Min()&lt;/h5&gt;&lt;p&gt;To simplify, assume that the number of elements in the array we want to reduce is a power of two and small enough to be processed by a single work-group.&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;__&lt;span class=&quot;function&quot;&gt;kernel &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;find_minimum&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(__global &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;* values,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           __global &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;* result,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           __local &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;* scratch)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = get_global_id(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n = get_global_size(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  scratch[i] = values[i]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  barrier(CLK_LOCAL_MEM_FENCE); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = n / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; j &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j /= &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i &amp;lt; j)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      scratch[i] = min(scratch[i], scratch[i + j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    barrier(CLK_LOCAL_MEM_FENCE); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *result = scratch[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;ATTENTION: all work-items are NOT running sequentially, but simultaneously! Say we have 8 elements in values, we will have 8 work-items running at the same time.&lt;/li&gt;
&lt;li&gt;A barrier is a synchronization mechanism that allows work-items to coordinate their use of local memory.&lt;/li&gt;
&lt;li&gt;If one work-item in a work-group executes barrier(), then all work-items in that work-group must execute the same barrier() before any of them can proceed beyond that point&lt;ul&gt;
&lt;li&gt;It ensures that one work-item doesn’t start reducing until all work-items have copied their value from global to local memory&lt;/li&gt;
&lt;li&gt;It ensures that one workitem doesn’t move on to loop iteration n + 1 until all work-items have finished loop iteration n.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example, we have 8 elements in values, which are [35, 9, 1, 100, 83, 7, 28, 15], then the running steps will be:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    Step                         scratch[i=0]       scratch[i=1]       scratch[i=2]      scratch[i=3]  scratch[i=4]  scratch[i=5]  scratch[i=6]  scratch[i=7]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scratch[i] = values[i]               35                 9                   1                100            83            7             28           15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;barrier(CLK_LOCAL_MEM_FENCE)  ------------------------------- wait all work-items to finish , then go the the next step -------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1st loop: j = 4                 min(s[0], s[4])      min(s[1], s[5])    min(s[2], s[6])   min(s[3], s[7])     Do Nth.    Do Nth.     Do Nth.     Do Nth. &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              = min(35, 83) = 35   = min(9, 7) = 7    = min(1, 28) = 1  = min(100, 15) = 15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;barrier(CLK_LOCAL_MEM_FENCE)  ------------------------------- wait all work-items to finish , then go the the next step -------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2nd loop: j = 2                 min(s[0], s[2])      min(s[1], s[3])       Do Nth.          Do Nth.           Do Nth.    Do Nth.     Do Nth.     Do Nth.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              = min(35, 1) = 1     = min(7, 15) = 7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;barrier(CLK_LOCAL_MEM_FENCE)  ------------------------------- wait all work-items to finish , then go the the next step -------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3rd loop: j = 1                 min(s[0], s[1])          Do Nth.           Do Nth.          Do Nth.           Do Nth.    Do Nth.     Do Nth.     Do Nth.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              = min(1, 7) = 1          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;barrier(CLK_LOCAL_MEM_FENCE)  ------------------------------- wait all work-items to finish , then go the the next step -------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if i == 0 &amp;#123;*result = scratch[0];&amp;#125;    1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;A-Multiple-Work-Group-Min&quot;&gt;&lt;a href=&quot;#A-Multiple-Work-Group-Min&quot; class=&quot;headerlink&quot; title=&quot;A Multiple-Work-Group Min()&quot;&gt;&lt;/a&gt;A Multiple-Work-Group Min()&lt;/h5&gt;&lt;p&gt;The above example works fine, but work-groups are restricted in size (such as no more than 1024 elements), so how to parallelize over multiple work-groups?&lt;/p&gt;
&lt;p&gt;Extending our reduce across multiple work-groups is a simple matter of dividing the input array into work-groups and reducing each independently&lt;/p&gt;
&lt;p&gt;If, for example, each work-group operates on 64 values at a time, this will reduce an array of N items to N/64 items. This smaller array can then be reduced in turn, and so on, until only a single result remains.&lt;/p&gt;
&lt;p&gt;Each work-group has its local id and represents a section of a larger problem.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;global id 0   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |&amp;lt;---------------------------- global size --------------------------------------------&amp;gt;|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |                                                                                       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [[      group 0      ],[      group 1      ],[      group 2      ],[      group 3      ]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                             |&amp;lt;--- local size --&amp;gt;|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                             |                   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        local id 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;so, kernel will be modified as below:&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;__&lt;span class=&quot;function&quot;&gt;kernel &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;find_minimum&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(__global &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;* values,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           __global &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;* results,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           __local &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;* scratch)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = get_local_id(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n = get_local_size(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  scratch[i] = values[get_global_id(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  barrier(CLK_LOCAL_MEM_FENCE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = n / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; j &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j /= &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i &amp;lt; j)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      scratch[i] = min(scratch[i], scratch[i + j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    barrier(CLK_LOCAL_MEM_FENCE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    results[get_group_id(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)] = scratch[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;This kernel is only for one iteration, but not the whole process, and the result of its work-group will be saved into results[get_group_id(0)].&lt;/li&gt;
&lt;li&gt;To get the final result, we must run several iterations, and use results[] as the input parameter &lt;strong&gt;values&lt;/strong&gt;, until one work-group is enough to hold values.&lt;/li&gt;
&lt;li&gt;This kernel is for one group identified by get_group_id(0), and the work-item is identified by get_local_id(0)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To execute it&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; work_units[] = &amp;#123;NUM_VALUES&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; workgroup_size[] = &amp;#123;WORKGROUP_SIZE&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CHECK_STATUS(clEnqueueNDRangeKernel(&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;, kernel, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, work_units, workgroup_size, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Notes on 7 Concurrent Models in 7 Weeks - Part 6. Data Parallelism with GPU&lt;/p&gt;
    
    </summary>
    
      <category term="并发" scheme="http://ijustloveses.github.io/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="并发" scheme="http://ijustloveses.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="7日7并发模型" scheme="http://ijustloveses.github.io/tags/7%E6%97%A57%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="笔记" scheme="http://ijustloveses.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Parallelism" scheme="http://ijustloveses.github.io/tags/Parallelism/"/>
    
  </entry>
  
  <entry>
    <title>7周7并发模型 P5 - CSP with Clojure</title>
    <link href="http://ijustloveses.github.io/2016/07/01/7concurrent-models-in-7weeks-part5/"/>
    <id>http://ijustloveses.github.io/2016/07/01/7concurrent-models-in-7weeks-part5/</id>
    <published>2016-07-01T00:27:25.000Z</published>
    <updated>2016-07-07T05:52:09.000Z</updated>
    
    <content type="html">&lt;p&gt;Notes on 7 Concurrent Models in 7 Weeks - Part 5. Communicating Sequential Processes&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;core-async-in-Clojure&quot;&gt;&lt;a href=&quot;#core-async-in-Clojure&quot; class=&quot;headerlink&quot; title=&quot;core.async in Clojure&quot;&gt;&lt;/a&gt;core.async in Clojure&lt;/h3&gt;&lt;p&gt;CSP’s (Short for Communicating Sequential Processes) recent popularity is largely due to the Go language. &lt;/p&gt;
&lt;p&gt;We’re going to cover CSP by examining the core.async library, which brings Go’s concurrency model to Clojure.&lt;/p&gt;
&lt;p&gt;core.async defines a few functions with names that clash with core Clojure library functions.&lt;/p&gt;
&lt;p&gt;We could import core.async like below:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(ns channels.core&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (:require [clojure.core.async :as async :refer :all&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        :exclude [map into reduce merge partition partition-by take]]))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Channels&quot;&gt;&lt;a href=&quot;#Channels&quot; class=&quot;headerlink&quot; title=&quot;Channels&quot;&gt;&lt;/a&gt;Channels&lt;/h3&gt;&lt;p&gt;A channel is a thread-safe queue, which messages could be added to one end and removed from the other.&lt;/p&gt;
&lt;p&gt;Unlike actors, where messages are sent to and from specific actors, senders don’t have to know about receivers, or vice versa.&lt;/p&gt;
&lt;p&gt;We can write to a channel with &amp;gt;!! and read from it with &amp;lt;!!&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (def c (chan))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;channels.core/c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (thread (println &amp;quot;Read:&amp;quot; (&amp;lt;!! c) &amp;quot;from c&amp;quot;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;ManyToManyChannel clojure.core.async.impl.channels.ManyToManyChannel@78fcc563&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;gt;!! c &amp;quot;Hello thread&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Read: Hello thread from c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;core.async provides the handy thread utility macro which runs its code on a separate thread.&lt;/p&gt;
&lt;p&gt;The thread prints a message containing whatever it reads from the channel, and will blocks until we actually write to the channel.&lt;/p&gt;
&lt;h5 id=&quot;Buffering&quot;&gt;&lt;a href=&quot;#Buffering&quot; class=&quot;headerlink&quot; title=&quot;Buffering&quot;&gt;&lt;/a&gt;Buffering&lt;/h5&gt;&lt;p&gt;By default, channels are synchronous (or unbuffered), which means writing to a channel blocks until something reads from it.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (thread (&amp;gt;!! c &amp;quot;Hello&amp;quot;) (println &amp;quot;Write completed&amp;quot;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;ManyToManyChannel clojure.core.async.impl.channels.ManyToManyChannel@78fcc563&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;lt;!! c)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Write completed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;We can create a buffered channel by passing a buffer size to chan:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (def bc (chan 5))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;channels.core/bc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;gt;!! bc 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;gt;!! bc 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (close! bc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;lt;!! bc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;lt;!! bc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;lt;!! bc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;As above, we can close a chan with close!. Reading from an empty closed channel returns nil, and writing to a closed channel silently discards the message.&lt;/p&gt;
&lt;h5 id=&quot;readall-and-writeall&quot;&gt;&lt;a href=&quot;#readall-and-writeall&quot; class=&quot;headerlink&quot; title=&quot;readall!! and writeall!!&quot;&gt;&lt;/a&gt;readall!! and writeall!!&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn readall!! [ch]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (loop [coll []]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (if-let [x (&amp;lt;!! ch)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (recur (conj coll x))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            coll)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This loops with coll initially bound to the empty vector []. Each iteration reads a value from ch.&lt;/p&gt;
&lt;p&gt;If the value is not nil, it’s added to coll and go to the next iteration; otherwise (the channel has been closed), coll is returned.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn writeall!! [ch coll]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (doseq [x coll]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (&amp;gt;!! ch x))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (close! ch))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;core.async provides utilities that perform similar tasks to save us the trouble of writing our own:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (def ch (chan 10))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;channels.core/ch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (onto-chan ch (range 0 10))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;ManyToManyChannel clojure.core.async.impl.channels.ManyToManyChannel@6b16d3cf&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;lt;!! (async/into [] ch))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[0 1 2 3 4 5 6 7 8 9]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;Full-Buffer-Strategies&quot;&gt;&lt;a href=&quot;#Full-Buffer-Strategies&quot; class=&quot;headerlink&quot; title=&quot;Full Buffer Strategies&quot;&gt;&lt;/a&gt;Full Buffer Strategies&lt;/h5&gt;&lt;p&gt;By default, writing to a full channel will block. But we can choose an alternative strategy by passing a buffer to chan:&lt;/p&gt;
&lt;p&gt;A dropping buffer doesn’t block, even though the channel cannot hold so many messages, and drops all subsequent messages when channel is full.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (def dc (chan (dropping-buffer 5)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;channels.core/dc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (onto-chan dc (range 0 10))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;ManyToManyChannel clojure.core.async.impl.channels.ManyToManyChannel@147c0def&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;lt;!! (async/into [] dc))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[0 1 2 3 4]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;A sliding buffer will drop oldest message to hold recent message.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (def sc (chan (sliding-buffer 5)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;channels.core/sc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (onto-chan sc (range 0 10))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;ManyToManyChannel clojure.core.async.impl.channels.ManyToManyChannel@3071908b&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;lt;!! (async/into [] sc))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[5 6 7 8 9]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Go-Blocks&quot;&gt;&lt;a href=&quot;#Go-Blocks&quot; class=&quot;headerlink&quot; title=&quot;Go Blocks&quot;&gt;&lt;/a&gt;Go Blocks&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Threads have both an overhead and a startup cost, so modern programs avoid creating threads directly and use a thread pool instead.&lt;/li&gt;
&lt;li&gt;Thread pools are a great way to handle CPU-intensive tasks which often tie a thread up for a brief period and then return it to the poll to be reused.&lt;/li&gt;
&lt;li&gt;Typically event-driven model will be used for IO-intensive task involving communication, but it breaks up the natural flow of control, and worse it leads to an excess of global state.&lt;/li&gt;
&lt;li&gt;Go blocks to rescue, which provide an alternative that gives us efficiency of event-driven code without having to compromise its structure or readability.&lt;/li&gt;
&lt;li&gt;Code within a go block is transformed into a state machine. &lt;ul&gt;
&lt;li&gt;Instead of blocking when it reads from or writes to a channel, the state machine parks, relinquishing control of the thread it’s executing on. &lt;/li&gt;
&lt;li&gt;When it’s next able to run, it performs a state transition and continues execution, potentially on another thread.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;Parking&quot;&gt;&lt;a href=&quot;#Parking&quot; class=&quot;headerlink&quot; title=&quot;Parking&quot;&gt;&lt;/a&gt;Parking&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (def ch (chan))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;channels.core/ch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           #_=&amp;gt;     (let [x (&amp;lt;! ch)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           #_=&amp;gt;           y (&amp;lt;! ch)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           #_=&amp;gt;         (println &amp;quot;Sum:&amp;quot; (+ x y))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;ManyToManyChannel clojure.core.async.impl.channels.ManyToManyChannel@13ac7b98&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;gt;!! ch 3)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;gt;!! ch 4)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Sum: 7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The go block that reads two values from ch, then prints their sum. The single exclamation mark (&amp;lt;! or &amp;gt;!) means parking version instead of blocking version.&lt;/p&gt;
&lt;p&gt;The go macro converts this sequential code into a state machine with three states:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;parking  --------&amp;gt;  [  &amp;lt;!ch  ]  -------&amp;gt;  [  &amp;lt;!ch  ]  -------&amp;gt; [  output results  ]  -------&amp;gt;  terminating&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;So what is the different between parking and blocking version of channel reading/writing? &lt;/p&gt;
&lt;p&gt;If we use blocking &amp;gt;!! or &amp;lt;!! in go block, we might deadlock because too many go blocks are running and blocking enough threads so no more are available.&lt;/p&gt;
&lt;p&gt;The point of all the go macro’s cleverness is efficiency, go blocks are cheap, we can create many of them without running out of resources.&lt;/p&gt;
&lt;h5 id=&quot;Go-Blocks-Are-Cheap&quot;&gt;&lt;a href=&quot;#Go-Blocks-Are-Cheap&quot; class=&quot;headerlink&quot; title=&quot;Go Blocks Are Cheap&quot;&gt;&lt;/a&gt;Go Blocks Are Cheap&lt;/h5&gt;&lt;p&gt;Go macro returns a channel.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;lt;!! (go (+ 3 4)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;We can use this fact to create a function that creates a very large number of go blocks, allowing us to see just how inexpensive go blocks are&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn go-add [x y]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&amp;lt;!! (nth (iterate #(go (inc (&amp;lt;! %))) (go x)) y)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;That is the world’s most inefficient addition function:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;#(go (inc (&amp;lt;! %))) is an anonymous func which reads a single value from input chan %, then incr the value and create a new chan to return the increased value.&lt;/li&gt;
&lt;li&gt;(iterate $ANONYMOUSFUNC (go x)) will return a lazy sequence of the form (x, f(x), f(f(x)), ….), where the initial value is (go x)&lt;/li&gt;
&lt;li&gt;nth $LAZYSEQ y will return the y-th element of the lazy sequence, which is the return value of a go block (so, it is a channel)&lt;/li&gt;
&lt;li&gt;Finally, read the result from the chan.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (time (go-add 10 10))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Elapsed time: 1.935 msecs&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (time (go-add 10 100000))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Elapsed time: 734.91 msecs&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100010&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;So, it takes 734.91 msecs to create 100000 go blocks! Wonderful!&lt;/p&gt;
&lt;h5 id=&quot;Operations-over-Channels&quot;&gt;&lt;a href=&quot;#Operations-over-Channels&quot; class=&quot;headerlink&quot; title=&quot;Operations over Channels&quot;&gt;&lt;/a&gt;Operations over Channels&lt;/h5&gt;&lt;p&gt;Mapping over a Channel&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn map-chan [f from]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (let [to (chan)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (go-loop []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (when-let [x (&amp;lt;! from)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (&amp;gt;! to (f x))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (recur))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (close! to))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        to))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;go-loop is an utility function that’s equivalent to (go (loop …)).&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (def ch (chan 10))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;channels.core/ch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (def mapped (map-chan (partial * 2) ch))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;channels.core/mapped&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (onto-chan ch (range 0 10))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;ManyToManyChannel clojure.core.async.impl.channels.ManyToManyChannel@9f3d43e&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;lt;!! (async/into [] mapped))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[0 2 4 6 8 10 12 14 16 18]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;core.async provides its own version of map-chan, called map&amp;lt; as well as channel-oriented filter called filter&amp;lt;, mapcat called mapcat&amp;lt;, and so on.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (def ch (to-chan (range 0 10)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;channels.core/ch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;lt;!! (async/into [] (map&amp;lt; (partial * 2) (filter&amp;lt; even? ch))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[0 4 8 12 16]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;to-chan (range 0 10) is an utility function that is equivalent to ((def ch (chan 10)) (onto-chan ch (range 0 10)))&lt;/p&gt;
&lt;h5 id=&quot;Example-A-Concurrent-Sieve-of-Eratosthenes&quot;&gt;&lt;a href=&quot;#Example-A-Concurrent-Sieve-of-Eratosthenes&quot; class=&quot;headerlink&quot; title=&quot;Example: A Concurrent Sieve of Eratosthenes&quot;&gt;&lt;/a&gt;Example: A Concurrent Sieve of Eratosthenes&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn factor? [x y]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (zero? (mod y x)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn get-primes [limit]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (let [primes (chan)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          numbers (to-chan (range 2 limit))]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (go-loop [ch numbers]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (when-let [prime (&amp;lt;! ch)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (&amp;gt;! primes prime)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (recur (remove&amp;lt; (partial factor? prime) ch)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (close! primes))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        primes))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;In the go-loop, we copy numbers to ch, then iteratelly read a prime from ch; whenever a prime is read, remove numbers which matches (partial factor? prime).&lt;/p&gt;
&lt;h3 id=&quot;Handling-Multiple-Channels&quot;&gt;&lt;a href=&quot;#Handling-Multiple-Channels&quot; class=&quot;headerlink&quot; title=&quot;Handling Multiple Channels&quot;&gt;&lt;/a&gt;Handling Multiple Channels&lt;/h3&gt;&lt;h5 id=&quot;the-alt-function&quot;&gt;&lt;a href=&quot;#the-alt-function&quot; class=&quot;headerlink&quot; title=&quot;the alt! function&quot;&gt;&lt;/a&gt;the alt! function&lt;/h5&gt;&lt;p&gt;The alt! function allows us to write code that can deal with more than one channel at a time.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (def ch1 (chan))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;channels.core/ch1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (def ch2 (chan))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;channels.core/ch2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (go-loop []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                #_=&amp;gt; (alt!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                #_=&amp;gt;    ch1 ([x] (println &amp;quot;Read&amp;quot; x &amp;quot;from channel 1&amp;quot;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                #_=&amp;gt;    ch2 ([x] (println &amp;quot;Twice&amp;quot; x &amp;quot;is&amp;quot; (* x 2))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                #_=&amp;gt; (recur))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;ManyToManyChannel clojure.core.async.impl.channels.ManyToManyChannel@d8fd215&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;gt;!! ch1 &amp;quot;foo&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Read foo from channel 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;gt;!! ch2 21)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Twice 21 is 42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The alt! macro takes pairs of arguments, the first is a channel and the second is code executed if there’s anything to read from that channel.&lt;/p&gt;
&lt;h5 id=&quot;Timeouts&quot;&gt;&lt;a href=&quot;#Timeouts&quot; class=&quot;headerlink&quot; title=&quot;Timeouts&quot;&gt;&lt;/a&gt;Timeouts&lt;/h5&gt;&lt;p&gt;The timeout function returns a channel that closes after a certain number of milliseconds.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (time (&amp;lt;!! (timeout 10000)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Elapsed time: 10001.662 msecs&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Use timeout in conjunction with alt! to allow timeout operations.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (let [t (timeout 10000)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             #_=&amp;gt; (go (alt!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             #_=&amp;gt;   ch ([x] (println &amp;quot;Read&amp;quot; x &amp;quot;from channel&amp;quot;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             #_=&amp;gt;   t (println &amp;quot;Timed out&amp;quot;))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;Reified-Timeouts&quot;&gt;&lt;a href=&quot;#Reified-Timeouts&quot; class=&quot;headerlink&quot; title=&quot;Reified Timeouts&quot;&gt;&lt;/a&gt;Reified Timeouts&lt;/h5&gt;&lt;p&gt;Normally timeouts are used on a per-request basis, but what if we want to limit the total time taken by a series of requests? Reified timeout to rescue!&lt;/p&gt;
&lt;p&gt;Let’s modify the sieve example, instead of taking a numeric limit, it will simply generates as many prime numbers as it can in a given number of seconds.&lt;/p&gt;
&lt;p&gt;Instead of initializing channel by (range 2 limit), we use the infinite sequence (iterate inc 2)&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn get-primes []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (let [primes (chan)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          numbers (to-chan (iterate inc 2))]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (go-loop [ch numbers]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (when-let [prime (&amp;lt;! ch)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (&amp;gt;! primes prime)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (recur (remove&amp;lt; (partial factor? prime) ch)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (close! primes))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        primes))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Here is how we call this function:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn -main [seconds]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (let [primes (get-primes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          limit (timeout (* (edn/read-string seconds) 1000))]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (loop []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (alt!! :priority true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                limit nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                primes ([prime] (println prime) (recur))))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Here we use blocking version of alt!, which blocks until either a new prime is available or limit hits, in which case it simply return nil without recur.&lt;/p&gt;
&lt;p&gt;The :priority true option ensures that the clauses passed to alt!! are evaluated in order (by default, if two clause both meet, one is chosen randomly)&lt;/p&gt;
&lt;p&gt;This avoids the event of primes being generated so quickly that there’s always one available and the timeout clause never gets evaluated.&lt;/p&gt;
&lt;h5 id=&quot;Asynchronous-Polling&quot;&gt;&lt;a href=&quot;#Asynchronous-Polling&quot; class=&quot;headerlink&quot; title=&quot;Asynchronous Polling&quot;&gt;&lt;/a&gt;Asynchronous Polling&lt;/h5&gt;&lt;p&gt;It seems simple enough to implement a timely polling&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn poll-fn [interval action]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (let [seconds (* interval 1000)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (go (while true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (action)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (&amp;lt;! (timeout seconds))))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;polling.core=&amp;gt; (poll-fn 10 #(println &amp;quot;Polling at:&amp;quot; (System/currentTimeMillis)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;ManyToManyChannel clojure.core.async.impl.channels.ManyToManyChannel@6e624159&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;polling.core=&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Polling at: 1388827086165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Polling at: 1388827096166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Polling at: 1388827106168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;............&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;But the problem is, the action can’t call parking functions&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;polling.core=&amp;gt; (def ch (to-chan (iterate inc 0)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;polling.core/ch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;polling.core=&amp;gt; (poll-fn 10 #(println &amp;quot;Read:&amp;quot; (&amp;lt;! ch)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Exception in thread &amp;quot;async-dispatch-1&amp;quot; java.lang.AssertionError:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Assert failed: &amp;lt;! used not in (go ...) block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;As the error says: The problem is that parking calls need to be made directly within a go block.&lt;/p&gt;
&lt;p&gt;Fix it with Clojure’s macro&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defmacro poll [interval &amp;amp; body]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    `(let [seconds# (* ~interval 1000)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (go (while true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (do ~@body)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (&amp;lt;! (timeout seconds#))))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Like c/cpp, the macro is directly replaced into the code level, so the action body will be put directly within the go block.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The backtick (`) is the syntax quote operator. It takes source code and, instead of executing it, returns a representation of it that can be subsequently compiled.&lt;/li&gt;
&lt;li&gt;Within that code, we can use the ~ (unquote) and ~@ (unquote splice) operators to refer to arguments passed to the macro.&lt;/li&gt;
&lt;li&gt;The # (auto-gensym) suffix indicates that Clojure should automatically generate a unique name to avoid name conflict.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s see it in action&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;polling.core=&amp;gt; (poll 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            #_=&amp;gt; (println &amp;quot;Polling at:&amp;quot; (System/currentTimeMillis))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            #_=&amp;gt; (println (&amp;lt;! ch)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;ManyToManyChannel clojure.core.async.impl.channels.ManyToManyChannel@1bec079e&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;polling.core=&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Polling at: 1388829368011&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Polling at: 1388829378018&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;..........&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;A-Practical-Example-–-Asynchronous-IO&quot;&gt;&lt;a href=&quot;#A-Practical-Example-–-Asynchronous-IO&quot; class=&quot;headerlink&quot; title=&quot;A Practical Example – Asynchronous IO&quot;&gt;&lt;/a&gt;A Practical Example – Asynchronous IO&lt;/h3&gt;&lt;h5 id=&quot;Basic-Http-Get-Url&quot;&gt;&lt;a href=&quot;#Basic-Http-Get-Url&quot; class=&quot;headerlink&quot; title=&quot;Basic Http Get Url&quot;&gt;&lt;/a&gt;Basic Http Get Url&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(require &amp;apos;[org.httpkit.client :as http])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn http-get [url]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (let [ch (chan)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (http/get url (fn [response]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        (if (= 200 (:status response))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            (put! ch response)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            (do (report-error response) (close! ch)))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ch))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;httpkit is an asynchronous IO library, and http/get expects a callback function to run when GET request is processed.&lt;/li&gt;
&lt;li&gt;put! doesn’t have to be called within a go block, and implements a ‘fire and forget’ write to a channel (so, it neither block nor park)&lt;/li&gt;
&lt;li&gt;This func creates a channel, calls http/get, which return immediately. When GET completes, callback is called, which put response in channel if OK, report error otherwise.&lt;/li&gt;
&lt;li&gt;Return the channel at last.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;Feed-polling&quot;&gt;&lt;a href=&quot;#Feed-polling&quot; class=&quot;headerlink&quot; title=&quot;Feed polling&quot;&gt;&lt;/a&gt;Feed polling&lt;/h5&gt;&lt;p&gt;With http-get &amp;amp; poll, we can do below:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(def poll-interval 60)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn poll-feed [url]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (let [ch (chan)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (poll poll-interval&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (when-let [response (&amp;lt;! (http-get url))]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (let [feed (parse-feed (:body response))]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    (onto-chan ch (get-links feed) false))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ch))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;parse-feed &amp;amp; get-links functions use the Rome library to parse XML returned by the news feed response, and I will not discuss them here.&lt;/p&gt;
&lt;p&gt;The list of links returned by get-links is written to ch with onto-chan, and the last argument is set to false to not to auto-close chanenl by onto-chan.&lt;/p&gt;
&lt;p&gt;Normally onto-chan will close ch when the source is exhausted, we disable this behavior by passing false to the final argument.&lt;/p&gt;
&lt;h5 id=&quot;Unique-Links&quot;&gt;&lt;a href=&quot;#Unique-Links&quot; class=&quot;headerlink&quot; title=&quot;Unique Links&quot;&gt;&lt;/a&gt;Unique Links&lt;/h5&gt;&lt;p&gt;poll-feed function could return duplicate urls. We need a channel that contains just the new links.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn new-links [url]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (let [in (poll-feed url)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          out (chan)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (go-loop [links #&amp;#123;&amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (let [link (&amp;lt;! in)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (if (contains? links link)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    (recur links)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    (do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        (&amp;gt;! out link)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        (recur (conj links link))))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        out))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Use a temporary dict variable link (initialized to empty set #{}) to check whether a link is a new one. If so, do nth; otherwise, put link into out chan and dict.&lt;/p&gt;
&lt;h5 id=&quot;Word-Counting&quot;&gt;&lt;a href=&quot;#Word-Counting&quot; class=&quot;headerlink&quot; title=&quot;Word Counting&quot;&gt;&lt;/a&gt;Word Counting&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn get-counts [urls]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (let [counts (chan)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (go (while true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (let [url (&amp;lt;! urls)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (when-let [response (&amp;lt;! (http-get url))]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    (let [c (count (get-words (:body response)))]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        (&amp;gt;! counts [url c]))))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        counts))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This code will return a channel whose elements are pairs of url and its word-count.&lt;/p&gt;
&lt;h5 id=&quot;Put-it-all-together&quot;&gt;&lt;a href=&quot;#Put-it-all-together&quot; class=&quot;headerlink&quot; title=&quot;Put it all together&quot;&gt;&lt;/a&gt;Put it all together&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn -main [feeds-file]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (with-open [rdr (io/reader feeds-file)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (let [feed-urls (line-seq rdr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              article-urls (doall (map new-links feed-urls))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              article-counts (doall (map get-counts article-urls))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              counts (async/merge article-counts)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (while true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (println (&amp;lt;!! counts))))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;with-open opens and reads a file containing a list of news-feed urls, one on each line, and ensure the file will e closed safely. &lt;/li&gt;
&lt;li&gt;line-seq convert file content into feed-urls list.&lt;/li&gt;
&lt;li&gt;Mapping new-links over feed-urls, turn it into a sequence of channels, each of which contains links to new articles.&lt;/li&gt;
&lt;li&gt;Mapping get-counts over that channel sequence, give us a sequence of channels, each of which contains word-counts of the links.&lt;/li&gt;
&lt;li&gt;Finally, async/merge merge this sequence of channels into a single channel that contains anything written to any of its source channels.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;file content ==&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [feed1, feed2, ...] ==&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [(link11, link12, ..), (link21, link22, ...), ..] ==&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [([link11, count11], [link12, count12], ..), ([link21, count21], ..), ..] ==&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                final result after merging&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The code loops forever, printing anything that’s written to that merged channel.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Notes on 7 Concurrent Models in 7 Weeks - Part 5. Communicating Sequential Processes&lt;/p&gt;
    
    </summary>
    
      <category term="并发" scheme="http://ijustloveses.github.io/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="并发" scheme="http://ijustloveses.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="7日7并发模型" scheme="http://ijustloveses.github.io/tags/7%E6%97%A57%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="笔记" scheme="http://ijustloveses.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="CSP" scheme="http://ijustloveses.github.io/tags/CSP/"/>
    
  </entry>
  
  <entry>
    <title>Tricks and Tips on Hexo</title>
    <link href="http://ijustloveses.github.io/2016/06/28/hexo-tricks/"/>
    <id>http://ijustloveses.github.io/2016/06/28/hexo-tricks/</id>
    <published>2016-06-28T19:14:10.000Z</published>
    <updated>2016-06-30T05:21:36.000Z</updated>
    
    <content type="html">&lt;p&gt;Tricks and Tips on Hexo&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Tags-amp-Categories&quot;&gt;&lt;a href=&quot;#Tags-amp-Categories&quot; class=&quot;headerlink&quot; title=&quot;Tags &amp;amp; Categories&quot;&gt;&lt;/a&gt;Tags &amp;amp; Categories&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Next 主题需要手动生成 tags &amp;amp; categories，使用 hexo new page tags(categories) 命令，以 page 为模版&lt;/li&gt;
&lt;li&gt;categories 分类，我通常只设置一个；据说设置多个时可能变成分级分类，而不是多个分类并列，未实践&lt;/li&gt;
&lt;li&gt;tags &amp;amp; categories 是中文时，如果想要 url 中是英文，可以在 _config.yml 的 category_map &amp;amp; tag_map 中设置&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;静态博客文件和代码分开版本管理&quot;&gt;&lt;a href=&quot;#静态博客文件和代码分开版本管理&quot; class=&quot;headerlink&quot; title=&quot;静态博客文件和代码分开版本管理&quot;&gt;&lt;/a&gt;静态博客文件和代码分开版本管理&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;hexo g 生成的静态页面，通常在 master 分支管理&lt;/li&gt;
&lt;li&gt;源码另外在 src 分支管理&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;SEO-搜索引擎优化&quot;&gt;&lt;a href=&quot;#SEO-搜索引擎优化&quot; class=&quot;headerlink&quot; title=&quot;SEO 搜索引擎优化&quot;&gt;&lt;/a&gt;SEO 搜索引擎优化&lt;/h3&gt;&lt;p&gt;参见&lt;br&gt;&lt;a href=&quot;http://www.arao.me/2015/hexo-next-theme-optimize-seo/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;动动手指，不限于NexT主题的Hexo优化（SEO篇）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/619dab2d3c08&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo干货系列：（六）hexo提交搜索引擎（百度+谷歌）&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;常见问题解决&quot;&gt;&lt;a href=&quot;#常见问题解决&quot; class=&quot;headerlink&quot; title=&quot;常见问题解决&quot;&gt;&lt;/a&gt;常见问题解决&lt;/h3&gt;&lt;p&gt;Refer: &lt;a href=&quot;http://theme-next.iissnan.com/faqs.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;常见问题&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;TypeError-Cannot-set-property-‘lastIndex’-of-undefined&quot;&gt;&lt;a href=&quot;#TypeError-Cannot-set-property-‘lastIndex’-of-undefined&quot; class=&quot;headerlink&quot; title=&quot;TypeError: Cannot set property ‘lastIndex’ of undefined&quot;&gt;&lt;/a&gt;TypeError: Cannot set property ‘lastIndex’ of undefined&lt;/h5&gt;&lt;p&gt;这个错误在 hexo g 生成静态网页时发生，在 _config.yml 中，找到 auto_detect 并设置为 false，解决&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Tricks and Tips on Hexo&lt;/p&gt;
    
    </summary>
    
      <category term="misc" scheme="http://ijustloveses.github.io/categories/misc/"/>
    
    
      <category term="hexo" scheme="http://ijustloveses.github.io/tags/hexo/"/>
    
      <category term="blog" scheme="http://ijustloveses.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>7周7并发模型 P4 - Actors with Elixir</title>
    <link href="http://ijustloveses.github.io/2016/06/28/7concurrent-models-in-7weeks-part4/"/>
    <id>http://ijustloveses.github.io/2016/06/28/7concurrent-models-in-7weeks-part4/</id>
    <published>2016-06-28T18:27:25.000Z</published>
    <updated>2016-06-29T06:22:40.000Z</updated>
    
    <content type="html">&lt;p&gt;Notes on 7 Concurrent Models in 7 Weeks - Part 4. Actors with Elixir&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Functional programming avoids the problems associated with shared mutable state by avoiding mutable state. &lt;/p&gt;
&lt;p&gt;Actor programming, by contrast, retains mutable state but avoids sharing it.&lt;/p&gt;
&lt;p&gt;An actor is like an object in an OO program, it encapsulates state and communicates with other actors by exchanging messages.&lt;/p&gt;
&lt;h3 id=&quot;Basic-Messages-and-Mailboxes&quot;&gt;&lt;a href=&quot;#Basic-Messages-and-Mailboxes&quot; class=&quot;headerlink&quot; title=&quot;Basic: Messages and Mailboxes&quot;&gt;&lt;/a&gt;Basic: Messages and Mailboxes&lt;/h3&gt;&lt;h5 id=&quot;First-Actor&quot;&gt;&lt;a href=&quot;#First-Actor&quot; class=&quot;headerlink&quot; title=&quot;First Actor&quot;&gt;&lt;/a&gt;First Actor&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defmodule Talker do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def loop do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        receive do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:greet, name&amp;#125; -&amp;gt; IO.puts(&amp;quot;Hello #&amp;#123;name&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:celebrate, name, age&amp;#125; -&amp;gt; IO.puts(&amp;quot;Here&amp;apos;s to another #&amp;#123;age&amp;#125; years, #&amp;#123;name&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        loop                        --- Note: implements an infinite loop by calling itself recursively&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pid = spawn(&amp;amp;Talker.loop/0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;send(pid, &amp;#123;:greet, &amp;quot;Huey&amp;quot;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;send(pid, &amp;#123;:celebrate, &amp;quot;Louie&amp;quot;, 16&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sleep(1000)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Messages are sent asynchronously. Instead of being sent directly to an actor, they are placed in a mailbox.&lt;/li&gt;
&lt;li&gt;This means that actors are decoupled, actors run at their own speed and don’t block when sending messages.&lt;/li&gt;
&lt;li&gt;An actor runs concurrently with other actors but handles messages sequentially, in the order they were added to the mailbox.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Above sample uses sleeps(1000) for a second to allow messages to be processed before exiting. This is an unsatisfactory solution.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defmodule Talker do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def loop do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        receive do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:greet, name&amp;#125; -&amp;gt; IO.puts(&amp;quot;Hello #&amp;#123;name&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:celebrate, name, age&amp;#125; -&amp;gt; IO.puts(&amp;quot;Here&amp;apos;s to another #&amp;#123;age&amp;#125; years, #&amp;#123;name&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:shutdown&amp;#125; -&amp;gt; exit(:normal)        --- Note: an explicit way to stop an actor when it finishes all the messages in its queue.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end                                               Remember, an actor will handle messages in its queue sequentially.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       loop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Process.flag(:trap_exit, true)         --- Note: we’ll be notified when the spawned process terminates.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pid = spawn_link(&amp;amp;Talker.loop/0)                 The message that’s sent is a triple form &amp;#123;:EXIT, pid, reason&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;send(pid, &amp;#123;:greet, &amp;quot;Huey&amp;quot;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;send(pid, &amp;#123;:praise, &amp;quot;Dewey&amp;quot;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;send(pid, &amp;#123;:celebrate, &amp;quot;Louie&amp;quot;, 16&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;send(pid, &amp;#123;:shutdown&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;receive do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;:EXIT, ^pid, reason&amp;#125; -&amp;gt; IO.puts(&amp;quot;Talker has exited (#&amp;#123;reason&amp;#125;)&amp;quot;)            --- Note: block here, until it receives exit message&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The ^ (caret) in the receive pattern indicates that instead of binding the second element of the tuple to pid, we want to match a message where the second element has the value that’s already bound to pid.&lt;/p&gt;
&lt;h5 id=&quot;Stateful-Actors&quot;&gt;&lt;a href=&quot;#Stateful-Actors&quot; class=&quot;headerlink&quot; title=&quot;Stateful Actors&quot;&gt;&lt;/a&gt;Stateful Actors&lt;/h5&gt;&lt;p&gt;We don’t need mutable variables to create a stateful actor, but in fact all we need is recursion.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defmodule Counter do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def loop(count) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        receive do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:next&amp;#125; -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                IO.puts(&amp;quot;Current count: #&amp;#123;count&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                loop(count + 1)                     --- Note: loop with count + 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(1)&amp;gt; counter = spawn(Counter, :loop, [1])        --- Note: initialize count to 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(2)&amp;gt; send(counter, &amp;#123;:next&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Current count: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(3)&amp;gt; send(counter, &amp;#123;:next&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Current count: 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Hiding-Messages-Behind-an-API&quot;&gt;&lt;a href=&quot;#Hiding-Messages-Behind-an-API&quot; class=&quot;headerlink&quot; title=&quot;Hiding Messages Behind an API&quot;&gt;&lt;/a&gt;Hiding Messages Behind an API&lt;/h5&gt;&lt;p&gt;A common practice is to provide a set of API, and hide details behind the curtain&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defmodule Counter do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def start(count) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        spawn(__MODULE__, :loop, [count])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def next(counter) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        send(counter, &amp;#123;:next&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def loop(count) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        receive do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:next&amp;#125; -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                IO.puts(&amp;quot;Current count: #&amp;#123;count&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                loop(count + 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(1)&amp;gt; counter = Counter.start(42)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#PID&amp;lt;0.44.0&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(2)&amp;gt; Counter.next(counter)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Current count: 42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(3)&amp;gt; Counter.next(counter)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Current count: 43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Bidirectional-Communication&quot;&gt;&lt;a href=&quot;#Bidirectional-Communication&quot; class=&quot;headerlink&quot; title=&quot;Bidirectional Communication&quot;&gt;&lt;/a&gt;Bidirectional Communication&lt;/h5&gt;&lt;p&gt;What happens if we want to receive a reply? For example, we want Counter actor to return the next number rather than just printing it?&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defmodule Counter do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def start(count) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        spawn(__MODULE__, :loop, [count])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def next(counter) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ref = make_ref()                      --- Note: ref is a unique reference generated by the sender with make_ref(), which is used to ensure that&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        send(counter, &amp;#123;:next, self(), ref&amp;#125;)             the reply will be correctly identified even if there are multiple messages waiting in the client’s mailbox.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        receive do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:ok, ^ref, count&amp;#125; -&amp;gt; count&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def loop(count) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        receive do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:next, sender, ref&amp;#125; -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                send(sender, &amp;#123;:ok, ref, count&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                loop(count + 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Naming-Processes&quot;&gt;&lt;a href=&quot;#Naming-Processes&quot; class=&quot;headerlink&quot; title=&quot;Naming Processes&quot;&gt;&lt;/a&gt;Naming Processes&lt;/h5&gt;&lt;p&gt;What if we don’t know the identifier of the actor to communicate ?&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iex(1)&amp;gt; pid = Counter.start(42)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#PID&amp;lt;0.47.0&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(2)&amp;gt; Process.register(pid, :counter)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(3)&amp;gt; counter = Process.whereis(:counter)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#PID&amp;lt;0.47.0&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(4)&amp;gt; Counter.next(counter)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(6)&amp;gt; send(:counter, &amp;#123;:next, self(), make_ref()&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;:next, #PID&amp;lt;0.45.0&amp;gt;, #Reference&amp;lt;0.0.0.107&amp;gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(7)&amp;gt; receive do msg -&amp;gt; msg end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;:ok, #Reference&amp;lt;0.0.0.107&amp;gt;, 43&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Use this to modify Counter’s API so that it doesn’t require a process identifier each time we call it&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def start(count) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pid = spawn(__MODULE__, :loop, [count])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Process.register(pid, :counter)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pid&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def next do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ref = make_ref()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    send(:counter, &amp;#123;:next, self(), ref&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    receive do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;:ok, ^ref, count&amp;#125; -&amp;gt; count&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Parallel-Map&quot;&gt;&lt;a href=&quot;#Parallel-Map&quot; class=&quot;headerlink&quot; title=&quot;Parallel Map&quot;&gt;&lt;/a&gt;Parallel Map&lt;/h3&gt;&lt;h5 id=&quot;First-class-functions&quot;&gt;&lt;a href=&quot;#First-class-functions&quot; class=&quot;headerlink&quot; title=&quot;First class functions&quot;&gt;&lt;/a&gt;First class functions&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iex(1)&amp;gt; Enum.map([1, 2, 3, 4], fn(x) -&amp;gt; x * 2 end)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[2, 4, 6, 8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(2)&amp;gt; Enum.map([1, 2, 3, 4], &amp;amp;(&amp;amp;1 * 2))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[2, 4, 6, 8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(3)&amp;gt; Enum.reduce([1, 2, 3, 4], 0, &amp;amp;(&amp;amp;1 + &amp;amp;2))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(4)&amp;gt; double = &amp;amp;(&amp;amp;1 * 2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#Function&amp;lt;erl_eval.6.80484245&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(5)&amp;gt; double.(3)                   &amp;lt;-- call anonymous function with the . (apply) operator&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(6)&amp;gt; twice = fn(fun) -&amp;gt; fn(x) -&amp;gt; fun.(fun.(x)) end end        &amp;lt;-- a function that takes an anonymous function as parameter and returns a function&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#Function&amp;lt;erl_eval.6.80484245&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(7)&amp;gt; twice.(double).(3)             &amp;lt;--- equals (twice.(double)).(3)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Parallel-Map-Implementation&quot;&gt;&lt;a href=&quot;#Parallel-Map-Implementation&quot; class=&quot;headerlink&quot; title=&quot;Parallel Map Implementation&quot;&gt;&lt;/a&gt;Parallel Map Implementation&lt;/h5&gt;&lt;p&gt;Enum.map can be used to map a function over a collection sequentially, and here’s an alternative that do it in parallel&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defmodule Parallel do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def map(collection, fun) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        parent = self()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        processes = Enum.map(collection, fn(e) -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            spawn_link(fn() -&amp;gt;                          &amp;lt;-- create a process for each element.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                send(parent, &amp;#123;self(), fun.(e)&amp;#125;)         &amp;lt;-- each of processes applies fun to the element and sends result back&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            end)                                        &amp;lt;-- self() here is the process, not parent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Enum.map(processes, fn(pid) -&amp;gt;                  &amp;lt;-- in parent process, block and wait&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            receive do                                  &amp;lt;-- parent wait result sequentially&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;^pid, result&amp;#125; -&amp;gt; result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The whole logic is like spawning multiple process to handle multiple elements, and join the result together. Test it:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iex(1)&amp;gt; slow_double = fn(x) -&amp;gt; :timer.sleep(1000); x * 2 end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#Function&amp;lt;6.80484245 in :erl_eval.expr/5&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(2)&amp;gt; :timer.tc(fn() -&amp;gt; Enum.map([1, 2, 3, 4], slow_double) end)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;4003414, [2, 4, 6, 8]&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(3)&amp;gt; :timer.tc(fn() -&amp;gt; Parallel.map([1, 2, 3, 4], slow_double) end)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;1001131, [2, 4, 6, 8]&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Error-Handling-and-Resilience&quot;&gt;&lt;a href=&quot;#Error-Handling-and-Resilience&quot; class=&quot;headerlink&quot; title=&quot;Error Handling and Resilience&quot;&gt;&lt;/a&gt;Error Handling and Resilience&lt;/h3&gt;&lt;h5 id=&quot;Example-of-HashDict&quot;&gt;&lt;a href=&quot;#Example-of-HashDict&quot; class=&quot;headerlink&quot; title=&quot;Example of HashDict&quot;&gt;&lt;/a&gt;Example of HashDict&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iex(1)&amp;gt; d = HashDict.new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#HashDict&amp;lt;[]&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(2)&amp;gt; d1 = Dict.put(d, :a, &amp;quot;A value for a&amp;quot;)           &amp;lt;-- we can see, d is immutable, and Dict.put will create a new HashDict instance&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#HashDict&amp;lt;[a: &amp;quot;A value for a&amp;quot;]&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(4)&amp;gt; d1[:a]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;A value for a&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;A-Cache-Actor&quot;&gt;&lt;a href=&quot;#A-Cache-Actor&quot; class=&quot;headerlink&quot; title=&quot;A Cache Actor&quot;&gt;&lt;/a&gt;A Cache Actor&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defmodule Cache do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def loop(pages, size) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        receive do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:put, url, page&amp;#125; -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                new_pages = Dict.put(pages, url, page)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                new_size = size + byte_size(page)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                loop(new_pages, new_size)            &amp;lt;-- loop with new pages and size&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:get, sender, ref, url&amp;#125; -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                send(sender, &amp;#123;:ok, ref, pages[url]&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                loop(pages, size)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:size, sender, ref&amp;#125; -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                send(sender, &amp;#123;:ok, ref, size&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                loop(pages, size)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:terminate&amp;#125; -&amp;gt;                  &amp;lt;-- Terminate request - don&amp;apos;t recurse&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def start_link do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pid = spawn_link(__MODULE__, :loop, [HashDict.new, 0])     &amp;lt;-- init values&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Process.register(pid, :cache)               &amp;lt;-- register a name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pid&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def put(url, page) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        send(:cache, &amp;#123;:put, url, page&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def get(url) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ref = make_ref()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        send(:cache, &amp;#123;:get, self(), ref, url&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        receive do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:ok, ^ref, page&amp;#125; -&amp;gt; page&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def size do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ......         &amp;lt;-- just like get()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def terminate do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        send(:cache, &amp;#123;:terminate&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Actor-fails-when-putting-cache-invalid-data&quot;&gt;&lt;a href=&quot;#Actor-fails-when-putting-cache-invalid-data&quot; class=&quot;headerlink&quot; title=&quot;Actor fails when putting cache invalid data&quot;&gt;&lt;/a&gt;Actor fails when putting cache invalid data&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(5)&amp;gt; Cache.put(&amp;quot;paulbutcher.com&amp;quot;, nil)         &amp;lt;-- use nil as value to put&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;:put, &amp;quot;paulbutcher.com&amp;quot;, nil&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(6)&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=ERROR REPORT==== 22-Aug-2013::16:18:41 ===&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Error in process &amp;lt;0.47.0&amp;gt; with exit value: &amp;#123;badarg,[&amp;#123;erlang,byte_size,[nil],[]&amp;#125; …&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;** (EXIT from #PID&amp;lt;0.47.0&amp;gt;) &amp;#123;:badarg, [&amp;#123;:erlang, :byte_size, [nil], []&amp;#125;, …&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;How Elixir handle failures? Separating error handling out into a separate supervisor process.&lt;/p&gt;
&lt;p&gt;To see how to write such a supervisor, we need to understand links between processes in more detail.&lt;/p&gt;
&lt;h5 id=&quot;Links-Propagate-Abnormal-Termination&quot;&gt;&lt;a href=&quot;#Links-Propagate-Abnormal-Termination&quot; class=&quot;headerlink&quot; title=&quot;Links Propagate Abnormal Termination&quot;&gt;&lt;/a&gt;Links Propagate Abnormal Termination&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defmodule LinkTest do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def loop do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        receive do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:exit_because, reason&amp;#125; -&amp;gt; exit(reason)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:link_to, pid&amp;#125; -&amp;gt; Process.link(pid)         &amp;lt;-- link two processes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:EXIT, pid, reason&amp;#125; -&amp;gt; IO.puts(&amp;quot;#&amp;#123;inspect(pid)&amp;#125; exited because #&amp;#123;reason&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        loop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(1)&amp;gt; pid1 = spawn(&amp;amp;LinkTest.loop/0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(2)&amp;gt; pid2 = spawn(&amp;amp;LinkTest.loop/0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(3)&amp;gt; send(pid1, &amp;#123;:link_to, pid2&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(4)&amp;gt; send(pid2, &amp;#123;:exit_because, :bad_thing_happened&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;:exit_because, :bad_thing_happened&amp;#125;          &amp;lt;--- no message printed by pid1 describing why pid2 exited&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(5)&amp;gt; Process.info(pid2, :status)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(6)&amp;gt; Process.info(pid1, :status)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil                                           &amp;lt;--- both our processes have terminated, not just pid2.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(1)&amp;gt; pid1 = spawn(&amp;amp;LinkTest.loop/0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(2)&amp;gt; pid2 = spawn(&amp;amp;LinkTest.loop/0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(3)&amp;gt; send(pid1, &amp;#123;:link_to, pid2&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(4)&amp;gt; send(pid1, &amp;#123;:exit_because, :another_bad_thing_happened&amp;#125;)        &amp;lt;-- links are bidirectional&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(5)&amp;gt; Process.info(pid1, :status)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(6)&amp;gt; Process.info(pid2, :status)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil                                           &amp;lt;--- both our processes have terminated, not just pid1.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(1)&amp;gt; pid1 = spawn(&amp;amp;LinkTest.loop/0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#PID&amp;lt;0.47.0&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(2)&amp;gt; pid2 = spawn(&amp;amp;LinkTest.loop/0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#PID&amp;lt;0.49.0&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(3)&amp;gt; send(pid1, &amp;#123;:link_to, pid2&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;:link_to, #PID&amp;lt;0.49.0&amp;gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(4)&amp;gt; send(pid2, &amp;#123;:exit_because, :normal&amp;#125;)    &amp;lt;--- pid2 exit normally&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;:exit_because, :normal&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(5)&amp;gt; Process.info(pid2, :status)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(6)&amp;gt; Process.info(pid1, :status)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;:status, :waiting&amp;#125;                             &amp;lt;--- normal termination does not result in linked processes terminating.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;System-Processes&quot;&gt;&lt;a href=&quot;#System-Processes&quot; class=&quot;headerlink&quot; title=&quot;System Processes&quot;&gt;&lt;/a&gt;System Processes&lt;/h5&gt;&lt;p&gt;A process to trap another’s exit by setting its :trap_exit flag, and this is making it into a system process&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def loop_system do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Process.flag(:trap_exit, true)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    loop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(1)&amp;gt; pid1 = spawn(&amp;amp;LinkTest.loop_system/0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#PID&amp;lt;0.47.0&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(2)&amp;gt; pid2 = spawn(&amp;amp;LinkTest.loop/0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#PID&amp;lt;0.49.0&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(3)&amp;gt; send(pid1, &amp;#123;:link_to, pid2&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;:link_to, #PID&amp;lt;0.49.0&amp;gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(4)&amp;gt; send(pid2, &amp;#123;:exit_because, :yet_another_bad_thing_happened&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;:exit_because, :yet_another_bad_thing_happened&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#PID&amp;lt;0.49.0&amp;gt; exited because yet_another_bad_thing_happened      &amp;lt;-- pid1 gets :EXIT message&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(5)&amp;gt; Process.info(pid2, :status)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(6)&amp;gt; Process.info(pid1, :status)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;:status, :waiting&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;cache-supervisor&quot;&gt;&lt;a href=&quot;#cache-supervisor&quot; class=&quot;headerlink&quot; title=&quot;cache supervisor&quot;&gt;&lt;/a&gt;cache supervisor&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defmodule CacheSupervisor do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def start do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        spawn(__MODULE__, :loop_system, [])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def loop do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pid = Cache.start_link        &amp;lt;-- create Cache Actor and link it with spawn_link&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        receive do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:EXIT, ^pid, :normal&amp;#125; -&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                IO.puts(&amp;quot;Cache exited normally&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                :ok                &amp;lt;-- don&amp;apos;t loop when Cache exited normally&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:EXIT, ^pid, reason&amp;#125; -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                IO.puts(&amp;quot;Cache failed with reason #&amp;#123;inspect reason&amp;#125; - restarting it&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                loop               &amp;lt;-- loop when Cache exited abnormally, and that will recreate Cache Actor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def loop_system do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Process.flag(:trap_exit, true)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        loop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Timeout&quot;&gt;&lt;a href=&quot;#Timeout&quot; class=&quot;headerlink&quot; title=&quot;Timeout&quot;&gt;&lt;/a&gt;Timeout&lt;/h5&gt;&lt;p&gt;Automatically restarting the cache is great, but it’s not a panacea. See example below:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Process 1 sends a :put message to the cache.&lt;/li&gt;
&lt;li&gt;Process 2 sends a :get message to the cache.&lt;/li&gt;
&lt;li&gt;The cache crashes while processing process 1’s message.&lt;/li&gt;
&lt;li&gt;The supervisor restarts the cache, but process 2’s message is lost.&lt;/li&gt;
&lt;li&gt;Process 2 is now deadlocked in a receive, waiting for a reply that will never arrive.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Timeout to rescue&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def get(url) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ref = make_ref()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    send(:cache, &amp;#123;:get, self(), ref, url&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    receive do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;:ok, ^ref, page&amp;#125; -&amp;gt; page&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        after 1000 -&amp;gt; nil              &amp;lt;-- timeout here&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;OTP-Intro&quot;&gt;&lt;a href=&quot;#OTP-Intro&quot; class=&quot;headerlink&quot; title=&quot;OTP Intro&quot;&gt;&lt;/a&gt;OTP Intro&lt;/h3&gt;&lt;h5 id=&quot;Functions-and-Pattern-Matching&quot;&gt;&lt;a href=&quot;#Functions-and-Pattern-Matching&quot; class=&quot;headerlink&quot; title=&quot;Functions and Pattern Matching&quot;&gt;&lt;/a&gt;Functions and Pattern Matching&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defmodule Patterns do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def foo(&amp;#123;x, y&amp;#125;) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        IO.puts(&amp;quot;Got a pair, first element #&amp;#123;x&amp;#125;, second #&amp;#123;y&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def foo(&amp;#123;x, y, z&amp;#125;) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        IO.puts(&amp;quot;Got a triple: #&amp;#123;x&amp;#125;, #&amp;#123;y&amp;#125;, #&amp;#123;z&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(1)&amp;gt; Patterns.foo(&amp;#123;:a, 42, &amp;quot;yahoo&amp;quot;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Got a triple: a, 42, yahoo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(2)&amp;gt; Patterns.foo(&amp;#123;:x, :y&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Got a pair, first element x, second y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(3)&amp;gt; Patterns.foo(&amp;quot;something else&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;** (FunctionClauseError) no function clause matching in Patterns.foo/1  ......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Reimplementing-Cache-with-GenServer&quot;&gt;&lt;a href=&quot;#Reimplementing-Cache-with-GenServer&quot; class=&quot;headerlink&quot; title=&quot;Reimplementing Cache with GenServer&quot;&gt;&lt;/a&gt;Reimplementing Cache with GenServer&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defmodule Cache do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    use GenServer.Behaviour&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def handle_cast(&amp;#123;:put, url, page&amp;#125;, &amp;#123;pages, size&amp;#125;) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        new_pages = Dict.put(pages, url, page)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        new_size = size + byte_size(page)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;:noreply, &amp;#123;new_pages, new_size&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def handle_call(&amp;#123;:get, url&amp;#125;, _from, &amp;#123;pages, size&amp;#125;) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;:reply, pages[url], &amp;#123;pages, size&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def handle_call(&amp;#123;:size&amp;#125;, _from, &amp;#123;pages, size&amp;#125;) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;:reply, size, &amp;#123;pages, size&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;handle_cast(), handles messages that do not require a reply. &lt;/li&gt;
&lt;li&gt;It takes two arguments: the first is the message and the second is the current actor state. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;The return value is a pair of the form {:noreply, new_state}.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;handle_call(), handles messages that require a reply. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;It takes three arguments, the message, the sender, and the current state. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;The return value is a triple of the form {:reply, reply_value, new_state}.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Elixir uses variable names that start with an underscore (“_”) to indicate that they’re unused here, say _from.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;wrapper API to call a GenServer&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def start_link do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    :gen_server.start_link(&amp;#123;:local, :cache&amp;#125;, __MODULE__, &amp;#123;HashDict.new, 0&amp;#125;, [])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def put(url, page) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    :gen_server.cast(:cache, &amp;#123;:put, url, page&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def get(url) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    :gen_server.call(:cache, &amp;#123;:get, url&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def size do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    :gen_server.call(:cache, &amp;#123;:size&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;An-OTP-Supervisor&quot;&gt;&lt;a href=&quot;#An-OTP-Supervisor&quot; class=&quot;headerlink&quot; title=&quot;An OTP Supervisor&quot;&gt;&lt;/a&gt;An OTP Supervisor&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defmodule CacheSupervisor do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def init(_args) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        workers = [worker(Cache, [])]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        supervise(workers, strategy: :one_for_one)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;init() function is called during startup. It takes a single argument (unused here) and simply creates a number of workers and sets them up to be supervised.&lt;/li&gt;
&lt;li&gt;The OTP supervisor behaviour supports a number of different restart strategies, the two most common being one-for-one and one-for-all.&lt;/li&gt;
&lt;li&gt;If a single worker fails, a supervisor using the one-for-all strategy will stop and restart all its workers (even those that didn’t fail). &lt;/li&gt;
&lt;li&gt;A supervisor using a one-for-one strategy, by contrast, will only restart the failed worker.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;wrapper API&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def start_link do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    :supervisor.start_link(__MODULE__, [])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;Nodes&quot;&gt;&lt;a href=&quot;#Nodes&quot; class=&quot;headerlink&quot; title=&quot;Nodes&quot;&gt;&lt;/a&gt;Nodes&lt;/h5&gt;&lt;p&gt;Whenever we create an instance of the Erlang virtual machine, we create a node. Now we’ll see how to create and connect multiple nodes.&lt;/p&gt;
&lt;p&gt;For one node to connect to another, they both need to be named. We name a node by starting the Erlang VM with the –name or –sname options.&lt;/p&gt;
&lt;p&gt;create two nodes&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iex --sname node1@10.99.1.50 --cookie yumyum         &amp;lt;-- an Erlang node will accept connection requests only from nodes that have the same cookie.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex --sname node2@10.99.1.92 --cookie yumyum&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;from the first node&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iex(node1@10.99.1.50)1&amp;gt; Node.self                   &amp;lt;-- query its name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:&amp;quot;node1@10.99.1.50&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(node1@10.99.1.50)2&amp;gt; Node.list                   &amp;lt;-- list the other nodes it knows about, so 1.50 don&amp;apos;t know about 1.92 yet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;connect nodes&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iex(node1@10.99.1.50)3&amp;gt; Node.connect(:&amp;quot;node2@10.99.1.92&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(node1@10.99.1.50)4&amp;gt; Node.list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[:&amp;quot;node2@10.99.1.92&amp;quot;]                               &amp;lt;-- now it knows&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(node2@10.99.1.92)1&amp;gt; Node.list                   &amp;lt;-- Connections are bidirectional&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[:&amp;quot;node1@10.99.1.50&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;remote execution&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iex(node1@10.99.1.50)5&amp;gt; whoami = fn() -&amp;gt; IO.puts(Node.self) end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#Function&amp;lt;20.80484245 in :erl_eval.expr/5&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(node1@10.99.1.50)6&amp;gt; Node.spawn(:&amp;quot;node2@10.99.1.92&amp;quot;, whoami)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#PID&amp;lt;8242.50.0&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node2@10.99.1.92                   &amp;lt;-- not only has one node executed code on another, but the output appeared on the first node.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;remote messaging&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iex(node2@10.99.1.92)1&amp;gt; pid = spawn(Counter, :loop, [42])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#PID&amp;lt;0.51.0&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(node2@10.99.1.92)2&amp;gt; :global.register_name(:counter, pid)       &amp;lt;-- similar to Process.register(), except that the name is cluster-global&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(node1@10.99.1.50)1&amp;gt; Node.connect(:&amp;quot;node2@10.99.1.92&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(node1@10.99.1.50)2&amp;gt; pid = :global.whereis_name(:counter)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#PID&amp;lt;7856.51.0&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(node1@10.99.1.50)3&amp;gt; send(pid, &amp;#123;:next&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;:next&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(node1@10.99.1.50)4&amp;gt; send(pid, &amp;#123;:next&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;:next&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Distributed-Word-Count&quot;&gt;&lt;a href=&quot;#Distributed-Word-Count&quot; class=&quot;headerlink&quot; title=&quot;Distributed Word Count&quot;&gt;&lt;/a&gt;Distributed Word Count&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Our solution is divided into three types of actors: one Parser, multiple Counters, and one Accumulator. &lt;/li&gt;
&lt;li&gt;The Parser is responsible for parsing a Wikipedia dump into pages.&lt;/li&gt;
&lt;li&gt;Counters count words within pages.&lt;/li&gt;
&lt;li&gt;The Accumulator keeps track of total word counts across pages.&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;Counter-–-counting-words&quot;&gt;&lt;a href=&quot;#Counter-–-counting-words&quot; class=&quot;headerlink&quot; title=&quot;Counter – counting words&quot;&gt;&lt;/a&gt;Counter – counting words&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defmodule Counter do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    use GenServer.Behaviour&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def start_link do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        :gen_server.start_link(__MODULE__, nil, [])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def deliver_page(pid, ref, page) do                &amp;lt;-- will be called by Parser to reply request_page() request&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        :gen_server.cast(pid, &amp;#123;:deliver_page, ref, page&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def init(_args) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Parser.request_page(self())      &amp;lt;-- kicks things off by calling Parser.request_page() during initialization&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;:ok, nil&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def handle_cast(&amp;#123;:deliver_page, ref, page&amp;#125;, state) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Parser.request_page(self())          &amp;lt;-- starts by requesting another page&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        words = String.split(page)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        counts = Enum.reduce(words, HashDict.new, fn(word, counts) -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Dict.update(counts, word, 1, &amp;amp;(&amp;amp;1 + 1))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            end)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Accumulator.deliver_counts(ref, counts)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;:noreply, state&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Counter-Supervisor&quot;&gt;&lt;a href=&quot;#Counter-Supervisor&quot; class=&quot;headerlink&quot; title=&quot;Counter Supervisor&quot;&gt;&lt;/a&gt;Counter Supervisor&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defmodule CounterSupervisor do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    use Supervisor.Behaviour&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def start_link(num_counters) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        :supervisor.start_link(__MODULE__, num_counters)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def init(num_counters) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        workers = Enum.map(1..num_counters, fn(n) -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            worker(Counter, [], id: &amp;quot;counter#&amp;#123;n&amp;#125;&amp;quot;)         &amp;lt;-- create num_counters Counters with distince id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        supervise(workers, strategy: :one_for_one)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Accumulator-keeps-track-of-Totals&quot;&gt;&lt;a href=&quot;#Accumulator-keeps-track-of-Totals&quot; class=&quot;headerlink&quot; title=&quot;Accumulator keeps track of Totals&quot;&gt;&lt;/a&gt;Accumulator keeps track of Totals&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defmodule Accumulator do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    use GenServer.Behaviour&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def start_link do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        :gen_server.start_link(&amp;#123;:global, :wc_accumulator&amp;#125;, __MODULE__,       &amp;lt;-- it is global&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;HashDict.new, HashSet.new&amp;#125;, [])           &amp;lt;-- hashdict for total counts &amp;amp; hashset for processed pages&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def deliver_counts(ref, counts) do         &amp;lt;-- called by Counter after it counts the page&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        :gen_server.cast(&amp;#123;:global, :wc_accumulator&amp;#125;, &amp;#123;:deliver_counts, ref, counts&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def handle_cast(&amp;#123;:deliver_counts, ref, counts&amp;#125;, &amp;#123;totals, processed_pages&amp;#125;) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if Set.member?(processed_pages, ref) do       &amp;lt;-- in case that the count are received multi times&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:noreply, &amp;#123;totals, processed_pages&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            new_totals = Dict.merge(totals, counts, fn(_k, v1, v2) -&amp;gt; v1 + v2 end)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            new_processed_pages = Set.put(processed_pages, ref)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Parser.processed(ref)              &amp;lt;-- call this after processing pages&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:noreply, &amp;#123;new_totals, new_processed_pages&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Parser-Parsing-and-Fault-Tolerance&quot;&gt;&lt;a href=&quot;#Parser-Parsing-and-Fault-Tolerance&quot; class=&quot;headerlink&quot; title=&quot;Parser - Parsing and Fault Tolerance&quot;&gt;&lt;/a&gt;Parser - Parsing and Fault Tolerance&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defmodule Parser do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    use GenServer.Behaviour&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def start_link(filename) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        :gen_server.start_link(&amp;#123;:global, :wc_parser&amp;#125;, __MODULE__, filename, [])    &amp;lt;-- global&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def request_page(pid) do      &amp;lt;-- called by Counter, pid is the id of Counter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        :gen_server.cast(&amp;#123;:global, :wc_parser&amp;#125;, &amp;#123;:request_page, pid&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def processed(ref) do      &amp;lt;-- called by Accumulator after merge page count&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        :gen_server.cast(&amp;#123;:global, :wc_parser&amp;#125;, &amp;#123;:processed, ref&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def init(filename) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        xml_parser = Pages.start_link(filename)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;:ok, &amp;#123;ListDict.new, xml_parser&amp;#125;&amp;#125;     &amp;lt;-- ListDict for pending pages which have been sent but not yet processed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def handle_cast(&amp;#123;:request_page, pid&amp;#125;, &amp;#123;pending, xml_parser&amp;#125;) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        new_pending = deliver_page(pid, pending, Pages.next(xml_parser))     &amp;lt;-- implemented below&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;:noreply, &amp;#123;new_pending, xml_parser&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def handle_cast(&amp;#123;:processed, ref&amp;#125;, &amp;#123;pending, xml_parser&amp;#125;) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        new_pending = Dict.delete(pending, ref)      &amp;lt;-- if processed, removed from pending pages&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;:noreply, &amp;#123;new_pending, xml_parser&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    defp deliver_page(pid, pending, page) when nil?(page) do    &amp;lt;-- abnormal workflow when no new pages to sent, in this case send pending pages&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if Enum.empty?(pending) do         &amp;lt;-- no pages pending, do nothing&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pending # Nothing to do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;ref, prev_page&amp;#125; = List.last(pending)      &amp;lt;-- ref is also saved in pending, so ref will always be the same for the same page&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Counter.deliver_page(pid, ref, prev_page)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Dict.put(Dict.delete(pending, ref), ref, prev_page)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    defp deliver_page(pid, pending, page) do     &amp;lt;-- normal workflow when there are still pages not sent yet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ref = make_ref()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Counter.deliver_page(pid, ref, page)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Dict.put(pending, ref, page)            &amp;lt;-- not processed yet, so add to pending pages&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;From the code, the whole framework works in “At Least Once” strategy for false tolerance, which means the page could be sent to different Counter for multiple times.&lt;/p&gt;
&lt;p&gt;To avoid duplicity, the same page is always linked to the same ref, which is kept by Parser’s pending page variable and Accumulator’s proessed pages variable.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Counter (multiple)                                 Parser (Only one global)                      Accumulator (Only one global)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   |   --------- Parser.request_page ---------&amp;gt;      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   |                                                 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   |   &amp;lt;--- Counter.deliver_page(pid, ref, page) --- |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   |  (could be new page or old page with old ref)   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   |                                                                                                  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   |   ----------------------------------------Accumulator.deliver_counts(ref, counts) ------------&amp;gt;  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   |                                                                                                  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   |                                                 |  &amp;lt;------- Parser.processed(ref)  ------------  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   |                                                 |                                                |&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Notes on 7 Concurrent Models in 7 Weeks - Part 4. Actors with Elixir&lt;/p&gt;
    
    </summary>
    
      <category term="并发" scheme="http://ijustloveses.github.io/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="并发" scheme="http://ijustloveses.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="7日7并发模型" scheme="http://ijustloveses.github.io/tags/7%E6%97%A57%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="笔记" scheme="http://ijustloveses.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Actor" scheme="http://ijustloveses.github.io/tags/Actor/"/>
    
      <category term="Elixir" scheme="http://ijustloveses.github.io/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>7周7并发模型 P1 - Thread and Lock</title>
    <link href="http://ijustloveses.github.io/2016/06/28/7concurrent-models-in-7weeks-part1/"/>
    <id>http://ijustloveses.github.io/2016/06/28/7concurrent-models-in-7weeks-part1/</id>
    <published>2016-06-28T18:27:25.000Z</published>
    <updated>2016-06-29T06:17:47.000Z</updated>
    
    <content type="html">&lt;p&gt;Notes on 7 Concurrent Models in 7 Weeks - Part 1. Thread and Lock&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;strong&gt;How to create a thread&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HelloWorld&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Thread myThread = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Hello from new thread&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myThread.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Thread.yield();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Hello from main thread&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myThread.join();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Why Thread.yield();&lt;br&gt;yield() is a hint to the scheduler that the current thread is willing to yield the current use of a processor.&lt;br&gt;Without this call, the startup overhead of the new thread would mean that the main thread would almost certainly print first.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Intrinsic Lock&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Counter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; ++count; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getCount&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; count; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Intrinsic lock comes built into every Java object.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;synchronized&lt;/em&gt; claims that the Counter object’ lock when it is called and released when it returns.&lt;/p&gt;
&lt;p&gt;The code has some flaws which will be revealed later.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mysterious Memory&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Puzzle&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; answerReady = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; answer = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Thread t1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        answer = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        answerReady = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Thread t2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (answerReady)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;The meaning of life is: &quot;&lt;/span&gt; + answer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;I don&#39;t know the answer&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t1.start(); t2.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t1.join(); t2.join();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The output could be: “The meaning of life is: 0”, how is it possible? Because line 6 &amp;amp; 7 could be swipped due to&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Compiler statically optimization by reordering&lt;/li&gt;
&lt;li&gt;JVM dynamically optimization&lt;/li&gt;
&lt;li&gt;Hardware is allowded to optimize performance&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And it goes further than just reordering, sometimes it could even change the logic … &lt;/p&gt;
&lt;p&gt;Take above example, the line 7 could even be skipped and answerReady might not be true forever …&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Memory Visibility&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The java memory model defines when changes to memory made by one thread become visible to another thread.&lt;/p&gt;
&lt;p&gt;The bottom line is that there are no guarantees unless both the &lt;em&gt;reading and writing&lt;/em&gt; threads use synchronization.&lt;/p&gt;
&lt;p&gt;The flaw in the code of &lt;em&gt;Intrinsic Lock&lt;/em&gt; section&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Counter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; ++count; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getCount&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; count; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Yep, getCount() needs to be synchronized as well, or a thread calling getCount() may see a stale (not fresh) value.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dead Lock when there are multiple locks&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Based on previous sections, it is the only safe way in a multithread world to make every method synchronized, but:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;it is dreadfully inefficient.&lt;/li&gt;
&lt;li&gt;as soon as you have more than one lock, the opportunity is created for the threads to become deadlocked.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;Dining Philosophers - dead locked version&lt;/em&gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Philosopher&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Thread&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Chopstick left, right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Random random;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Philosopher&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Chopstick left, Chopstick right)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.left = left; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.right = right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    random = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Random();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Thread.sleep(random.nextInt(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;));     &lt;span class=&quot;comment&quot;&gt;// Think for a while&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt;(left) &amp;#123;                    &lt;span class=&quot;comment&quot;&gt;// Grab left chopstick&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt;(right) &amp;#123;                 &lt;span class=&quot;comment&quot;&gt;// Grab right chopstick&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Thread.sleep(random.nextInt(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;// Eat for a while&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(InterruptedException e) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The alternative way of claiming an object’s intrinsic lock: synchronized(object)  &lt;/p&gt;
&lt;p&gt;— claiming an object’s intrinsic lock from outer (by other objects)&lt;/p&gt;
&lt;p&gt;The main role of the thread is a philosopher which holds two Chopsticks, and the philosopher will lock left one and the right one in a row.&lt;br&gt;If 5 philosophers going simultaneousely, then they will lock their left Chopsticks at the same time, and try to lock their right ones,&lt;br&gt;which have been already locked by the philosophers on their right side —- BOOM, dead lock !!&lt;/p&gt;
&lt;p&gt;Dead lock is a danger whenever a thread tries to hold more than one lock.&lt;/p&gt;
&lt;p&gt;How to fix it ??&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Order the chopstick by some rules.&lt;/li&gt;
&lt;li&gt;Instead of lock chopstick from left to right, lock them in ascending or descending order.&lt;br&gt;Done !&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;The peril of Alien Method&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Downloader&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Thread&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; ArrayList&amp;lt;ProgressListener&amp;gt; listeners;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Downloader&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(URL url, String outputFilename)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    listeners = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;ProgressListener&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addListener&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ProgressListener listener)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    listeners.add(listener);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;removeListener&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ProgressListener listener)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    listeners.remove(listener);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;updateProgress&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (ProgressListener listener: listeners)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      listener.onProgress(n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;((n = in.read(buffer)) != -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        out.write(buffer, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        total += n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        updateProgress(total);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      out.flush();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IOException e) &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3 public method are all synchronized, looks good !&lt;/p&gt;
&lt;p&gt;The problem is that the updateProgress() calls an alien method - a method it knows nothing about.&lt;/p&gt;
&lt;p&gt;listener.onProgress() could do anything, including acquiring another lock, which make this a multiple locks case, and dead lock could happen.&lt;/p&gt;
&lt;p&gt;How to fixed it? Defensive copy!&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;updateProgress&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ArrayList&amp;lt;ProgressListener&amp;gt; listenersCopy;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    listenersCopy = (ArrayList&amp;lt;ProgressListener&amp;gt;)listeners.clone();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (ProgressListener listener: listenersCopy)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    listener.onProgress(n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This fix kills several birds with one stone:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Avoid calling an alien method with a lock held.&lt;/li&gt;
&lt;li&gt;Minimizes the period during which we hold the lock.&lt;/li&gt;
&lt;li&gt;A listener could now call removeListener() within its onProgress() method without modifying the copy of listener that is mid-iteration.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;Drawback of Intrinsic Lock&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;No way to interrupt a thread that’s blocked as a result of trying to acquire an intrinsic lock.&lt;/li&gt;
&lt;li&gt;No way to time out while trying to acquire an intrinsic lock.&lt;/li&gt;
&lt;li&gt;Only one way to acquire an intrinsic lock: synchronized block, so lock acquisition and release have to take place in the same method and strictly nested.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;ReentrantLock to rescue&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pattern:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Lock lock = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ReentrantLock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lock.lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;&amp;lt;use shared resources&amp;gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  lock.unlock():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reentrant Lock is interruptable&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Interruptible&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; ReentrantLock l1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ReentrantLock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; ReentrantLock l2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ReentrantLock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Thread t1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          l1.lockInterruptibly();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          Thread.sleep(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          l2.lockInterruptibly();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123; System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;t1 interrupted&quot;&lt;/span&gt;); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Thread t2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          l2.lockInterruptibly();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          Thread.sleep(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          l1.lockInterruptibly();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123; System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;t2 interrupted&quot;&lt;/span&gt;); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t1.start(); t2.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Thread.sleep(&lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t1.interrupt(); t2.interrupt();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t1.join(); t2.join();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;It supposed to be deadlocked, but with the help of {$lock.}lockInterruptibly() and {$thead.}interrupt(), dead lock could be interrupted.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reentrant lock supports timeout&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Another solution fo Dining Philosopher problem – Timeout if the philosophers could not acquire some of their chopstick.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Philosopher&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Thread&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; ReentrantLock leftChopstick, rightChopstick;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Philosopher&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ReentrantLock leftChopstick, ReentrantLock rightChopstick)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.leftChopstick = leftChopstick; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.rightChopstick = rightChopstick;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    random = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Random();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Thread.sleep(random.nextInt(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;// Think for a while&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        leftChopstick.lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rightChopstick.tryLock(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;, TimeUnit.MILLISECONDS)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Got the right chopstick&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              Thread.sleep(random.nextInt(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;// Eat for a while&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123; rightChopstick.unlock(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Didn&#39;t get the right chopstick - give up and go back to thinking&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Philosopher &quot;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot; timed out&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123; leftChopstick.unlock(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(InterruptedException e) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;rightChopstick.tryLock(1000, TimeUnit.MILLISECONDS) supports timeout.&lt;/p&gt;
&lt;p&gt;Although the tryLock() solution avoids infinite deadlock, that doesn’t mean it is a good solution.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It doesn’t avoid deadlock, but simple provides a way to recover when deadlock happens.&lt;/li&gt;
&lt;li&gt;It is susceptible to &lt;em&gt;livelock&lt;/em&gt; phenomenon – if all the threads timeout at the same time, it is possible for them to immediately deadlock again.&lt;br&gt;Although the deadlock doesn’t last forever, no progress is made either. (solve livelock by using different timeout.)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Hand-over-Hand Locking for a linked-list&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To insert a node, instead of lock the whole linked-list, we only lock the two nodes on either side of the point we’re going to insert.&lt;/p&gt;
&lt;p&gt;It is impossible to do it with Intrinsic Lock.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ConcurrentSortedList&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Node&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Node prev;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Node next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ReentrantLock lock = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ReentrantLock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Node() &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Node(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value, Node prev, Node next) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.value = value; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.prev = prev; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.next = next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Node head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Node tail;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ConcurrentSortedList&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    head = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Node(); tail = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Node();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    head.next = tail; tail.prev = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Node current = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    current.lock.lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Node next = current.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        next.lock.lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (next == tail || next.value &amp;lt; value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Node node = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Node(value, current, next);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            next.prev = node;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            current.next = node;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123; current.lock.unlock(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        current = next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        next = current.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123; next.lock.unlock(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Node current = tail;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (current.prev != head) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ReentrantLock lock = current.lock;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      lock.lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ++count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        current = current.prev;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123; lock.unlock(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Each node has a Reentrant Lock.&lt;/p&gt;
&lt;p&gt;insert() iterates linked-list from head to tail, whereas size() iterate from tail to head.&lt;/p&gt;
&lt;p&gt;So, doesn’t these different iterate directions violate the “Always acquire multiple locks in a fixed global order” rule? &lt;/p&gt;
&lt;p&gt;(Remember that this rule fixed Dining Philosophers problem)&lt;/p&gt;
&lt;p&gt;No, it doesn’t violate the rule, coz the size() method never holds more than a single lock at a time&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Condition Variable&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Concurrent programming often involves waiting for something to happen, and this type of situation is what condition variables are designed to address.&lt;/p&gt;
&lt;p&gt;Pattern:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ReentrantLock lock = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ReentrantLock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Condition condition = lock.newCondition();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lock.lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (!&amp;lt;&amp;lt;condition is &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&amp;gt;&amp;gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    condition.await();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;&amp;lt;use shared resources&amp;gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123; lock.unlock(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;A condition variable is associated with a lock, and a thread must hold that lock before being able to wait on the condition.&lt;/p&gt;
&lt;p&gt;Once it holds the lock, it checks to see if the condition is already true,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if true, use shared resources and then unlock&lt;/li&gt;
&lt;li&gt;otherwise, it calls await(), which automatically unlocks the lock and blocks on the condition variable. The unlock and blocks operation is atomic.&lt;/li&gt;
&lt;li&gt;when another thread calls signal() or signalAll() to set condition to true, await() unblocks and automatically reacquires the lock.&lt;/li&gt;
&lt;li&gt;await() is called within a loop, coz we need to go back and recheck whether the condition is true.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dining Philosopher with condition&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Philosopher&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Thread&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; eating;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Philosopher left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Philosopher right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; ReentrantLock table;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Condition condition;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Random random;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Philosopher&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ReentrantLock table)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    eating = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.table = table;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    condition = table.newCondition();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    random = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Random();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setLeft&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Philosopher left)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.left = left; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setRight&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Philosopher right)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.right = right; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        think();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        eat();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;think&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    table.lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      eating = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      left.condition.signal();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      right.condition.signal();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123; table.unlock(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Thread.sleep(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;eat&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    table.lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (left.eating || right.eating)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        condition.await();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      eating = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123; table.unlock(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Thread.sleep(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Still, a thread represents a philosopher, yet in this version, a philosopher no longer tries to hold two chopsticks.&lt;/p&gt;
&lt;p&gt;Instead, the lock is acted on the table, which means the status of all of the 5 philosophers (or 5 chopsticks).&lt;/p&gt;
&lt;p&gt;In think(), a philosopher first lock the current status of table, then he send signal the the philosophers sit beside him that he will unlock the table.&lt;/p&gt;
&lt;p&gt;In eat(), a philosopher first lock the current status, then he waits for his neighbors to finish eating; if so, he will enter eat stat, and unlock the table.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Atomic Variables&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Counting&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; AtomicInteger counter = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AtomicInteger();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CountingThread&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Thread&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; x &amp;lt; &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;; ++x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          counter.incrementAndGet();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CountingThread t1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CountingThread();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CountingThread t2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CountingThread();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t1.start(); t2.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t1.join(); t2.join();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(counter.get());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;incrementAndGet() &amp;amp;&amp;amp; getAndIncrement() are atomic functions for Atomic Variable counter. Using an atomic variable instead of locks has many benefits:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Not possible to forget to acquire locks when necessary.&lt;/li&gt;
&lt;li&gt;No locks are involves, so dead-lock free.&lt;/li&gt;
&lt;li&gt;Atomic varaibles are the foundation of non-blocking algorithm, for example the classes in java.util.concurrent model.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Thread-Creation Redux&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A better way to create thread:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;EchoServer&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ConnectionHandler&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Runnable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ConnectionHandler(Socket socket) &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ServerSocket server = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ServerSocket(&lt;span class=&quot;number&quot;&gt;4567&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Socket socket = server.accept();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Thread handler = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConnectionHandler(socket));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      handler.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Works fine, but suffers from a couple of issues:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Although thread creation is cheap, it is not free, still pay the price for each connection.&lt;/li&gt;
&lt;li&gt;It create as many threads as connections, and when connections come in faster than they could be handled, server will break – DDOS&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Better way to go?&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ServerSocket server = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ServerSocket(&lt;span class=&quot;number&quot;&gt;4567&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; threadPoolSize = Runtime.getRuntime().availableProcessors() * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ExecutorService executor = Executors.newFixedThreadPool(threadPoolSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Socket socket = server.accept();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  executor.execute(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConnectionHandler(socket));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Using a thread pool with twice as many threads as there are available processors.&lt;/p&gt;
&lt;p&gt;If connections come in fast, they will be queued until a thread become free.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Copy on Write&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Recall the &lt;em&gt;The peril of Alien Method&lt;/em&gt; section, we use a temporary list to hold listeners; Better way to go??&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; CopyOnWriteArrayList&amp;lt;ProgressListener&amp;gt; listeners;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Downloader&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(URL url, String outputFilename)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  listeners = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CopyOnWriteArrayList&amp;lt;ProgressListener&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;updateProgress&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (ProgressListener listener: listeners)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    listener.onProgress(n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;It results in very clear and concise code, and more important, it don’t make a copy each time updateProgress() is called,&lt;br&gt;but only when listeners is modified (some listeners’ updateProgress() func may not change the listeners).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Word Count - Sequential&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; HashMap&amp;lt;String, Integer&amp;gt; counts = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;String, Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Iterable&amp;lt;Page&amp;gt; pages = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Pages(&lt;span class=&quot;number&quot;&gt;100000&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;enwiki.xml&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(Page page: pages) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Iterable&amp;lt;String&amp;gt; words = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Words(page.getText());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (String word: words)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      countWord(word);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;countWord&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String word)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Integer currentCount = counts.get(word);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (currentCount == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    counts.put(word, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    counts.put(word, currentCount + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;105 seconds to finish.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Word Count - Producer &amp;amp; Consumer threads&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;producer:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Runnable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; BlockingQueue&amp;lt;Page&amp;gt; queue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(BlockingQueue&amp;lt;Page&amp;gt; queue)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.queue = queue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Iterable&amp;lt;Page&amp;gt; pages = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Pages(&lt;span class=&quot;number&quot;&gt;100000&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;enwiki.xml&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Page page: pages)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        queue.put(page);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) &amp;#123; e.printStackTrace(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;consumer:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Runnable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; BlockingQueue&amp;lt;Page&amp;gt; queue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Map&amp;lt;String, Integer&amp;gt; counts;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(BlockingQueue&amp;lt;Page&amp;gt; queue, Map&amp;lt;String, Integer&amp;gt; counts)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.queue = queue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.counts = counts;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Page page = queue.take();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (page.isPoisonPill())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Iterable&amp;lt;String&amp;gt; words = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Words(page.getText());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (String word: words)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          countWord(word);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) &amp;#123; e.printStackTrace(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;countWord&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String word)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;main thread:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ArrayBlockingQueue&amp;lt;Page&amp;gt; queue = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayBlockingQueue&amp;lt;Page&amp;gt;(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  HashMap&amp;lt;String, Integer&amp;gt; counts = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;String, Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Thread counter = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Counter(queue, counts));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Thread parser = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Parser(queue));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  counter.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  parser.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  parser.join();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  queue.put(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PoisonPill());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  counter.join();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;95 seconds to finish, and we found that parsing wiki pages will only take 10 seconds to finish.&lt;/p&gt;
&lt;p&gt;Since producer &amp;amp; consumer start at the same time, so producer(parse pages) take 10 seconds and consumer(count words) takes 95 seconds.&lt;/p&gt;
&lt;p&gt;Good, but not good enough.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Word Count – multiple consumers using synchronized map&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Synchronized collections don’t provide atomic read-modify-write methods. so locks are necessary.&lt;/p&gt;
&lt;p&gt;consumer:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Runnable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; ReentrantLock lock;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(BlockingQueue&amp;lt;Page&amp;gt; queue, Map&amp;lt;String, Integer&amp;gt; counts)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lock = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ReentrantLock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;countWord&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String word)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lock.lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Integer currentCount = counts.get(word);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (currentCount == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        counts.put(word, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        counts.put(word, currentCount + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123; lock.unlock(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Notes that the lock is static, so the lock is shared among all consumers.&lt;/p&gt;
&lt;p&gt;main thread:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; NUM_COUNTERS = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ArrayBlockingQueue&amp;lt;Page&amp;gt; queue = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayBlockingQueue&amp;lt;Page&amp;gt;(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  HashMap&amp;lt;String, Integer&amp;gt; counts = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;String, Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ExecutorService executor = Executors.newCachedThreadPool();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; NUM_COUNTERS; ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    executor.execute(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Counter(queue, counts));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Thread parser = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Parser(queue));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  parser.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  parser.join();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; NUM_COUNTERS; ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    queue.put(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PoisonPill());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  executor.shutdown();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  executor.awaitTermination(&lt;span class=&quot;number&quot;&gt;10L&lt;/span&gt;, TimeUnit.MINUTES);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;212 seconds to finish using 2 consumers, even longer than the sequential version.&lt;/p&gt;
&lt;p&gt;Why?? Excessive contention - too many threads are trying to access a single shared resource simultaneousely, so lock / unlock takes too many time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Word Count - Multi consumers using ConcurrentHashMap&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ConcurrentHashMap to rescue – which provide atomic functions.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;countWord&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String word)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Integer currentCount = counts.get(word);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (currentCount == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (counts.putIfAbsent(word, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (counts.replace(word, currentCount, currentCount + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;It is faster cause it is lock free.&lt;/p&gt;
&lt;p&gt;The workflow in countWord function is changed, the modification process of the varaible counts is held in a loop.&lt;/p&gt;
&lt;p&gt;First it will get the current value of counts, then it will *update it based on the current value, for example:&lt;/p&gt;
&lt;p&gt;When current is null, update it with putIfAbsent(). If putIfAbsent() is actually called AFTER some thread increases counts, it will fail.&lt;/p&gt;
&lt;p&gt;When current is currentCount, update it with replace() parametrized with currentCount. If replace() is called AFTER current value is changed, it will fail.&lt;/p&gt;
&lt;p&gt;In the case that the update function fails, the update process will loop again and get the updated current value of counts.&lt;/p&gt;
&lt;p&gt;Even the putIfAbsent() or replace() could fail and re-run, this version is still much more faster because it is LOCK-FREE.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Consumers   Time(s)   Speedup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1           120       0.87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2           83        1.26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3           65        1.61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4           63        1.67    &amp;lt;-- best one&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5           70        1.50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6           79        1.33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Word Count - local counts and merge at last&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Instead of each consumers updating a shared set of counts concurrently, each should maintain its own local set, then merge these local sets in the end.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mergeCounts&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Map.Entry&amp;lt;String, Integer&amp;gt; e: localCounts.entrySet()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String word = e.getKey();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Integer count = e.getValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Integer currentCount = counts.get(word);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (currentCount == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (counts.putIfAbsent(word, count) == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (counts.replace(word, currentCount, currentCount + count)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;mergeCounts is called by every consumer after it has already get to the end of the queue (page.isPoisonPill()).&lt;/p&gt;
&lt;p&gt;So ConcurrentHashMap &amp;amp;&amp;amp; Atomic functions are still necessary.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Consumers   Time(s)   Speedup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1           95        1.10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2           57        1.83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3           40        2.62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4           39        2.69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5           35        2.96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6           33        3.14    &amp;lt;-- best one&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7           41        2.55&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Notes on 7 Concurrent Models in 7 Weeks - Part 1. Thread and Lock&lt;/p&gt;
    
    </summary>
    
      <category term="并发" scheme="http://ijustloveses.github.io/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="并发" scheme="http://ijustloveses.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="多线程" scheme="http://ijustloveses.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="7日7并发模型" scheme="http://ijustloveses.github.io/tags/7%E6%97%A57%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="笔记" scheme="http://ijustloveses.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>7周7并发模型 P3 - Seperate Identity from State in Clojure Way</title>
    <link href="http://ijustloveses.github.io/2016/06/28/7concurrent-models-in-7weeks-part3/"/>
    <id>http://ijustloveses.github.io/2016/06/28/7concurrent-models-in-7weeks-part3/</id>
    <published>2016-06-28T18:27:25.000Z</published>
    <updated>2016-06-29T06:21:10.000Z</updated>
    
    <content type="html">&lt;p&gt;Notes on 7 Concurrent Models in 7 Weeks - Part 3. Seperate Identity from State in Clojure Way&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Atoms-and-Persistent-Data-Structures&quot;&gt;&lt;a href=&quot;#Atoms-and-Persistent-Data-Structures&quot; class=&quot;headerlink&quot; title=&quot;Atoms and Persistent Data Structures&quot;&gt;&lt;/a&gt;Atoms and Persistent Data Structures&lt;/h3&gt;&lt;p&gt;A pure functional language provides no support for mutable data whatsoever. Clojure, by contrast, provides a number of different types of concurrency-aware mutable variables. Clojure’s mutable variables allow us to handle real-world side effects while&lt;br&gt;remaining safe and consistent.&lt;/p&gt;
&lt;h5 id=&quot;Atom-Intro&quot;&gt;&lt;a href=&quot;#Atom-Intro&quot; class=&quot;headerlink&quot; title=&quot;Atom Intro&quot;&gt;&lt;/a&gt;Atom Intro&lt;/h5&gt;&lt;p&gt;An atom is an atomic variable, which is built on top of java.util.concurrent.atomic&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (def my-atom (atom 42))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;user/my-atom&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (deref my-atom)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; @my-atom&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (swap! my-atom inc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; @my-atom&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (swap! my-atom + 2)     ---&amp;gt;  + my-atom 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (reset! my-atom 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; @my-atom&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (def session (atom &amp;#123;&amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;user/session&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (swap! session assoc :username &amp;quot;paul&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;:username &amp;quot;paul&amp;quot;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (swap! session assoc :session-id 1234)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;:session-id 1234, :username &amp;quot;paul&amp;quot;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;A-Multithreaded-Web-Service-with-Mutable-State&quot;&gt;&lt;a href=&quot;#A-Multithreaded-Web-Service-with-Mutable-State&quot; class=&quot;headerlink&quot; title=&quot;A Multithreaded Web Service with Mutable State&quot;&gt;&lt;/a&gt;A Multithreaded Web Service with Mutable State&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(def players (atom ()))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn list-players []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	(response (json/encode @players)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn create-player [player-name]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	(swap! players conj player-name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	(status (response &amp;quot;&amp;quot;) 201))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defroutes app-routes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (GET &amp;quot;/players&amp;quot; [] (list-players))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (PUT &amp;quot;/players/:player-name&amp;quot; [player-name] (create-player player-name)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn -main [&amp;amp; args]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (run-jetty (site app-routes) &amp;#123;:port 3000&amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The embedded Jetty server is multithreaded, so our code will need to be thread-safe.&lt;/p&gt;
&lt;p&gt;What happens if one thread adds an entry to the players list while another is iterating over it?&lt;/p&gt;
&lt;p&gt;This code is thread-safe because all of Clojure’s data structures and collections are persistent, ectors, maps, and sets …&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;They makes use of structure sharing, makes use of part of the original, and try to avoid copying when necessary&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;They provide similar performance bounds to their nonpersistent equivalents in languages like Ruby and Java.&lt;/p&gt;
&lt;p&gt;Once a thread has a reference to a data structure, it will see no changes made by any other thread. (works just like Copy On Write)&lt;/p&gt;
&lt;p&gt;Persistent data structures separate identity from state.&lt;/p&gt;
&lt;h5 id=&quot;Retries&quot;&gt;&lt;a href=&quot;#Retries&quot; class=&quot;headerlink&quot; title=&quot;Retries&quot;&gt;&lt;/a&gt;Retries&lt;/h5&gt;&lt;p&gt;Atoms can be lockless, internally they make use of the compareAndSet() method in java.util.concurrent.AtomicReference, fast and don’t block.&lt;/p&gt;
&lt;p&gt;swap! needs to handle the case where the atom has been changed by another thread in between it generating a new value and trying to change that value.&lt;/p&gt;
&lt;p&gt;If that case happens, swap! will retry, discard the value returned by the function and call it again with the atom’s new value.&lt;/p&gt;
&lt;p&gt;We saw something very similar to this already when using ConcurrentHashMap&lt;/p&gt;
&lt;h5 id=&quot;validators&quot;&gt;&lt;a href=&quot;#validators&quot; class=&quot;headerlink&quot; title=&quot;validators&quot;&gt;&lt;/a&gt;validators&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (def non-negative (atom 0 :validator #(&amp;gt;= % 0)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;user/non-negative&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (reset! non-negative 42)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (reset! non-negative -1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IllegalStateException Invalid reference state&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;A validator is a function that’s called whenever an attempt is made to change the value of the atom.&lt;/p&gt;
&lt;p&gt;The validator is called before the value of the atom has been changed and, just like the function that’s passed to swap!,&lt;/p&gt;
&lt;p&gt;it might be called more than once if swap! retries. Therefore, validators also must not have any side effects.&lt;/p&gt;
&lt;h5 id=&quot;Watchers&quot;&gt;&lt;a href=&quot;#Watchers&quot; class=&quot;headerlink&quot; title=&quot;Watchers&quot;&gt;&lt;/a&gt;Watchers&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (def a (atom 0))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;user/a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (add-watch a :print #(println &amp;quot;Changed from &amp;quot; %3 &amp;quot; to &amp;quot; %4))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;Atom@542ab4b1: 0&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (swap! a + 2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Changed from 0 to 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;A watcher is added by providing both a key and a watch function. The key is used to identify the watcher (to delete etc …). &lt;/p&gt;
&lt;p&gt;The watch function is called whenever the value of the atom changes. &lt;/p&gt;
&lt;p&gt;It is given four arguments — the key that was given to add-watch, a reference to the atom, the previous value, and the new value.&lt;/p&gt;
&lt;p&gt;Watch functions are called after the value has changed and will only be called once, no matter how often swap! retries. So side effect is allowed.&lt;/p&gt;
&lt;p&gt;When the watch function is called, the atom’s value may already have changed again, so watch functions should always use the values passed as arguments and never dereference the atom.&lt;/p&gt;
&lt;h5 id=&quot;hybrid-web-server-example&quot;&gt;&lt;a href=&quot;#hybrid-web-server-example&quot; class=&quot;headerlink&quot; title=&quot;hybrid web server example&quot;&gt;&lt;/a&gt;hybrid web server example&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;session id&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(def last-session-id (atom 0))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn next-session-id []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (swap! last-session-id inc))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;session, renew&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(def sessions (atom &amp;#123;&amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn now []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (System/currentTimeMillis))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn new-session [initial]           &amp;lt;-- it is a hash map&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (let [session-id (next-session-id)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          session (assoc initial :last-referenced (atom (now)))]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (swap! sessions assoc session-id session)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    session-id))                     &amp;lt;-- return &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn get-session [id]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (let [session (@sessions id)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (reset! (:last-referenced session) (now))    &amp;lt;-- renew&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        session))                    &amp;lt;-- return&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;session expire scheduler&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn session-expiry-time []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (- (now) (* 10 60 1000)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn expired? [session]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&amp;lt; @(:last-referenced session) (session-expiry-time)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn sweep-sessions []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (swap! sessions #(remove-vals % expired?)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(def session-sweeper&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (schedule &amp;#123;:min (range 0 60 5)&amp;#125; sweep-sessions))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;put snippet into session&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn create-session []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (let [snippets (repeatedly promise)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          translations (delay (map translate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                   (strings-&amp;gt;sentences (map deref snippets))))]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (new-session &amp;#123;:snippets snippets :translations translations&amp;#125;)))          &amp;lt;-- snippets and transactions in session&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Still using an infinite lazy sequence of promises to represent incoming snippets and a map over snippets to represent translations&lt;/p&gt;
&lt;p&gt;But these are now both stored in a session, together with the :last-referenced&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn accept-snippet [session n text]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (deliver (nth (:snippets session) n) text))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn get-translation [session n]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @(nth @(:translations session) n))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;gents&quot;&gt;&lt;a href=&quot;#gents&quot; class=&quot;headerlink&quot; title=&quot;gents&quot;&gt;&lt;/a&gt;gents&lt;/h3&gt;&lt;h5 id=&quot;Agents-Intro&quot;&gt;&lt;a href=&quot;#Agents-Intro&quot; class=&quot;headerlink&quot; title=&quot;Agents Intro&quot;&gt;&lt;/a&gt;Agents Intro&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (def my-agent (agent 0))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;user/my-agent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; @my-agent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (send my-agent inc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;Agent@2cadd45e: 1&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; @my-agent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (send my-agent + 2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;Agent@2cadd45e: 1&amp;gt;              &amp;lt;-- still 1, return before agent has been changed by the asynchronous func&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; @my-agent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;send() returns immediately (before the value of the agent has been changed), the function passed to send is called sometime afterward.&lt;/p&gt;
&lt;p&gt;If multiple threads call send concurrently, execution of the functions passed to send is serialized: only one will execute at a time. &lt;/p&gt;
&lt;p&gt;This means that they will not be retried and can therefore contain side effects.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (def my-agent (agent 0))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;user/my-agent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (send my-agent #((Thread/sleep 2000) (inc %)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;Agent@224e59d9: 0&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; @my-agent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (await my-agent)   &amp;lt;-- use await(), which blocks until all actions dispatched from the current thread to the given agent(s) have completed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; @my-agent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Error-Handling&quot;&gt;&lt;a href=&quot;#Error-Handling&quot; class=&quot;headerlink&quot; title=&quot;Error Handling&quot;&gt;&lt;/a&gt;Error Handling&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (def non-negative (agent 1 :validator (fn [new-val] (&amp;gt;= new-val 0))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;user/non-negative&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (send non-negative dec)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;Agent@6257d812: 0&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; @non-negative&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (send non-negative dec)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;Agent@6257d812: 0&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; @non-negative&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;As we hoped, the value won’t go negative. But what happens if we try to use an agent after it’s experienced an error?&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (send non-negative inc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IllegalStateException Invalid reference state clojure.lang.ARef.validate…&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; @non-negative&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Once an agent experiences an error, it enters a failed state by default, and attempts to dispatch new actions fail. &lt;/p&gt;
&lt;p&gt;We can find out if an agent is failed (and if it is, why) with agent-error, and we can restart it with restart-agent:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (agent-error non-negative)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;IllegalStateException java.lang.IllegalStateException: Invalid reference state&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (restart-agent non-negative 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (agent-error non-negative)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (send non-negative inc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;Agent@6257d812: 1&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; @non-negative&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;By default, agents are created with the :fail error mode. &lt;/p&gt;
&lt;p&gt;Alternatively, you can set the error mode to :continue, in which case you don’t need to call restart-agent to recover an agent.&lt;/p&gt;
&lt;p&gt;The :continue error mode is the default if you set an error handler which is automatically called whenever the agent experiences an error.&lt;/p&gt;
&lt;h5 id=&quot;Example-An-In-Memory-Log&quot;&gt;&lt;a href=&quot;#Example-An-In-Memory-Log&quot; class=&quot;headerlink&quot; title=&quot;Example: An In-Memory Log&quot;&gt;&lt;/a&gt;Example: An In-Memory Log&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(def log-entries (agent []))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn log [entry]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (send log-entries conj [(now) entry]))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Ref-Software-Transactional-Memory&quot;&gt;&lt;a href=&quot;#Ref-Software-Transactional-Memory&quot; class=&quot;headerlink&quot; title=&quot;Ref - Software Transactional Memory&quot;&gt;&lt;/a&gt;Ref - Software Transactional Memory&lt;/h3&gt;&lt;h5 id=&quot;Ref-Intro&quot;&gt;&lt;a href=&quot;#Ref-Intro&quot; class=&quot;headerlink&quot; title=&quot;Ref Intro&quot;&gt;&lt;/a&gt;Ref Intro&lt;/h5&gt;&lt;p&gt;Refs are more sophisticated than atoms and agents, providing software transactional memory (STM). &lt;/p&gt;
&lt;p&gt;STM allows us to make concurrent, coordinated changes to multiple variables, much like a database’s transaction.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (def my-ref (ref 0))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;user/my-ref&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; @my-ref&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (ref-set my-ref 42)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IllegalStateException No transaction running       &amp;lt;-- Modifying the value of a ref is possible only inside a transaction.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (alter my-ref inc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IllegalStateException No transaction running&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;STM transactions are atomic, consistent, and isolated:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Atomic: Either all of the side effects of a transaction take place, or none of them do.&lt;/li&gt;
&lt;li&gt;Consistent: Transactions guarantee preservation of invariants specified through validators.&lt;br&gt;  If any of the changes attempted by a transaction fail to validate, none of the changes will be made.&lt;/li&gt;
&lt;li&gt;Isolated: multiple transactions can execute concurrently, the effect of concurrent transactions will be the same as they are running sequentially.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The missing property is durability, STM data will not survive power loss or crashes.&lt;/p&gt;
&lt;p&gt;A transaction is created with dosync&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (dosync (ref-set my-ref 42))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; @my-ref&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (dosync (alter my-ref inc))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; @my-ref&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Example-Retry-Transactions&quot;&gt;&lt;a href=&quot;#Example-Retry-Transactions&quot; class=&quot;headerlink&quot; title=&quot;Example - Retry Transactions&quot;&gt;&lt;/a&gt;Example - Retry Transactions&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(def attempts (atom 0))       &amp;lt;-- atom&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(def transfers (agent 0))     &amp;lt;-- agent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn transfer [from to amount]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (dosync&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (swap! attempts inc)   // Side-effect in transaction - DON&amp;apos;T DO THIS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (send transfers inc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (alter from - amount)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (alter to + amount)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;stress-tests&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(def checking (ref 10000))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(def savings (ref 20000))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn stress-thread [from to iterations amount]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (Thread. #(dotimes [_ iterations] (transfer from to amount))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn -main [&amp;amp; args]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (println &amp;quot;Before: Checking =&amp;quot; @checking &amp;quot; Savings =&amp;quot; @savings)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (let [t1 (stress-thread checking savings 100 100)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          t2 (stress-thread savings checking 200 100)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (.start t1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (.start t2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (.join t1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (.join t2))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (await transfers)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (println &amp;quot;Attempts: &amp;quot; @attempts)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (println &amp;quot;Transfers: &amp;quot; @transfers)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (println &amp;quot;After: Checking =&amp;quot; @checking &amp;quot; Savings =&amp;quot; @savings))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;result:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Before: Checking = 10000 Savings = 20000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Attempts: 638      --- side effect, break the idea of transaction, a big change that it will change when running the stress-test again&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Transfers: 300     --- 638 - 300 = 338 retires happened&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;After: Checking = 20000 Savings = 10000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Good news: agents are transaction-aware.&lt;/p&gt;
&lt;p&gt;If you use send to modify an agent within a transaction, that send will take place only if the transaction succeeds.&lt;/p&gt;
&lt;p&gt;Clojure uses an exclamation mark to indicate that functions like swap! and reset! are not transaction-safe. &lt;/p&gt;
&lt;p&gt;We can safely update an agent within a transaction because the function that updates an agent’s value is send instead of send!.&lt;/p&gt;
&lt;h5 id=&quot;Atoms-Agents-and-Refs&quot;&gt;&lt;a href=&quot;#Atoms-Agents-and-Refs&quot; class=&quot;headerlink&quot; title=&quot;Atoms, Agents and Refs&quot;&gt;&lt;/a&gt;Atoms, Agents and Refs&lt;/h5&gt;&lt;p&gt;An atom allows you to make synchronous changes to a single value, synchronous because when swap! returns, the update has taken place. &lt;/p&gt;
&lt;p&gt;Updates to one atom are not coordinated with other updates.&lt;/p&gt;
&lt;p&gt;An agent allows you to make asynchronous changes to a single value, asynchronous because the update takes place after send returns. &lt;/p&gt;
&lt;p&gt;Updates to one agent are not coordinated with other updates.&lt;/p&gt;
&lt;p&gt;Refs allow you to make synchronous, coordinated changes to multiple values.&lt;/p&gt;
&lt;h3 id=&quot;In-Depth-Dining-Philosophers-Problem&quot;&gt;&lt;a href=&quot;#In-Depth-Dining-Philosophers-Problem&quot; class=&quot;headerlink&quot; title=&quot;In Depth - Dining Philosophers Problem&quot;&gt;&lt;/a&gt;In Depth - Dining Philosophers Problem&lt;/h3&gt;&lt;h5 id=&quot;Dining-Philosophers-with-STM&quot;&gt;&lt;a href=&quot;#Dining-Philosophers-with-STM&quot; class=&quot;headerlink&quot; title=&quot;Dining Philosophers with STM&quot;&gt;&lt;/a&gt;Dining Philosophers with STM&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(def philosophers (into [] (repeatedly 5 #(ref :thinking))))         &amp;lt;-- a ref per philosopher&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn think []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (Thread/sleep (rand 1000)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn eat []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (Thread/sleep (rand 1000)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn philosopher-thread [n]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (Thread.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #(let [philosopher (philosophers n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               left (philosophers (mod (- n 1) 5))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               right (philosophers (mod (+ n 1) 5))]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (while true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (think)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (when (claim-chopsticks philosopher left right)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (eat)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (release-chopsticks philosopher))))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn -main [&amp;amp; args]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (let [threads (map philosopher-thread (range 5))]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (doseq [thread threads] (.start thread))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (doseq [thread threads] (.join thread))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn release-chopsticks [philosopher]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (dosync (ref-set philosopher :thinking)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;A First Attempt&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn claim-chopsticks [philosopher left right]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (dosync&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (when (and (= @left :thinking) (= @right :thinking))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (ref-set philosopher :eating))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This solution is wrong, and the problem is that we’re accessing the values of left and right with @.&lt;/p&gt;
&lt;p&gt;STM guarantees that no two transactions will make inconsistent modifications to the same ref, but we’re not modifying left or right, just examining their values.&lt;/p&gt;
&lt;p&gt;So, some other transaction could modify them, invalidating the condition that adjacent philosophers can’t eat simultaneously.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ensuring ref doesn’t change in STM&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn claim-chopsticks [philosopher left right]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (dosync&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (when (and (= (ensure left) :thinking) (= (ensure right) :thinking))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (ref-set philosopher :eating))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ensure ensures that the value of the ref it returns won’t be changed by another transaction. &lt;/p&gt;
&lt;p&gt;It is significantly simpler than lock-based solution, and it’s impossible to deadlock coz it is lockless.&lt;/p&gt;
&lt;h5 id=&quot;Dining-Philosophers-Without-STM&quot;&gt;&lt;a href=&quot;#Dining-Philosophers-Without-STM&quot; class=&quot;headerlink&quot; title=&quot;Dining Philosophers Without STM&quot;&gt;&lt;/a&gt;Dining Philosophers Without STM&lt;/h5&gt;&lt;p&gt;Previous section we represents each philosopher as a ref and using transactions to ensure that updates to those refs are coordinated.&lt;/p&gt;
&lt;p&gt;This section we use a single atom to represent the state of all the philosophers as below:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(def philosophers (atom (into [] (repeat 5 :thinking))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn philosopher-thread [philosopher]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (Thread.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #(let [left (mod (- philosopher 1) 5)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               right (mod (+ philosopher 1) 5)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (while true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (think)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (when (claim-chopsticks! philosopher left right)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (eat)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (release-chopsticks! philosopher))))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn release-chopsticks! [philosopher]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (swap! philosophers assoc philosopher :thinking))        &amp;lt;-- assoc use be apply to array too&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The most interesting function to implement is chaim-chopsticks!&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn claim-chopsticks! [philosopher left right]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (swap! philosophers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (fn [ps]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (if (and (= (ps left) :thinking) (= (ps right) :thinking))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (assoc ps philosopher :eating)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ps)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (= (@philosophers philosopher) :eating))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Works but not elegant. Can we avoid the check after calling swap! to see if the chopsticks are claimed?&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn claim-chopsticks! [philosopher left right]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (swap-when! philosophers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #(and (= (%1 left) :thinking) (= (%1 right) :thinking))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        assoc philosopher :eating))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn swap-when!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;If (pred current-value-of-atom) is true, atomically swaps the value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    of the atom to become (apply f current-value-of-atom args). Note that&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    both pred and f may be called multiple times and thus should be free&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    of side effects. Returns the value that was swapped in if the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    predicate was true, nil otherwise.&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [a pred f &amp;amp; args]      &amp;lt;-- arr, predictor and arguments (&amp;amp; means any number of arguments)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (loop []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (let [old @a]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (if (pred old)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (let [new (apply f old args)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    (if (compare-and-set! a old new)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        (recur)))    &amp;lt;-- if compare-and-set! fails, recur to loop back&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                nil))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Notes on 7 Concurrent Models in 7 Weeks - Part 3. Seperate Identity from State in Clojure Way&lt;/p&gt;
    
    </summary>
    
      <category term="并发" scheme="http://ijustloveses.github.io/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="并发" scheme="http://ijustloveses.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="7日7并发模型" scheme="http://ijustloveses.github.io/tags/7%E6%97%A57%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="笔记" scheme="http://ijustloveses.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Clojure" scheme="http://ijustloveses.github.io/tags/Clojure/"/>
    
  </entry>
  
  <entry>
    <title>7周7并发模型 P2 - FP with Clojure</title>
    <link href="http://ijustloveses.github.io/2016/06/28/7concurrent-models-in-7weeks-part2/"/>
    <id>http://ijustloveses.github.io/2016/06/28/7concurrent-models-in-7weeks-part2/</id>
    <published>2016-06-28T18:27:25.000Z</published>
    <updated>2016-06-29T06:24:10.000Z</updated>
    
    <content type="html">&lt;p&gt;Notes on 7 Concurrent Models in 7 Weeks - Part 2. Functional Programming with Clojure&lt;/p&gt;
&lt;p&gt;The rules about locking apply only to data that is both shared between threads and might change, in other words shared mutable state.&lt;/p&gt;
&lt;p&gt;Functional programs have no mutable state, so they cannot suffer from any of the problems associated with shared mutable state.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;The-Perils-of-Mutable-State&quot;&gt;&lt;a href=&quot;#The-Perils-of-Mutable-State&quot; class=&quot;headerlink&quot; title=&quot;The Perils of Mutable State&quot;&gt;&lt;/a&gt;The Perils of Mutable State&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Hidden Mutable State&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DateParser&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; DateFormat format = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;string&quot;&gt;&quot;yyyy-MM-dd&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Date &lt;span class=&quot;title&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String s)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; ParseException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; format.parse(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;It looks like thread-safe, but it is &lt;strong&gt;NOT&lt;/strong&gt;, because SimpleDateFormat() has mutable state buried deep within.&lt;/p&gt;
&lt;p&gt;In Java or C, there’s no way to tell from its API that SimpleDateFormat isn’t thread-safe.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Escapologist Mutable State&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Tournament&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; List&amp;lt;Player&amp;gt; players = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedList&amp;lt;Player&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addPlayer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Player p)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        players.add(p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; Iterator&amp;lt;Player&amp;gt; &lt;span class=&quot;title&quot;&gt;getPlayerIterator&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; players.iterator();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;It looks like thread-safe, single private variable protected by synchronized functions, but it is &lt;strong&gt;NOT&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The iterator returned by getPlayerIterator() still references the mutable state contained within players.&lt;/p&gt;
&lt;p&gt;If another thread calls addPlayer() while the iterator is in use, we’ll see a ConcurrentModificationException or worse. &lt;/p&gt;
&lt;h3 id=&quot;Parallelism-with-Clojure&quot;&gt;&lt;a href=&quot;#Parallelism-with-Clojure&quot; class=&quot;headerlink&quot; title=&quot;Parallelism with Clojure&quot;&gt;&lt;/a&gt;Parallelism with Clojure&lt;/h3&gt;&lt;h5 id=&quot;different-version-of-sum&quot;&gt;&lt;a href=&quot;#different-version-of-sum&quot; class=&quot;headerlink&quot; title=&quot;different version of sum&quot;&gt;&lt;/a&gt;different version of sum&lt;/h5&gt;&lt;p&gt;recursive version&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn recursive-sum [numbers]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (if (empty? numbers)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        0(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        + (first numbers) (recursive-sum (rest numbers)))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;full reduce version&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn reduce-sum [numbers]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (reduce (fn [acc x] (+ acc x)) 0 numbers))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;simple reduce version&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn sum [numbers]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (reduce + numbers))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;parallel version&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(ns sum.core&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (:require [clojure.core.reducers :as r]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn parallel-sum [numbers]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (r/fold + numbers))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;performance compare between sum &amp;amp; parallel-sum&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sum.core=&amp;gt; (def numbers (into []  (range 0 10000000)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sum.core=&amp;gt; (time (sum numbers))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Elapsed time: 1099.154 msecs&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49999995000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sum.core=&amp;gt; (time (sum numbers))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Elapsed time: 125.349 msecs&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49999995000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sum.core=&amp;gt; (time (parallel-sum numbers))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Elapsed time: 236.609 msecs&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49999995000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sum.core=&amp;gt; (time (parallel-sum numbers))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Elapsed time: 49.835 msecs&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49999995000000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;As is often the case with code on JVM, we have to run more than once to give the JIT optimizer a chance to kick in and get a representative time.&lt;/p&gt;
&lt;h5 id=&quot;Counting-Words-Functionally-sequential-version&quot;&gt;&lt;a href=&quot;#Counting-Words-Functionally-sequential-version&quot; class=&quot;headerlink&quot; title=&quot;Counting Words Functionally - sequential version&quot;&gt;&lt;/a&gt;Counting Words Functionally - sequential version&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;Map basis&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (def counts &amp;#123;&amp;quot;apple&amp;quot; 2 &amp;quot;orange&amp;quot; 1&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;user/counts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (get counts &amp;quot;apple&amp;quot; 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (get counts &amp;quot;banana&amp;quot; 0)           &amp;lt;-- get simply looks up a key in the map and either returns its value or returns a default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (assoc counts &amp;quot;banana&amp;quot; 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;banana&amp;quot; 1, &amp;quot;orange&amp;quot; 1, &amp;quot;apple&amp;quot; 2&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (assoc counts &amp;quot;apple&amp;quot; 3)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;orange&amp;quot; 1, &amp;quot;apple&amp;quot; 3&amp;#125;                  &amp;lt;-- assoc takes a map with a key/value and returns a NEW map with the key mapped to the value.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Frequency&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn word-frequencies [words]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (reduce&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (fn [counts word] (assoc counts word (inc (get counts word 0))))           &amp;lt;-- for each word, update frequency from counts and make a new map&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&amp;#125; words))                                                                 &amp;lt;-- init value = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;And actually clojure has a standard lib called frequencies(), does the exactly same thing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;get words&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn get-words [text] (re-seq #&amp;quot;\w+&amp;quot; text))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;map &amp;amp;&amp;amp; mapcat&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (map get-words [&amp;quot;one two three&amp;quot; &amp;quot;four five six&amp;quot; &amp;quot;seven eight nine&amp;quot;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;((&amp;quot;one&amp;quot; &amp;quot;two&amp;quot; &amp;quot;three&amp;quot;) (&amp;quot;four&amp;quot; &amp;quot;five&amp;quot; &amp;quot;six&amp;quot;) (&amp;quot;seven&amp;quot; &amp;quot;eight&amp;quot; &amp;quot;nine&amp;quot;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (mapcat get-words [&amp;quot;one two three&amp;quot; &amp;quot;four five six&amp;quot; &amp;quot;seven eight nine&amp;quot;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&amp;quot;one&amp;quot; &amp;quot;two&amp;quot; &amp;quot;three&amp;quot; &amp;quot;four&amp;quot; &amp;quot;five&amp;quot; &amp;quot;six&amp;quot; &amp;quot;seven&amp;quot; &amp;quot;eight&amp;quot; &amp;quot;nine&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;finally, sequential counting function&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn count-words-sequential [pages]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (frequencies (mapcat get-words pages)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;There might be a problem: If pages are huge, since count-words starts by collating words into a huge sequence, maybe end up running out of memory.&lt;/p&gt;
&lt;p&gt;As long as the pages variables (returned by get_pages(), which is not covered in this doc) is LAZY, there will be no problem.&lt;/p&gt;
&lt;h5 id=&quot;Counting-Words-Functionally-parallel-version&quot;&gt;&lt;a href=&quot;#Counting-Words-Functionally-parallel-version&quot; class=&quot;headerlink&quot; title=&quot;Counting Words Functionally - parallel version&quot;&gt;&lt;/a&gt;Counting Words Functionally - parallel version&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;count pages in parallel&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(pmap #(frequencies (get-words %)) pages)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;pmap function is applied in parallel and semi-lazy, in that the parallel computation stays ahead of the consumption, but it won’t realize result unless required.&lt;/li&gt;
&lt;li&gt;#(…) reader macro is short for an anonymous function. Arguments are specified with %1, %2, …, and % if it takes only a single argument&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;merge maps with specific merge function&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (def merge-counts (partial merge-with +))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;user/merge-counts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (merge-counts &amp;#123;:x 1 :y 2&amp;#125; &amp;#123;:y 1 :z 1&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;:z 1, :y 3, :x 1&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;put them together&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn count-words-parallel [pages]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (reduce (partial merge-with +)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (pmap #(frequencies (get-words %)) pages)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;performance&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The sequential version takes 140 seconds to count 100,000 pages while the parallel version takes 94 s – a 1.5x speedup. Not very Ideal, why ?&lt;/p&gt;
&lt;p&gt;We’re counting and merging on a page-by-page basis, which results in a large number of merges. We can reduce those merges by counting batches of pages instead of a single page at a time.&lt;/p&gt;
&lt;h5 id=&quot;Counting-Words-Functionally-batch-parallel-version&quot;&gt;&lt;a href=&quot;#Counting-Words-Functionally-batch-parallel-version&quot; class=&quot;headerlink&quot; title=&quot;Counting Words Functionally - batch parallel version&quot;&gt;&lt;/a&gt;Counting Words Functionally - batch parallel version&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;100 pages at a time&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn count-words [pages]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (reduce (partial merge-with +)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (pmap count-words-sequential (partition-all 100 pages))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This version counts the same 100,000 pages in forty-four seconds – a 3.2x speedup. Perfect!&lt;/p&gt;
&lt;h5 id=&quot;Fold&quot;&gt;&lt;a href=&quot;#Fold&quot; class=&quot;headerlink&quot; title=&quot;Fold&quot;&gt;&lt;/a&gt;Fold&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn parallel-frequencies [coll]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (r/fold&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (partial merge-with +)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (fn [counts x] (assoc counts x (inc (get counts x 0))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        coll))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;fold - divide and conquer&lt;/li&gt;
&lt;li&gt;1st func is the combine function&lt;/li&gt;
&lt;li&gt;2nd func is the reduce function&lt;/li&gt;
&lt;li&gt;Above function doesn’t work for word count problem, coz no way to perform binary chop on a lazy sequence (pages)&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;Same-Structure-Different-Evaluation-Order&quot;&gt;&lt;a href=&quot;#Same-Structure-Different-Evaluation-Order&quot; class=&quot;headerlink&quot; title=&quot;Same Structure, Different Evaluation Order&quot;&gt;&lt;/a&gt;Same Structure, Different Evaluation Order&lt;/h5&gt;&lt;p&gt;That is why functional programming allows us to parallelize code so easily.&lt;/p&gt;
&lt;p&gt;The following code snippets all perform the same calculation, return the same result, but they execute in very different orders.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1.  (reduce + (map (partial * 2) (range 10000)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.  (reduce + (doall (map (partial * 2) (range 10000))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.  (reduce + (pmap (partial * 2) (range 10000)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.  (reduce + (r/map (partial * 2) (range 10000)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5.  (r/fold + (r/map (partial * 2) (into [] (range 10000))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;lazy sequence, map &amp;amp; reduce sequentially&lt;/li&gt;
&lt;li&gt;doall forces a lazy sequence to fully realized, then reduce on it&lt;/li&gt;
&lt;li&gt;reduces a semi-lazy sequence, which is generated in parallel&lt;/li&gt;
&lt;li&gt;reduce a single lazy sequence with reduce function constructed by + &amp;amp; (partial*2)&lt;/li&gt;
&lt;li&gt;into force to realize a full sequence, and then reduce in parallel by r/fold which creates a tree of reduce and combine ops&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Future-amp-amp-Promise&quot;&gt;&lt;a href=&quot;#Future-amp-amp-Promise&quot; class=&quot;headerlink&quot; title=&quot;Future &amp;amp;&amp;amp; Promise&quot;&gt;&lt;/a&gt;Future &amp;amp;&amp;amp; Promise&lt;/h3&gt;&lt;h5 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h5&gt;&lt;p&gt;A future takes a body of code and executes it &lt;strong&gt;in another thread&lt;/strong&gt;. Its return value is a future object&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (def sum (future (+ 1 2 3 4 5)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; sum&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;core$future_call$reify__6110@5d4ee7d0: 15&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;We can retrieve the value of a future by dereferencing it with either deref or the shorthand @:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (deref sum)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; @sum&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Dereferencing a future will block until the value is available (or realized).&lt;/p&gt;
&lt;p&gt;A promise is similar to a future in that it’s a value that’s realized asynchronously and accessed with deref or @, which will block until it’s realized. The difference is that creating a promise does not cause any code to run, instead its value is set with deliver.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (def meaning-of-life (promise))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (future (println &amp;quot;The meaning of life is:&amp;quot; @meaning-of-life))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;core$future_call$reify__6110@224e59d9: :pending&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (deliver meaning-of-life 42)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;core$promise$reify__6153@52c9f3c7: 42&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The meaning of life is: 42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Service-with-Future-amp-Promise&quot;&gt;&lt;a href=&quot;#Service-with-Future-amp-Promise&quot; class=&quot;headerlink&quot; title=&quot;Service with Future &amp;amp; Promise&quot;&gt;&lt;/a&gt;Service with Future &amp;amp; Promise&lt;/h5&gt;&lt;p&gt;To create a service that accepts data labled by id number, and processes the data sequentially.&lt;/p&gt;
&lt;p&gt;Problem is that the data don’t arrive at server sequentially.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(def snippets (repeatedly promise))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn accept-snippet [n text]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (deliver (nth snippets n) text))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(future&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (doseq [snippet (map deref snippets)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (println snippet)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This uses doseq, which processes a sequence sequentially. In this case, the sequence it’s processing is a lazy sequence of dereferenced promises, each one of which is bound to snippet.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Notes on 7 Concurrent Models in 7 Weeks - Part 2. Functional Programming with Clojure&lt;/p&gt;
&lt;p&gt;The rules about locking apply only to data that is both shared between threads and might change, in other words shared mutable state.&lt;/p&gt;
&lt;p&gt;Functional programs have no mutable state, so they cannot suffer from any of the problems associated with shared mutable state.&lt;/p&gt;
    
    </summary>
    
      <category term="并发" scheme="http://ijustloveses.github.io/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="并发" scheme="http://ijustloveses.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="7日7并发模型" scheme="http://ijustloveses.github.io/tags/7%E6%97%A57%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="笔记" scheme="http://ijustloveses.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="FP" scheme="http://ijustloveses.github.io/tags/FP/"/>
    
      <category term="Clojure" scheme="http://ijustloveses.github.io/tags/Clojure/"/>
    
  </entry>
  
  <entry>
    <title>7周7并发模型 P7 - The Lambda Architecture</title>
    <link href="http://ijustloveses.github.io/2016/06/28/7concurrent-models-in-7weeks-part7/"/>
    <id>http://ijustloveses.github.io/2016/06/28/7concurrent-models-in-7weeks-part7/</id>
    <published>2016-06-28T18:27:25.000Z</published>
    <updated>2016-06-29T06:24:08.000Z</updated>
    
    <content type="html">&lt;p&gt;Notes on 7 Concurrent Models in 7 Weeks - Part 7. The Lambda Architecture&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;The-Batch-Layer-–-MapReduce&quot;&gt;&lt;a href=&quot;#The-Batch-Layer-–-MapReduce&quot; class=&quot;headerlink&quot; title=&quot;The Batch Layer – MapReduce&quot;&gt;&lt;/a&gt;The Batch Layer – MapReduce&lt;/h3&gt;&lt;h3 id=&quot;The-Speed-Layer-–-Counting-Wiki-Contributions-with-Storm&quot;&gt;&lt;a href=&quot;#The-Speed-Layer-–-Counting-Wiki-Contributions-with-Storm&quot; class=&quot;headerlink&quot; title=&quot;The Speed Layer – Counting Wiki Contributions with Storm&quot;&gt;&lt;/a&gt;The Speed Layer – Counting Wiki Contributions with Storm&lt;/h3&gt;&lt;p&gt;Simulate Logs  –&amp;gt;  Parse Logs  –&amp;gt;  Record Contributions&lt;/p&gt;
&lt;h5 id=&quot;Simulating-the-Contribution-Logs&quot;&gt;&lt;a href=&quot;#Simulating-the-Contribution-Logs&quot; class=&quot;headerlink&quot; title=&quot;Simulating the Contribution Logs&quot;&gt;&lt;/a&gt;Simulating the Contribution Logs&lt;/h5&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RandomContributorSpout&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BaseRichSpout&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Random rand = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Random();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; DateTimeFormatter isoFormat = ISODateTimeFormat.dateTimeNoMillis();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; SpoutOutputCollector collector;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; contributionId = &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/// open() is used during initialization&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Map conf, TopologyContext context, SpoutOutputCollector collector)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.collector = collector;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;declareOutputFields&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(OutputFieldsDeclarer declarer)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        declarer.declare(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Fields(&lt;span class=&quot;string&quot;&gt;&quot;line&quot;&lt;/span&gt;));    &lt;span class=&quot;comment&quot;&gt;/// the tuples have a single field called line&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;nextTuple&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Utils.sleep(rand.nextInt(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ++contributionId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String line = isoFormat.print(DateTime.now()) + &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt; + contributionId + &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt; + rand.nextInt(&lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;dummyusername&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        collector.emit(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Values(line));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Parsing-Log-Entries&quot;&gt;&lt;a href=&quot;#Parsing-Log-Entries&quot; class=&quot;headerlink&quot; title=&quot;Parsing Log Entries&quot;&gt;&lt;/a&gt;Parsing Log Entries&lt;/h5&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// parses log, and outputs tuples with four fields, one for each component of the log line&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ContributionParser&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BaseBasicBolt&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;declareOutputFields&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(OutputFieldsDeclarer declarer)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        declarer.declare(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Fields(&lt;span class=&quot;string&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;contributorId&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;username&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Tuple tuple, BasicOutputCollector collector)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Contribution contribution = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Contribution(tuple.getString(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));    &lt;span class=&quot;comment&quot;&gt;/// Contribution class will convert string into four fields, skip.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        collector.emit(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Values(contribution.timestamp, contribution.id, contribution.contributorId, contribution.username));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Recording-Contributions&quot;&gt;&lt;a href=&quot;#Recording-Contributions&quot; class=&quot;headerlink&quot; title=&quot;Recording Contributions&quot;&gt;&lt;/a&gt;Recording Contributions&lt;/h5&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ContributionRecord&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BaseBasicBolt&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/// why set?? adding an item to a set is idempotent. -- At least once !&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; HashMap&amp;lt;Integer, HashSet&amp;lt;Long&amp;gt;&amp;gt; timestamps = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;Integer, HashSet&amp;lt;Long&amp;gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;declareOutputFields&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(OutputFieldsDeclarer declarer)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Tuple tuple, BasicOutputCollector collector)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        addTimestamp(tuple.getInteger(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;), tuple.getLong(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));    &lt;span class=&quot;comment&quot;&gt;/// contributorId &amp;amp; timestamp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addTimestamp&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; contributorId, &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; timestamp)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        HashSet&amp;lt;Long&amp;gt; contributorTimestamps = timestamps.get(contributorId);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (contributorTimestamps == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            contributorTimestamps = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashSet&amp;lt;Long&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            timestamps.put(contributorId, contributorTimestamps);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        contributorTimestamps.add(timestamp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Building-the-Topology&quot;&gt;&lt;a href=&quot;#Building-the-Topology&quot; class=&quot;headerlink&quot; title=&quot;Building the Topology&quot;&gt;&lt;/a&gt;Building the Topology&lt;/h5&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WikiContributorsTopology&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TopologyBuilder builder = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TopologyBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        builder.setSpout(&lt;span class=&quot;string&quot;&gt;&quot;contribution_spout&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RandomContributorSpout(), &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);    &lt;span class=&quot;comment&quot;&gt;/// 4 is a hint instructing Storm to create 4 workers for our spout&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/// simply sends tuples to a random worker&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        builder.setBolt(&lt;span class=&quot;string&quot;&gt;&quot;contribution_parser&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ContributionParser(), &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;).shuffleGrouping(&lt;span class=&quot;string&quot;&gt;&quot;contribution_spout&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/// all tuples with the same values for a set of fields (in our case, the contributorId field)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        builder.setBolt(&lt;span class=&quot;string&quot;&gt;&quot;contribution_recorder&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ContributionRecord(), &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;).fieldsGrouping(&lt;span class=&quot;string&quot;&gt;&quot;contribution_parser&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Fields(&lt;span class=&quot;string&quot;&gt;&quot;contributorId&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        LocalCluster cluster = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LocalCluster();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Config conf = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Config();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cluster.submitTopology(&lt;span class=&quot;string&quot;&gt;&quot;wiki-contributors&quot;&lt;/span&gt;, conf, builder.createTopology());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Thread.sleep(&lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cluster.shutdown();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Notes on 7 Concurrent Models in 7 Weeks - Part 7. The Lambda Architecture&lt;/p&gt;
    
    </summary>
    
      <category term="并发" scheme="http://ijustloveses.github.io/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="并发" scheme="http://ijustloveses.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="7日7并发模型" scheme="http://ijustloveses.github.io/tags/7%E6%97%A57%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="笔记" scheme="http://ijustloveses.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Lambda Architecture" scheme="http://ijustloveses.github.io/tags/Lambda-Architecture/"/>
    
  </entry>
  
</feed>
