<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>泡茶说</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ijustloveses.github.io/"/>
  <updated>2016-12-28T03:09:53.000Z</updated>
  <id>http://ijustloveses.github.io/</id>
  
  <author>
    <name>泡茶</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker in Practice - Advanced</title>
    <link href="http://ijustloveses.github.io/2016/12/28/Docker-in-Practice-Advanced/"/>
    <id>http://ijustloveses.github.io/2016/12/28/Docker-in-Practice-Advanced/</id>
    <published>2016-12-28T03:08:55.000Z</published>
    <updated>2016-12-28T03:09:53.000Z</updated>
    
    <content type="html">&lt;p&gt;Some advanced topics on 《Manning Docker in Practice》&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Docker-Network&quot;&gt;&lt;a href=&quot;#Docker-Network&quot; class=&quot;headerlink&quot; title=&quot;Docker Network&quot;&gt;&lt;/a&gt;Docker Network&lt;/h1&gt;&lt;h3 id=&quot;docker-虚拟网络&quot;&gt;&lt;a href=&quot;#docker-虚拟网络&quot; class=&quot;headerlink&quot; title=&quot;docker 虚拟网络&quot;&gt;&lt;/a&gt;docker 虚拟网络&lt;/h3&gt;&lt;p&gt;Docker 的虚拟网络配置如 &lt;img src=&quot;./docker_virtual_network.png&quot; alt=&quot;下图&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Host 的 eth0 网络连接外网&lt;/li&gt;
&lt;li&gt;Host 的 docker0 网络是一个路由，让 docker 虚拟网络中的容器组成一个局域网&lt;/li&gt;
&lt;li&gt;Host 还有一个 loopback 网络 lo，对应 127.0.0.1&lt;/li&gt;
&lt;li&gt;当容器创建，Docker daemon 会生成一对儿 veth 接口，一个布置在 Host 的 docker0 bridge 上，一个布置在容器的 eth0 上，互相通讯&lt;/li&gt;
&lt;li&gt;容器还可以通过 –net=host 的方式启动，此时共享 Host 的网络设置，而不会创建虚拟网络&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Host 宿主机上执行命令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ip route&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;default via 10.88.147.254 dev eth0         &amp;lt;-- 路由&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.88.147.0/24 dev eth0  proto kernel  scope link  src 10.88.147.128    &amp;lt;-- 网络和 Host 的外网 ip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;169.254.0.0/16 dev eth0  scope link  metric 1003&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172.17.0.0/16 dev docker0  proto kernel  scope link  src 172.17.0.1     &amp;lt;-- docker0 虚拟网络和 Host 在虚拟网络中的 ip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172.18.0.0/16 dev br-79f7b6f4f4e4  proto kernel  scope link  src 172.18.0.1    &amp;lt;-- docker network 启动的另一个虚拟网络&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ip addr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   inet 127.0.0.1/8 scope host lo        &amp;lt;-- lo 网络 ip: 127.0.0.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   inet 10.88.147.128/24 brd 10.88.147.255 scope global eth1    &amp;lt;-- Host 外网 ip: 10.88.147.128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3: docker0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue state UP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   inet 172.17.0.1/16 scope global docker0                      &amp;lt;-- Host 在 Docker0 虚拟网络上的 ip: 172.17.0.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4: br-79f7b6f4f4e4: &amp;lt;NO-CARRIER,BROADCAST,MULTICAST,UP&amp;gt; mtu 1500 qdisc noqueue state DOWN&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   inet 172.18.0.1/16 scope global br-79f7b6f4f4e4              &amp;lt;-- Host 在另一个自定义虚拟网络上的 ip: 172.18.0.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;............&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;容器内执行命令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# ip addr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   inet 127.0.0.1/8 scope host lo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6: eth0@if7: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue state UP group default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   inet 172.17.0.2/16 scope global eth0              &amp;lt;-- 容器在 Docker 虚拟网络中的 ip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# ip route&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;default via 172.17.0.1 dev eth0          &amp;lt;-- 容器在 Docker 虚拟网络中的路由，看到就是宿主机在虚拟网络中的 ip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172.17.0.0/16 dev eth0  proto kernel  scope link  src 172.17.0.2    &amp;lt;-- 虚拟网络和容器在其中的 ip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# route -n&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Kernel IP routing table&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Destination     Gateway         Genmask         Flags Metric Ref    Use Iface&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0.0.0.0         172.17.0.1      0.0.0.0         UG    0      0        0 eth0    &amp;lt;-- 网关就是宿主机在虚拟网络中的 ip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 eth0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用-Resolvable-搭建-DNS-实现容器间互联&quot;&gt;&lt;a href=&quot;#使用-Resolvable-搭建-DNS-实现容器间互联&quot; class=&quot;headerlink&quot; title=&quot;使用 Resolvable 搭建 DNS 实现容器间互联&quot;&gt;&lt;/a&gt;使用 Resolvable 搭建 DNS 实现容器间互联&lt;/h3&gt;&lt;p&gt;前面知道，可以通过 docker run –link 或者 docker-compose 中的 link 来实现容器间访问，其本质是运行时修改 /etc/hosts&lt;/p&gt;
&lt;p&gt;还有更好的方法么？我们知道容器其实运行在 Host 的 docker0 bridge 提供的虚拟网络上，可以在虚拟网络上创建一个 DNS&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/gliderlabs/resolvable/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Resolvable&lt;/a&gt; 可以读取容器信息，并提供 name to ip 的 DNS 服务&lt;/p&gt;
&lt;p&gt;首先，在宿主机执行下面命令，获取 Host 的 docker0 bridge ip 和默认 DNS 配置&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ip addr | grep &amp;apos;inet.*docker0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;inet 172.17.42.1/16 scope global docker0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run --rm ubuntu:14.04.2 cat /etc/resolv.conf | grep nameserver&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nameserver 8.8.8.8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nameserver 8.8.4.4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;启动 Resolvable 容器提供 DNS 服务&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ DNSARGS=&amp;quot;--dns 8.8.8.8 --dns 8.8.4.4&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ PORTARGS=&amp;quot;-p 172.17.42.1:53:53/udp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ VOLARGS=&amp;quot;-v /var/run/docker.sock:/tmp/docker.sock&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -d --name res -h resolvable $DNSARGS $PORTARGS $VOLARGS \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gliderlabs/resolvable:master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一些要点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;–dns 选项将在容器内生成 /etc/resolv.conf 作为后备 DNS，当 Resolvable 服务无法识别给定的 name 时，就把请求转发给 /etc/resolv.conf 中的地址；这个选项在这里完全可以不写，因为选项的值和 Host 中的 /etc/resolv.conf 是完全一致的，而容器会默认继承 Host 中的 /etc/resolv.conf&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;-p 选项指定了端口转发，也就是说，指向 Host docker0 bridge 地址 53 端口的请求会转发到容器的 53 端口，并采用 udp 协议；这个端口用于监听 Resolvable 的 DNS 请求，将由 Resolvable 容器来提供服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;-v 选项把 docker socket 映射到容器中，使得 Resolvable 容器可以访问 Host 的 Docker Daemon&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;–name 和 -h 命令分别指定容器的 name 和 hostname；当 Resolvable 的 DNS 服务生效，Docker 虚拟网络中容器的 \&lt;name\&gt;.docker 和 \&lt;hostname\&gt; 都可以用来查询容器的 ip 地址&lt;/hostname\&gt;&lt;/name\&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以使用 dig (dnsutils on Ubuntu | bind-utils on CentOS) 来 check Resolvable 是否生效&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 向 Docker bridge0 也即 Host 的内网地址发请求，进而转发到 Resolvable 的 53 端口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ dig +short @172.17.42.1 res.docker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172.17.0.22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ dig +short @172.17.42.1 resolvable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172.17.0.22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -it --dns 172.17.42.1 ubuntu:14.04.2 bash     # 启动新容器，dns 指向 docker0，其实会转发到 Resolvable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/# ping -q -c1 res.docker               # 看到，没有使用 link，Host 网络中的容器仍然可以相互可见和访问&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...........&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 packets transmitted, 1 received, 0% packet loss, time 0ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...........&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/# ping -q -c1 www.google.com           # 这里将会使用 /etc/resolv.conf 中的地址&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...........&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 packets transmitted, 1 received, 0% packet loss, time 0ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...........&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后，配置好 Resolvable 之后，可以通过配置 Docker Daemon 选项的方法，配置 –bip=172.17.42.1/16 –dns=172.17.42.1&lt;/p&gt;
&lt;p&gt;这样，之后再次 docker run 启动容器时，自动会生效上面两个选项，其中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;–bip=172.17.42.1/16 用于固定住 docker bridge0 网络路由的 ip，这样 Resolvable 启动中硬编码的 172.17.42.1 就不会失效&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;–dns=172.17.42.1 指定新启动的容器 dns 指向 172.17.42.1，这样 DNS 请求就会通过端口映射转发到 Resolvable 的 53 端口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;使用-Weave-实现跨宿主机的容器间通讯&quot;&gt;&lt;a href=&quot;#使用-Weave-实现跨宿主机的容器间通讯&quot; class=&quot;headerlink&quot; title=&quot;使用 Weave 实现跨宿主机的容器间通讯&quot;&gt;&lt;/a&gt;使用 Weave 实现跨宿主机的容器间通讯&lt;/h3&gt;&lt;p&gt;单宿主机上的容器都在 docker0 bridge 局域网中，上一节使用 Resolvable 在这个局域网中创建 DNS 服务，实现容器间相互通讯。&lt;/p&gt;
&lt;p&gt;多宿主机上的容器显然各自在其宿主机的局域网中，无法互联，也无法使用 Resolvable，那么有办法实现相互通讯么？&lt;/p&gt;
&lt;p&gt;答案是肯定的，使用 Weave 搭建一条虚拟局域网(Weave network)，并实现容器间使用 ip 相互通讯。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/zettio/weave&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Weave&lt;/a&gt; 是一个二进制文件，要在每个需要互联的宿主机上安装一份&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo wget -O /usr/local/bin/weave https://github.com/zettio/weave/releases/download/latest_release/weave&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo chmod +x /usr/local/bin/weave&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;下面，比如要让 host1 &amp;amp; host2 两个宿主机的容器间互联，这两个宿主机本身必须是可以通过 ip 互联的&lt;/p&gt;
&lt;p&gt;在宿主机 host1 上执行&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;host1$ curl http://ip-addr.es       # 通过 curl ip-addr.es 来返回宿主机的 ip 地址&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.2.3.4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;host1$ sudo weave launch            # 使用 sudo 启动 Weave 服务&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;host1$ C=$(sudo weave run 10.0.1.1/24 -t -i ubuntu)      # 通过 weave 而不是通过 docker run 来启动容器，并设置虚拟局域网上容器的 ip&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在宿主机 host2 上执行&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;host2$ curl http://ip-addr.es       # 同样，获取 host2 的 ip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.2.3.5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;host2# sudo weave launch 1.2.3.4    # sudo 启动 Weave 并指定 host1 ip，以 attach 到 host1 的 Weave 服务所创建的虚拟局域网中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;host2# C=$(sudo weave run 10.0.1.2/24 -t -i ubuntu)      # 同样通过 weave 启动容器，并设置虚拟局域网内容器的 ip&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;OK，现在两个容器可以相互通讯了，比如在 host1 上，&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;host1# docker attach $C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@28841bd02eff:/# ping -c 1 -q 10.0.1.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PING 10.0.1.2 (10.0.1.2): 48 data bytes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--- 10.0.1.2 ping statistics ---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 packets transmitted, 1 packets received, 0% packet loss    # 成功 ping 到 host2 上的容器&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;Docker-Orchestration&quot;&gt;&lt;a href=&quot;#Docker-Orchestration&quot; class=&quot;headerlink&quot; title=&quot;Docker Orchestration&quot;&gt;&lt;/a&gt;Docker Orchestration&lt;/h1&gt;&lt;h3 id=&quot;单宿主机上使用-Systemd-进行编排&quot;&gt;&lt;a href=&quot;#单宿主机上使用-Systemd-进行编排&quot; class=&quot;headerlink&quot; title=&quot;单宿主机上使用 Systemd 进行编排&quot;&gt;&lt;/a&gt;单宿主机上使用 Systemd 进行编排&lt;/h3&gt;&lt;p&gt;Docker 本身提供 docker-compose 工具，可以定义单宿主机上容器的配置以及协调容器间的依赖关系。这个工具在 Docker 容器级别上非常好用，但是无法对宿主机非 Docker 领域的资源做管理。&lt;/p&gt;
&lt;p&gt;Systemd 有些类似 Supervisord，是对宿主机服务级别的管理工具，可以在更高的层面上，对容器进行管理和编排。下面以 SQLite + socat 代理为例，看看 systemd 和 docker-compose 的区别&lt;/p&gt;
&lt;p&gt;Systemd 使用 ini 格式的配置文件，下面先看看 SQLite server 容器的配置：/etc/systemd/system/sqliteserver.service&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[Unit]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Description=SQLite Docker Server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;After=docker.service        # 依赖 docker 服务&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Requires=docker.service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[Service]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Restart=always              # 自动重启&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ExecStartPre=-/bin/touch /tmp/sqlitedbs/test      # 启动前准备好宿主机上的数据库目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ExecStartPre=-/bin/touch /tmp/sqlitedbs/live&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ExecStartPre=/bin/bash -c &amp;apos;/usr/bin/docker kill sqliteserver || /bin/true&amp;apos;    # 启动前先清理历史服务&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ExecStartPre=/bin/bash -c &amp;apos;/usr/bin/docker rm -f sqliteserver || /bin/true&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ExecStartPre=/usr/bin/docker pull dockerinpractice/docker-compose-sqlite      # 启动前先 pull 镜像&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ExecStart=/usr/bin/docker run --name sqliteserver \         # 启动命令，就是一条 docker run&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v /tmp/sqlitedbs/test:/opt/sqlite/db \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dockerinpractice/docker-compose-sqlite /bin/bash -c \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;socat TCP-L:12345,fork,reuseaddr \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;EXEC:&amp;quot;sqlite3 /opt/sqlite/db&amp;quot;,pty&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ExecStop=/usr/bin/docker rm -f sqliteserver                 # 服务终止命令，删除容器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[Install]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WantedBy=multi-user.target                        # 系统启动后的服务自动运行命令，后面会看到这条命令如何生效&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后是 socat 代理容器的配置：/etc/systemd/system/sqliteproxy.service&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[Unit]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Description=SQLite Docker Proxy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;After=sqliteserver.service           # 依赖 sqliteserver 服务，故此间接依赖 docker 服务&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Requires=sqliteserver.service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[Service]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Restart=always                       # 自动重启&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ExecStartPre=/bin/bash -c &amp;apos;/usr/bin/docker kill sqliteproxy || /bin/true&amp;apos;    # 类似的启动前清理历史及 pull 镜像&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ExecStartPre=/bin/bash -c &amp;apos;/usr/bin/docker rm -f sqliteproxy || /bin/true&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ExecStartPre=/usr/bin/docker pull dockerinpractice/docker-compose-sqlite&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ExecStart=/usr/bin/docker run --name sqliteproxy \                           # 启动命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-p 12346:12346 --link sqliteserver:sqliteserver \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dockerinpractice/docker-compose-sqlite /bin/bash \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-c &amp;apos;socat TCP-L:12346,fork,reuseaddr TCP:sqliteserver:12345&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ExecStop=/usr/bin/docker rm -f sqliteproxy                                   # 服务终止清理命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[Install]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WantedBy=multi-user.target                                                   # 系统启动后服务自动运行设置&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接下来服务 enable 以及启动后自动运行的配置&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo systemctl enable /etc/systemd/system/sqliteserver.service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ln -s &amp;apos;/etc/systemd/system/sqliteserver.service&amp;apos; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;/etc/systemd/system/multi-user.target.wants/sqliteserver.service&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo systemctl enable /etc/systemd/system/sqliteproxy.service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ln -s &amp;apos;/etc/systemd/system/sqliteproxy.service&amp;apos; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;/etc/systemd/system/multi-user.target.wants/sqliteproxy.service&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;把容器服务 link 到 /etc/systemd/system/multi-user.target.wants/，系统重启进入 multi-user stage 时就会自动启动服务&lt;/p&gt;
&lt;p&gt;运行服务&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo systemctl start sqliteproxy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;由于 Systemd 配置了依赖关系，故此这里只要运行 sqliteproxy，那么它所依赖的服务都会自动启动&lt;/p&gt;
&lt;p&gt;到这里，我们看看 Systemd 和 docker-compose，它们的共同点是都定义了容器间的依赖关系，但是他们的区别是显而易见的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker-compose 着眼于容器自身的配置，比如 link、volume、entrypoint 等等；而这些对于 systemd 来说，只是一条启动命令而已，由使用者自己搞定&lt;/li&gt;
&lt;li&gt;Systemd 则着眼于容器和宿主机之间的联系，比如准备运行环境、启动前中后期宿主所要担负的职责等，是从宿主的角度来编排和配置容器的运行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样看来，我们可以在 systemd 的启动命令部分，直接使用 docker-compose，这样就不需要定义两个服务了，只要一个服务启动两个容器即可&lt;/p&gt;
&lt;h3 id=&quot;多宿主机上使用-Helios-手动-Docker-编排&quot;&gt;&lt;a href=&quot;#多宿主机上使用-Helios-手动-Docker-编排&quot; class=&quot;headerlink&quot; title=&quot;多宿主机上使用 Helios 手动 Docker 编排&quot;&gt;&lt;/a&gt;多宿主机上使用 Helios 手动 Docker 编排&lt;/h3&gt;&lt;p&gt;Helios 是 Spotify 公司开发的 Docker 多宿主编排工具，以手动的方式控制容器具体部署到哪个宿主。出于简单考虑，本部分的例子仍然在单宿主机上运行，不过会指出如何扩展到多宿主的情况。&lt;/p&gt;
&lt;p&gt;Helios 的架构如 &lt;img src=&quot;./helios.png&quot; alt=&quot;下图&quot;&gt;&lt;/p&gt;
&lt;p&gt;具体来说，Helios 由 Masters / ZooKeeper / Agents 组成；Masters 本身也可以是集群，避免单点故障造成可用性损失。Masters 和 Agents 都注册在 Zookeeper 上，由 ZooKeeper 维护集群节点以及部署任务信息；用户向 Master 发送部署 jobs，然后手动指定 jobs 所部属的 Agents 节点。&lt;/p&gt;
&lt;p&gt;部署ZooKeeper，注意 ZooKeeper 本身也可以是集群，而本例中只是部署在一个节点而已&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run --name zookeeper -d jplock/zookeeper:3.4.6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker inspect -f &amp;apos;&amp;#123;&amp;#123;.NetworkSettings.IPAddress&amp;#125;&amp;#125;&amp;apos; zookeeper&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172.17.0.9                 # 记住 ZooKeeper 所部署的位置&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;部署 Helios Master，这里部署在同一个宿主的另一个容器上&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ IMG=dockerinpractice/docker-helios&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -d --name hmaster $IMG helios-master --zk 172.17.0.9         # helios-master 命令，指定 ZooKeeper 的位置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker inspect -f &amp;apos;&amp;#123;&amp;#123;.NetworkSettings.IPAddress&amp;#125;&amp;#125;&amp;apos; hmaster&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172.17.0.11                    # 记住 Master 的位置&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过 ZooKeeper Client 查看 ZK 集群中的配置信息&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker exec -it zookeeper bin/zkCli.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[zk: localhost:2181(CONNECTED) 0] ls /&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[history, config, status, zookeeper]             # 看到，除了默认的 zookeeper 目录之外，Helios Master 创建了另外 3 个目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[zk: localhost:2181(CONNECTED) 2] ls /status/masters&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[896bc963d899]                                   # /status/masters 记录了 Master 的容器 id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[zk: localhost:2181(CONNECTED) 3] ls /status/hosts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[]                                               # 还没有 Agent Hosts&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;部署 Helios Agents，同样部署在同一个宿主上&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -v /var/run/docker.sock:/var/run/docker.sock -d --name hagent \       # 由于 Agents 要负责启动容器，故此，必须能调用 Docker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dockerinpractice/docker-helios helios-agent --zk 172.17.0.9                        # 同样要指定 ZooKeeper 位置，由 ZK 统一管理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker inspect -f &amp;apos;&amp;#123;&amp;#123;.NetworkSettings.IPAddress&amp;#125;&amp;#125;&amp;apos; hagent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172.17.0.12                                                                        # 记住 Agent 的位置&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;再次查看 ZK 中的配置&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[zk: localhost:2181(CONNECTED) 4] ls /status/hosts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[5a4abcb27107]                       # 已经有了 Agent Host&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[zk: localhost:2181(CONNECTED) 5] ls /status/hosts/5a4abcb27107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[agentinfo, jobs, environment, hostinfo, up]       # 这个Host 也配置了一些必要的目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[zk: localhost:2181(CONNECTED) 6] get /status/hosts/5a4abcb27107/agentinfo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;inputArguments&amp;quot;:[&amp;quot;-Dcom.sun.management.jmxremote.port=9203&amp;quot;, [...]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[...]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Helios 环境搭建完毕！下面要做的是，如何使用 Helios 集群来部署和编排容器了！&lt;/p&gt;
&lt;p&gt;首先，创建 Helios Client 的快捷方式&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ alias helios=&amp;quot;docker run -i --rm dockerinpractice/docker-helios \      # 命令会启动 Helios 容器，执行 helios 命令；命令完成后自动退出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;helios -z http://172.17.0.11:5801&amp;quot;                                       # 命令参数需要制定 Helios Masters 的位置&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后创建部署任务，注意这里不指定部署的位置，所做的只是定义一下任务&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ helios create -p nc=8080:8080 netcat:v1 ubuntu:14.04.2 -- \    # 任务名字 netcat:v1，指定镜像，分配端口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sh -c &amp;apos;echo hello | nc -l 8080&amp;apos;                                  # 容器启动后执行的命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ helios jobs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JOB ID NAME VERSION HOSTS COMMAND ENVIRONMENT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;netcat:v1:2067d43 netcat v1 0 sh -c &amp;quot;echo hello | nc -l 8080&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;开始部署&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ helios deploy netcat:v1 5a4abcb27107           # 指定 Agent Host 的容器 ID，表示在该 Host 上部署 netcat 任务；是手动的静态部署！&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ helios status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JOB ID HOST GOAL STATE CONTAINER ID PORTS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;netcat:v1:2067d43 5a4abcb27107.START RUNNING b1225bc nc=8080:8080&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后，任务结束后的清理工作&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ helios undeploy -a --yes netcat:v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ helios remove --yes netcat:v1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后讨论一下 Helios 的集群搭建问题，有几种方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最直接的肯定是在多宿主上直接搭建&lt;/li&gt;
&lt;li&gt;其次，也可以在多宿主上，每个宿主上启动一个容器来搭建；此时，完全可以通过端口映射(Masters 5801/5802; Agents 5803/5804)，把对宿主地址的请求转发到容器之中；同时，启动容器时也要指定 –name $(hostname -f)，可以通过宿主机名字来请求；同样，Agents 容器启动时也要通过 -v 来 link 宿主机的 docker socket&lt;/li&gt;
&lt;li&gt;最后，本例中在单宿主上启动多个容器来搭建的方式，由于都在 bridge0 局域网中，故此采用了 ip 来访问&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Swarm-多宿主编排&quot;&gt;&lt;a href=&quot;#Swarm-多宿主编排&quot; class=&quot;headerlink&quot; title=&quot;Swarm 多宿主编排&quot;&gt;&lt;/a&gt;Swarm 多宿主编排&lt;/h3&gt;&lt;p&gt;Swarm 是 Docker 提供的编排工具，和 Helios 手动配置容器部署位置的特性不同，Swarm 让集群自行控制容器部署的位置，隐藏集群中 hosts 的信息，让用户使用 Swarm 进行多宿主编排时，和在单机上使用 Docker 管理容器一样方便。&lt;/p&gt;
&lt;p&gt;Swarm 也包括 Master、Discovery Service 和 Agents，如 &lt;img src=&quot;./swarm.png&quot; alt=&quot;下图&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;和 Helios 不同，Swarm 通常使用单个 Master，也可以查看 docker swarm 文档查看部署多 Masters 的方法&lt;/li&gt;
&lt;li&gt;Swarm Master 启动后通过 discovery service 获取集群宿主节点信息，以便发布部署命令&lt;/li&gt;
&lt;li&gt;Swarm 可以灵活选用多种服务发现方式和框架，不拘泥于 ZooKeeper。Docker 还给 Swarm 提供了一个基于 token 的 discovery service，后面例子中会用到&lt;/li&gt;
&lt;li&gt;Agents 运行在 Swarm 集群的各个宿主机上，报告宿主机的连接信息给 discovery service，并接收部署任务运行容器。为了运行容器，集群的宿主机必须运行 Docker Daemon，并要暴露在外部的端口(默认 2375)上，方法是 -H ${ip:port}，这样 Master 就可以远程控制该节点的容器了&lt;/li&gt;
&lt;li&gt;类似 Helios，Swarm 也有一个 client 命令程序，同样不是必须运行在 Master 上，只要能正常连接 Master 即可&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举个完整流程的例子&lt;/p&gt;
&lt;p&gt;为使用 discovery service 生成 token&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;h1 $ docker pull swarm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;h1 $ docker run swarm create           # 创建 token，作为 cluster id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126400c309dbd1405cd7218ed3f1a25e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;h1 $ CLUSTER_ID=126400c309dbd1405cd7218ed3f1a25e&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时可以查看 Swarm 集群的宿主列表了。当然，此时并没有宿主&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;h1 $ docker run swarm list token://$CLUSTER_ID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;h1 $ curl https://discovery-stage.hub.docker.com/v1/clusters/$CLUSTER_ID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在 h1 上启动 Agent 容器&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;h1 $ ip addr show eth0 | grep &amp;apos;inet &amp;apos;      # 宿主 h1 的 ip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;inet 10.194.12.221/20 brd 10.194.15.255 scope global eth0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;h1 $ docker run -d swarm join --addr=10.194.12.221:2375 token://$CLUSTER_ID   # join 命令要指定本宿主的 ip ，以及待 join 集群的 id(token)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9bf2db849bac7b33201d6d258187bd14132b74909c72912e5f135b3a4a7f4e51 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;h1 $ docker run swarm list token://$CLUSTER_ID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.194.12.221:2375          # 此时，list 命令可以看到新宿主了；另外，看到 discovery service 记录宿主的 ip 和端口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;h1 $ curl https://discovery-stage.hub.docker.com/v1/clusters/$CLUSTER_ID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&amp;quot;10.194.12.221:2375&amp;quot;]      # 也可以使用 https 来获取宿主列表&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同样在 h1 上启动 master 容器&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;h1 $ docker run -d -p 4000:2375 swarm manage token://$CLUSTER_ID    # 指定集群 id；由于 2375 端口已经被 agent 用了，故此映射到 4000 上&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;04227ba0c472000bafac8499e2b67b5f0629a80615bb8c2691c6ceda242a1dd0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时 Docker (Swarm) Client 可以查看 Swarm 集群的信息了，因为有 Master 了！&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;h1 $ docker -H tcp://localhost:4000 info     # 看到 -H 选项，另外访问 4000 端口，也就是向 Master 的 Docker Daemon 请求&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Containers: 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Strategy: spread                 # 这个是任务在多个宿主机上分配的策略&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Filters: affinity, health, constraint, port, dependency    # 这个是筛选宿主的过滤器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Nodes: 1                         # 一个宿主节点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;h1: 10.194.12.221:2375&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;? Containers: 2                  # 两个容器，一个是 Agent 一个是 Master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;集群中加入一个全新的宿主机，方法是在该宿主机上也启动 Agent 容器，并连接 cluster id&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;h2 $ docker run -d swarm join --addr=10.194.8.7:2375 token://$CLUSTER_ID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;h2 $ docker -H tcp://10.194.12.221:4000 info       # 再次向 Master 请求集群信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Containers: 3         # 共 3 个容器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Strategy: spread&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Filters: affinity, health, constraint, port, dependency&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Nodes: 2              # 共 2 个宿主&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;h2: 10.194.8.7:2375&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;? Containers: 1       # 宿主 h2 上一个容器 (Agent)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;h1: 10.194.12.221:2375&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;? Containers: 2       # 宿主 h1 上一个容器 (Master / Agent)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后看看如何部署容器&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;h2 $ docker -H tcp://10.194.12.221:4000 run -d ubuntu:14.04.2 sleep 60     # 仍然向 Master 发请求，不需要在 Master 上，只要能连接 Master 即可&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0747c14774c70bad00bd7e2bcbf583d756ffe6d61459ca920887894b33734d3a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;h2 $ docker -H tcp://localhost:4000 ps      # 同样，向 Master 请求 docker ps&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0747c14774c7 ubuntu:14.04 sleep 60 19 seconds ago Up Less than a second h1/serene_poitras&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;h2 $ docker -H tcp://10.194.12.221:4000 info | grep Containers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Containers: 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;? Containers: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;? Containers: 3     # 新容器被部署在 h1 上，虽然是从 h2 上发起的请求&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如何删除集群呢？向 discovery service 发起请求&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;h1 $ curl -X DELETE https://discovery.hub.docker.com/v1/clusters/$CLUSTER_ID&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们看到&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Swarm 集群自己控制容器部署的位置&lt;/li&gt;
&lt;li&gt;Swarm Client 只要能够连接 Master，就可以像单机一样执行 Docker 命令，比如 docker info/ docker ps/ docker run，只是加了个 -H 选项而已&lt;/li&gt;
&lt;li&gt;本例中，Master/Agent 都是在宿主机上通过 Docker 容器创建的，为了让 Client 能连接 Master，也为了让 Master 控制宿主 Agent 启动容器，Master 和 Agent 所在宿主的 Docker Daemon 都要通过 -H ${ip:port} 的方式启动&lt;/li&gt;
&lt;li&gt;Master 和 Agent 都把服务对应的端口映射到了宿主机的外部端口上，这样，相互间的交互并不是通过 Docker 内部的虚拟局域网进行的 (因为要跨宿主机通讯，docker 虚拟局域网满足不了这个需求)，而是通过向各自宿主的端口发送 docker 命令来实现通讯的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面的一点是我根据上述内容的猜测：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Helios Client 发送部署指令给 Masters，并由用户指定部署位置，然后 Masters 向 ZK 写入指令，然后对应的 Agent 读取指令并启动容器；也就是说由 ZK 来协调，容器是 Agent 自己来启动的，故此 Agent 不需要暴露 docker daemon&lt;/li&gt;
&lt;li&gt;Swarm 则是由 Master 来协调和管理部署逻辑，discovery service 只是用于维护 Swarm 集群的宿主和容器信息；Master 收到部署指令后，根据自身的逻辑找到一个 Agent Host，然后主动向该 Host 暴露的 docker daemon 发起容器启动命令&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;使用-Kubernetes-方便的-scale-up&quot;&gt;&lt;a href=&quot;#使用-Kubernetes-方便的-scale-up&quot; class=&quot;headerlink&quot; title=&quot;使用 Kubernetes 方便的 scale up&quot;&gt;&lt;/a&gt;使用 Kubernetes 方便的 scale up&lt;/h3&gt;&lt;p&gt;前面介绍的 Helios 和 Swarm 是两个极端，前者手动静态部署，后者全自动动态部署。而 Google 出品的 Kubernetes 则是从另一个角度来看待容器的编排，它把业务相关容器组成 pod 来提供服务，并实现了 pod 服务的轻松并行扩容。&lt;/p&gt;
&lt;p&gt;Kubernetes 的架构简略的看，如 &lt;img src=&quot;./kubernetes.png&quot; alt=&quot;下图&quot;&gt;&lt;/p&gt;
&lt;p&gt;Kubernetes 是 master-minion 架构：Master 单节点，负责接收命令和编排资源；每个 Minion 节点都安装着 Docker 和 Kubelet 服务，后者负责管理本节点上的 pods；自带 Etcd 负责维护集群信息；Kubernetes 还提供一个 client 来管理 Master，称作 kubectl&lt;/p&gt;
&lt;p&gt;Kubernetes 既可以直接安装在你的 host 上，得到一个 single-minion cluster，也可以使用 vagrant 安装一个 multi-minion cluster，这里不详细介绍了。下面会介绍一个例子，使用 Kubernetes 来把事先创建好的容器 scale up，而这个例子假设你已经安装好一个 multi-minion cluster&lt;/p&gt;
&lt;p&gt;首先使用 kubectl 的 run-container 命令来启动容器，并把容器包装在一个 pod 中&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl run-container todo --image=dockerinpractice/todo     # 指定容器的镜像，指定 pod 名字为 todo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl get pods | egrep &amp;quot;(POD|todo)&amp;quot;           # get pods 命令列出当前的 pods，我们筛选出其中的 todo pod 以及 header&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;POD        IP          CONTAINER(S) IMAGE(S) HOST LABELS             STATUS  CREATED        MESSAGE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;todo-hmj8e 10.245.1.3/                            run-container=todo Pending About a minute      # label 为 key-value 对儿， Pending 是因为还要 pull image，故此还未运行&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时就可以简单的扩容，比如运行起完全相同的 3 个 pod 服务，如下&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl resize --replicas=3 replicationController todo     # replicationController 是 Kubernetes 提供的复制控制服务，todo 是 pod 名字&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;resized&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl get pods | egrep &amp;quot;todo&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;todo-2ip3n 10.246.2.2 10.245.1.4/10.245.1.4 run-container=todo Running 10 minutes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;todo-4os5b 10.246.1.3 10.245.1.3/10.245.1.3 run-container=todo Running 2 minutes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;todo-cuggp 10.246.2.3 10.245.1.4/10.245.1.4 run-container=todo Running 2 minutes    # 看到，labels 是相同的，3个 pod 被分配到两个 hosts 上&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里简单的介绍了 Kubernetes 的 scale up 方法，例子中 pod 是由一个容器构成的，实际上 pod 可以包含业务相关的多个容器，而且容器间共享 ip/volumes/ports，具体的这里就不再多说了，参见&lt;a href=&quot;https://github.com/ijustloveses/hexo_source/blob/master/Kubernetes-microservices-with-docker.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;创建-Mesos-framework-编排容器&quot;&gt;&lt;a href=&quot;#创建-Mesos-framework-编排容器&quot; class=&quot;headerlink&quot; title=&quot;创建 Mesos framework 编排容器&quot;&gt;&lt;/a&gt;创建 Mesos framework 编排容器&lt;/h3&gt;&lt;p&gt;Mesos 并非容器编排工具，而是”framework for a framework”，其本质是提供了多宿主机之间的资源管理抽象，协调资源以运行其他的框架和应用。&lt;/p&gt;
&lt;p&gt;Mesos 的构架和流程如 &lt;img src=&quot;./mesos.png&quot; alt=&quot;图&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Slaves 运行在集群节点上，保持把可用的资源通知给 Active Master&lt;/li&gt;
&lt;li&gt;Master 持续收到各 Slaves 的通报，生成对应的 resource offers，并把 offers 发送给 Scheduler&lt;/li&gt;
&lt;li&gt;Scheduler 收到 offers，并根据各个 Slaves 的资源情况决定在哪个 Slave 节点上执行任务，并把决策和任务返回给 Masters&lt;/li&gt;
&lt;li&gt;Master 把任务返回给决策对应的 Slave&lt;/li&gt;
&lt;li&gt;Slave 把任务信息传给本节点的 Executor，如果没有则创建一个 Executor&lt;/li&gt;
&lt;li&gt;Executor 读取任务信息，在节点上启动任务，任务运行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个架构中，Mesos 集群提供了 Masters、Slaves、内建的 Shell Executor；Mesos 用户则负责实现一个 Framework (或 Application)，其中包括 Scheduler 用于定义任务和根据资源做决策，还可以选择不使用默认的 Executor 而自定义 Executor；实际上也有很多第三方的 Framework，下一章我们会介绍一个；Zookeeper 只是用于多 Masters 间做 leader election，而不用于维护 Slaves 节点，Slaves 直接和 Active Master 通讯&lt;/p&gt;
&lt;p&gt;看了 Mesos 的流程后，不禁要问如何让 Mesos 和 Docker 发生关系来编排容器呢？原来 Mesos 自身支持容器化的 Executor 和任务，这里的容器化不仅仅包括 Docker，但是由于 Docker 的普遍性，Mesos 对 Docker 有一些额外和特有的支持&lt;/p&gt;
&lt;p&gt;这里举个自己实现框架的例子，只实现了 Scheduler，并没有自定义 Executor，而是使用默认的；整个集群都部署在单宿主机的 Docker 局域网内&lt;/p&gt;
&lt;p&gt;启动 Master 容器。这里采用单 Master，而不用 Masters 集群，这样连 Zookeeper 也省了&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -d --name mesmaster redjack/mesos:0.21.0 mesos-master --work_dir=/opt     # mesos-master 命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker inspect -f &amp;apos;&amp;#123;&amp;#123;.NetworkSettings.IPAddress&amp;#125;&amp;#125;&amp;apos; mesmaster&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172.17.0.2             &amp;lt;-- 查看 Master ip，是 Docker 局域网内的 ip&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;启动 Slave 容器。Master 容器的启动选项非常简单，而 Slave 的就麻烦的多&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -d --name messlave --pid=host \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v /var/run/docker.sock:/var/run/docker.sock -v /sys:/sys \    # Slave节点要负责启动任务容器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;redjack/mesos:0.21.0 mesos-slave \                             # mesos-slave 命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--master=172.17.0.2:5050 --executor_registration_timeout=5mins \    # 指定 Master 和通讯超时&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--isolation=cgroups/cpu,cgroups/mem --containerizers=docker,mesos \    # Mesos 的特有 Docker 支持选项&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--resources=&amp;quot;ports(*):[8000-8100]&amp;quot;       # Mesos 默认提供 31000-32000，我们这里使用 8000-8100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker inspect -f &amp;apos;&amp;#123;&amp;#123;.NetworkSettings.IPAddress&amp;#125;&amp;#125;&amp;apos; messlave&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172.17.0.3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;启动自定义的 Framework，这里采用笔者实现的框架&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git clone https://github.com/docker-in-practice/mesos-nc.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 启动 Mesos 容器，但不调用 mesos-master 或 mesos-slave，而是调用 bash，并把当前目录映射到 /opt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -it --rm -v $(pwd)/mesos-nc:/opt redjack/mesos:0.21.0 bash   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# apt-get update &amp;amp;&amp;amp; apt-get install -y python&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# cd /opt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# export PYTHONUSERBASE=/usr/local&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# python myframework.py 172.17.0.2:5050          # 这里启动 Framework，并指定 Master 的 5050 端口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0312 02:11:07.642227 182 sched.cpp:137] Version: 0.21.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0312 02:11:07.645598 176 sched.cpp:234] New master detected at master@172.17.0.2:5050&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0312 02:11:07.648449 176 sched.cpp:408] Framework registered with 20150312-014359-33558956-5050-1-0000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Received offer 20150312-014359-33558956-5050-1-O0. cpus: 4.0, mem: 6686.0, ports: 8000-8100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Creating task 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Task 0 is in state TASK_RUNNING&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[...]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Received offer 20150312-014359-33558956-5050-1-O5. cpus: 3.5, mem: 6586.0, ports: 8005-8100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Creating task 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Task 5 is in state TASK_RUNNING&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[...]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Received offer 20150312-014359-33558956-5050-1-O6. cpus: 3.4, mem: 6566.0, ports: 8006-8100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Declining offer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[...]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;看到 framework 接收到 Master 发来的 offers，然后决策并创建任务，到最后传给 Master 并由后者协调 Slave 启动任务&lt;/p&gt;
&lt;p&gt;myframework.py 为 framework 的代码，well-commented，简单来说，实现 framework 的话需要实现下面的代码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class TestScheduler(mesos.interface.Scheduler):           # 继承自 mesos.interface.Scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[...]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def registered(self, driver, frameworkId, masterInfo):    # 向 Master 注册 framework，可实现也可以继承父类&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[...]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def statusUpdate(self, driver, update):                   # 状态更新，同样可继承父类&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[...]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def resourceOffers(self, driver, offers):                 # 这个必须实现，是 framework 的核心逻辑&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[...]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;resourceOffers 函数决策启动任务或者拒绝 offer，其逻辑类似下面&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;遍历当前的 offers，从 offers 中取出 offer，从 offer 中取出资源&lt;/li&gt;
&lt;li&gt;计算资源是否足够启动任务，是则接受 offer 启动任务，否则 decline offer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后说一句，上面并没有展示任务启动的细节，这里大概说一下， myframework.py 中定义的具体任务是由 Slave 启动一个容器，容器中执行 echo ‘hello &lt;task id=&quot;&quot;&gt;‘ | nc -l &lt;port&gt;&lt;/port&gt;&lt;/task&gt;&lt;/p&gt;
&lt;h3 id=&quot;Marathon-framework-for-Mesos&quot;&gt;&lt;a href=&quot;#Marathon-framework-for-Mesos&quot; class=&quot;headerlink&quot; title=&quot;Marathon framework for Mesos&quot;&gt;&lt;/a&gt;Marathon framework for Mesos&lt;/h3&gt;&lt;p&gt;前面看到可以实现 Mesos framework 来细粒度的控制资源和任务的调度，然而实现起来并不简单，而且 error-prone。对于一些并不是很复杂的系统，我们可以直接使用 Marathon 这个 Mesosphere 公司自己研发 framework&lt;/p&gt;
&lt;p&gt;Marathon 依赖 Zookeeper，那么我们确保上一章的 setting，再启动一个 Zookeeper；此时，集群各个节点如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker inspect -f &amp;apos;&amp;#123;&amp;#123;.NetworkSettings.IPAddress&amp;#125;&amp;#125;&amp;apos; mesmaster&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172.17.0.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker inspect -f &amp;apos;&amp;#123;&amp;#123;.NetworkSettings.IPAddress&amp;#125;&amp;#125;&amp;apos; messlave&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172.17.0.3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker inspect -f &amp;apos;&amp;#123;&amp;#123;.NetworkSettings.IPAddress&amp;#125;&amp;#125;&amp;apos; zookeeper&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172.17.0.4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;启动 Marathon&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker pull mesosphere/marathon:v0.8.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[...]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -d -h $(hostname) --name marathon -p 8080:8080 \     # 指定 hostname，并映射 web 服务的端口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mesosphere/marathon:v0.8.2 --master 172.17.0.2:5050 --local_port_min 8000 \     # 指定 Master 和端口范围&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--local_port_max 8100 --zk zk://172.17.0.4:2181/marathon          # 指定 Zookeeper&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Marathon 在 8080 端口上开放了一个 Web 控制台，可以创建 App，在 Marathon 的世界，App 代表一个或多个具有相同定义的任务；然后设置 App 的 CPU/Mem/Disk，最后设置 App 执行的实际命令即可。之后我们就可以在 Web 界面中看到执行的任务了&lt;/p&gt;
&lt;p&gt;上面创建的 App 配置信息可以通过如下的 HTTP Restful API 来获取&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl http://localhost:8080/v2/apps/marathon-nc/versions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;versions&amp;quot;:[&amp;quot;2015-06-30T19:52:44.649Z&amp;quot;]&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ curl -s http://localhost:8080/v2/apps/marathon-nc/versions/2015-06-30T19:52:44.649Z &amp;gt; app.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ cat app.json                           # App 配置保存在 app.json 文件之中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;id&amp;quot;:&amp;quot;/marathon-nc&amp;quot;, &amp;quot;cmd&amp;quot;:&amp;quot;echo \&amp;quot;hello $MESOS_TASK_ID\&amp;quot; | nc -l $PORT0&amp;quot;,[...] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ curl http://172.17.0.3:8000            # 上面查到 App 的命令信息后，可以调用 App 了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hello marathon-nc.f56f140e-19e9-11e5-a44d-0242ac110012&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;还是回到 Docker，如何利用 Marathon 编排容器呢？也就是说如何创建一个 App，App 命令是启动某个特定的容器呢？&lt;/p&gt;
&lt;p&gt;在前面得到的 app.json 中加入&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;container&amp;quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;type&amp;quot;: &amp;quot;DOCKER&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;docker&amp;quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;quot;image&amp;quot;: &amp;quot;ubuntu:14.04.2&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;quot;network&amp;quot;: &amp;quot;BRIDGE&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;quot;portMappings&amp;quot;: [&amp;#123;&amp;quot;hostPort&amp;quot;: 8000, &amp;quot;containerPort&amp;quot;: 8000&amp;#125;]    # 映射到宿主 8000 端口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时不能通过 Marathon WEB 界面来创建容器化任务了，而是通过 Http Restful API 来创建&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl -X POST -H &amp;apos;Content-Type: application/json; charset=utf-8&amp;apos; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--data-binary @app.json http://localhost:8080/v2/apps&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在可以通过 docker 命令查看容器化启动的 app 了&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker ps --since=marathon&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;284ced88246c ubuntu:14.04 &amp;quot;\&amp;quot;/bin/sh -c &amp;apos;echo About a minute ago Up About a minute 0.0.0.0:8000-&amp;gt;8000/tcp mesos-1da85151-59c0-4469-9c50-2bfc34f1a987&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ curl localhost:8000              # 调用命令，8000 端口已经映射到容器中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hello mesos-nc.675b2dc9-1f88-11e5-bc4d-0242ac11000e&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;服务发现&quot;&gt;&lt;a href=&quot;#服务发现&quot; class=&quot;headerlink&quot; title=&quot;服务发现&quot;&gt;&lt;/a&gt;服务发现&lt;/h1&gt;&lt;h3 id=&quot;Using-Consul-to-discover-services&quot;&gt;&lt;a href=&quot;#Using-Consul-to-discover-services&quot; class=&quot;headerlink&quot; title=&quot;Using Consul to discover services&quot;&gt;&lt;/a&gt;Using Consul to discover services&lt;/h3&gt;&lt;p&gt;前面介绍过 Etcd 和 Zookeeper，都是 discover services 的框架；Consul 是个和 Etcd 齐名的框架，而且它同时具有 k-v store, discover services 和 health checks 的功能，可以视为 Etcd、SkyDNS 和 Nagios 的综合体。k-v store 作为 Service Configuration 的方面，Consul 和 Etcd 非常类似，不再赘述；这里着重介绍 Consul 的 service discovery 和 service monitoring 功能&lt;/p&gt;
&lt;p&gt;Consul 的架构如 &lt;img src=&quot;./consul.png&quot; alt=&quot;图&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;server agents 负责管理 Consul 集群存储的数据，维护数据的 consensus (半数以上的 server agents agree)&lt;/li&gt;
&lt;li&gt;client agents 在每个被 Consul 管理的节点上都要有一个，收集其所在节点上容器的信息，并把请求转发给 server agents &lt;ul&gt;
&lt;li&gt;收集的容器信息为容器上运行的服务信息，用于注册服务；以及容器运行状态信息，用于服务监控&lt;/li&gt;
&lt;li&gt;所转发给 server agents 的请求为 DNS 请求，也就是通过服务名字找到对应的容器 (可能跨宿主机，或者说跨节点)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在节点 c1 上启动一个 server agent (本例中，只启动一个 server agent，这样没有一致性的问题，只有可用性的问题了)&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;c1 $ IMG=dockerinpractice/consul-server &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c1 $ docker pull $IMG          # 在宿主机 c1 上 pull consul-server 的镜像，基于 alpine 的貌似&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c1 $ ip addr | grep &amp;apos;inet &amp;apos; | grep -v &amp;apos;lo$\|docker0$\|vbox.*$&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;inet 192.168.1.87/24 brd 192.168.1.255 scope global wlan0     # 查出 c1 对外部的 ip 为 192.168.1.87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c1 $ EXTIP1=192.168.1.87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c1 $ echo &amp;apos;&amp;#123;&amp;quot;ports&amp;quot;: &amp;#123;&amp;quot;dns&amp;quot;: 53&amp;#125;&amp;#125;&amp;apos; &amp;gt; dns.json         # 生成一个配置文件，记录 dns 的端口 53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c1 $ docker run -d --name consul --net host \         # 这个下面详细说明&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v $(pwd)/dns.json:/config/dns.json $IMG -bind $EXTIP1 -client $EXTIP1 \   # 配置文件 mount 到容器，并指明 IP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-recursor 8.8.8.8 -recursor 8.8.4.4 \       # 当 Consul server agent 无法发现服务时，转发到这两个默认 dns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-bootstrap-expect 1                         # 本 Consul server agents 集群启动所需最少 agent 数，这里只有一个&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个部分着重说一下 –net host 选项：server agent 容器并不暴露和使用 docker 虚拟局域网 ip，而是使用宿主机的 ip 和端口。这时通常的做法是把容器的端口映射到宿主机上，不过这样 server agent 就要暴露多达 8 个端口才行；一个 alternative 的做法是使用 –net host，这样容器和宿主机共享网络资源，不需要做映射就可以把容器当作宿主机一样用；当然，代价就是这个容器不会在 bridge 虚拟网络上(但是由于共享宿主网络，故此，它本身是 docker0)；前面说过 server agent 并不打算使用 bridge 网络，故此没有问题。另外，如果想在多节点上启动多 server agents 的话，让后续的节点同样运行的命令启动容器，命令中多加一个 -join ${c1_ip} 即可&lt;/p&gt;
&lt;p&gt;在节点 c2 上启动 client agent&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;c2 $ IMG=dockerinpractice/consul-agent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c2 $ docker pull $IMG       # 在宿主机 c2 上 pull consul-agent 镜像，基于 alpine 的貌似；注意和 c1 的镜像不同&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c2 $ EXTIP1=192.168.1.87    # EXTIP1 记录的是 c1 节点，也就是 server agent 的 IP；client agent 需要 join &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c2 $ ip addr | grep docker0 | grep inet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;inet 172.17.42.1/16 scope global docker0        # 获取 c2 节点内部 docker 虚拟局域网 bridge 的网关 IP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c2 $ BRIDGEIP=172.17.42.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c2 $ ip addr | grep &amp;apos;inet &amp;apos; | grep -v &amp;apos;lo$\|docker0$&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;inet 192.168.1.80/24 brd 192.168.1.255 scope global wlan0     # 获取 c2 节点的外部 IP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c2 $ EXTIP2=192.168.1.80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c2 $ echo &amp;apos;&amp;#123;&amp;quot;ports&amp;quot;: &amp;#123;&amp;quot;dns&amp;quot;: 53&amp;#125;&amp;#125;&amp;apos; &amp;gt; dns.json              # 同样指定 dns 端口 53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c2 $ docker run -d --name consul-client --net host \       # 同样使用 --net host 省去了大量端口映射&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v $(pwd)/dns.json:/config/dns.json \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$IMG -client $BRIDGEIP \       # 由于共享宿主网络，本选项把 http/dns 等服务都监听在宿主 docker bridge ip 地址&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-bind $EXTIP2 \                # 把本身的外部 ip 用于和 consul server agents 通讯&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-join $EXTIP1 -recursor 8.8.8.8 -recursor 8.8.4.4          # 加入 $EXTIP1 server agents 对应的 consul 集群&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本 consul 集群的 server agent 和 client agent 是各节点上的容器通过 –net host 的方式来配置和搭建的&lt;/li&gt;
&lt;li&gt;server agent 直接通过外部 ip 提供 dns 服务&lt;/li&gt;
&lt;li&gt;client agent 通过外部 ip 和 server agent 通讯，一方面上报节点健康状况、节点内容器状况，一方面转发 dns 请求&lt;/li&gt;
&lt;li&gt;client agent 通过 docker ip 为节点内其他容器提供 dns 服务，可以看到其运行的选项和 Resolvable 非常类似&lt;/li&gt;
&lt;li&gt;client agent 节点内部的容器向 bridge ip 请求 dns 信息，由于 bridge ip 是个节点内部 ip，故此涉及到跨节点的 dns 请求则需要直接发送到 server agent 处理 (发送给 client agent 再由 client agent 转发给 server agent 比较慢)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面来验证 c2 确实连接到 server agent 了&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;c2 $ curl -sSL $BRIDGEIP:8500/v1/agent/members | tr &amp;apos;,&amp;apos; &amp;apos;\n&amp;apos; | grep Name     # 看到这里直接向 bridge ip 发请求&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&amp;#123;&amp;quot;Name&amp;quot;:&amp;quot;mylaptop2&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;Name&amp;quot;:&amp;quot;mylaptop&amp;quot; ....&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在 client agent c2 上创建一个 http 服务并注册&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;c2 $ docker run -d --name files -p 8000:80 ubuntu:14.04.2 python3 -m http.server 80    # 映射 c2 的 8000 端口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c2 $ docker inspect -f &amp;apos;&amp;#123;&amp;#123;.NetworkSettings.IPAddress&amp;#125;&amp;#125;&amp;apos; files         # 看到容器内网 ip &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172.17.0.16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c2 $ /bin/echo -e &amp;apos;GET / HTTP/1.0\r\n\r\n&amp;apos; | nc -i1 172.17.0.16 80 | head -n 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HTTP/1.0 200 OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c2 $ curl -X PUT --data-binary &amp;apos;&amp;#123;&amp;quot;Name&amp;quot;: &amp;quot;files&amp;quot;, &amp;quot;Port&amp;quot;: 8000&amp;#125;&amp;apos; \    # 注册服务，名字 files 端口 8000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$BRIDGEIP:8500/v1/agent/service/register                     # 请求发送到 bridge ip，会转发给 server agent &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c2 $ docker logs consul-client | tail -n 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2015/08/15 03:44:30 [INFO] agent: Synced service &amp;apos;files&amp;apos;     # 看到同步了服务&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注册信息中 ID 默认和 Name 一样，这里服务名是 files；但是如果你有一个服务的多个实例，那么每个实例都要指定不同的 ID&lt;/p&gt;
&lt;p&gt;既然同步了，那么应该可以在 server dns 上查询这个服务了&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;c2 $ EXTIP1=192.168.1.87         # 在 c1 外部 IP 也就是 server dns 上找&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c2 $ dig @$EXTIP1 files.service.consul +short    # 通过 $&amp;#123;servicename&amp;#125;.service.consul 来查找服务&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192.168.1.80                     # 找到了，是节点 c2 (的 8000 端口)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c2 $ BRIDGEIP=172.17.42.1        # 在 c2 的 bridge ip 也就是 client dns 上找&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c2 $ dig @$BRIDGEIP files.service.consul +short&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192.168.1.80                     # 同样找到了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c2 $ dig @$BRIDGEIP files.service.consul srv +short    # 加入 srv 选项显示服务信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 1 8000 mylaptop2.node.dc1.consul.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c2 $ docker run -it --dns $BRIDGEIP ubuntu:14.04.2 bash      # c2 节点启动新的容器，同时指定 dns 为 client dns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@934e9c26bc7e:/# ping -c1 -q www.google.com              # ping 外网 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 packets transmitted, 1 received, 0% packet loss, time 0ms  # OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@934e9c26bc7e:/# ping -c1 -q files.service.consul        # ping files 服务&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 packets transmitted, 1 received, 0% packet loss, time 0ms  # OK&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;发现在 c2 节点内部，client agent 提供的 dns 服务和 Resolvable 非常之类似；而 Consul 还提供了跨节点的 dns 功能！之前 c2 节点上启动的 files http 服务，由于没有指定 dns，故此无法直接查询其他服务；而由于在 c2 节点上对其进行了注册，故此指定了 dns 的其他容器都可以查询到 files 服务；即使是 c2 节点内部的容器，查询到 files 服务的 ip 也是 c2 节点的外部 ip 192.168.1.80，而不是容器内网的 ip，这是因为在 Consul 上注册的是外部 ip，跨节点 dns 服务所要求的&lt;/p&gt;
&lt;p&gt;最后看一下 Consul 的 Service Monitering 功能。Consul 支持用户运行一个脚本，调用命令并通过命令的返回值来判断服务的健康状况，0 代表成功，1 代表 warning，其他值为 critical error。&lt;/p&gt;
&lt;p&gt;例如，c2容器上，实现一个脚本 check，以 http 服务的名字为参数，从 consul 中读取其端口，然后 wget http 服务&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;c2 $ cat &amp;gt;check &amp;lt;&amp;lt;EOF&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set -o errexit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set -o pipefail&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SVC_ID=&amp;quot;$1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SVC_PORT=&amp;quot;$(wget -qO - 172.17.42.1:8500/v1/agent/services | jq &amp;quot;.$SVC_ID.Port&amp;quot;)&amp;quot;    # 向 consul 发请求&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wget -qsO - &amp;quot;localhost:$SVC_PORT&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;EOF&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;把脚本 check 发送到 consul client agent 上，并给 /check 添加执行权限&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;c2 $ cat check | docker exec -i consul-client sh -c &amp;apos;cat &amp;gt; /check &amp;amp;&amp;amp; chmod +x /check&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在 c2 容器上再创建 health.json 文件，是 consul 用于服务监控的配置文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Name&amp;quot;: &amp;quot;filescheck&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;ServiceID&amp;quot;: &amp;quot;files&amp;quot;,        # 这里配置了服务名字 files&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Script&amp;quot;: &amp;quot;/check files&amp;quot;,    # 这里调用刚刚发送到 client agent 中的健康监控脚本，并把 files 作为参数传给脚本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Interval&amp;quot;: &amp;quot;10s&amp;quot;            # 每 10 秒查看一次健康状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;``` &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;把配置文件提交给 Consul&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;c2 $ docker exec consul-client sh -c ‘apk update &amp;amp;&amp;amp; apk add jq’      # 首先安装一下 jq，否则 check 会调用失败&lt;br&gt;c2 $ curl -X PUT –data-binary @health.json 172.17.42.1:8500/v1/agent/check/register&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;稍等一下，然后就可以进行监控的调用了&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;c2 $ curl -sSL 172.17.42.1:8500/v1/health/service/files | python -m json.tool | head -n 13    # 指定了 files&lt;br&gt;[&lt;br&gt;{&lt;br&gt;“Checks”: [&lt;br&gt;  {&lt;br&gt;    “CheckID”: “filescheck”,&lt;br&gt;    “Name”: “filescheck”,&lt;br&gt;    “Node”: “mylaptop2”,&lt;br&gt;    “Notes”: “”,&lt;br&gt;    “Output”: “Success!\n”,&lt;br&gt;    “ServiceID”: “files”,&lt;br&gt;    “ServiceName”: “files”,&lt;br&gt;    “Status”: “passing”&lt;br&gt;},&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;注意，agent client 中需要事先安装好 jq，才会调用成功；否则会返回 critical，而且 Consul 会把监控失败的服务移出 dns entry&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 使用 Registrator 自动服务注册&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Consul 一个明显的问题是在注册和删除服务的时候比较复杂，尤其是在有多个服务需要部署在不同位置的情况下。当不希望都采用手动方式来管理服务时，可以使用构建在 Consul 之上的 Registrator&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;首先采用上一节相同的方法创建 server agent 和 client agent，同时不要创建服务，我们在此基础上来进一步构建 Registrator。我们全部的工作都在 c2 节点，也就是 client agent 容器所在节点上&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;首先 startup Registrator&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;$ IMG=gliderlabs/registrator:v6&lt;br&gt;$ docker pull $IMG&lt;br&gt;$ EXTIP=192.168.1.80&lt;br&gt;$ BRIDGEIP=172.17.42.1&lt;br&gt;$ docker run -d –name registrator -h $(hostname)-reg \    # Registrator 容器的 hostname 为 $(hostname)-reg&lt;br&gt;-v /var/run/docker.sock:/tmp/docker.sock \                 # 可以访问 c2 的 docker 来获取容器启动和停止的信息&lt;br&gt;$IMG -ip $EXTIP -resync 60 \                  # 指定外部 ip ；配置所有容器每 60 秒刷新状态&lt;br&gt;consul://$BRIDGEIP:8500                       # 指定 Consul 接口；如果失败了，那么使用 $EXITIP 应该也可以&lt;/p&gt;
&lt;p&gt;$ docker logs registrator&lt;br&gt;2015/08/14 20:05:57 Forcing host IP to 192.168.1.80&lt;br&gt;2015/08/14 20:05:58 consul: current leader 192.168.1.87:8300     # 看到已经成功连到 Consul 集群&lt;br&gt;2015/08/14 20:05:58 Using consul adapter: consul://172.17.42.1:8500   # Consul 接口&lt;br&gt;2015/08/14 20:05:58 Listening for Docker events …                   # 已经在接收 Docker 容器的信息了&lt;br&gt;2015/08/14 20:05:58 Syncing services on 2 containers&lt;br&gt;……….&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;此时可以很方便的注册新服务了&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;$ curl -sSL 172.17.42.1:8500/v1/catalog/services | python -m json.tool&lt;br&gt;{ “consul”: [] }           # 开始只有 consul 服务&lt;/p&gt;
&lt;p&gt;$ docker run -d -e “SERVICE_NAME=files” -p 8000:80 ubuntu:14.04.2 \    # 通过环境变量来定义服务名，绑定 8000 端口&lt;br&gt;python3 -m http.server 80                                              # 创建 http 服务&lt;br&gt;3126a8668d7a058333d613f7995954f1919b314705589a9cd8b4e367d4092c9b&lt;br&gt;$ docker inspect 3126a8668d7a | grep ‘Name.*/‘&lt;br&gt;“Name”: “/evil_hopper”,              # files 服务的容器名字为 evil_hopper&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;查看服务&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;$ curl -sSL 172.17.42.1:8500/v1/catalog/services | python -m json.tool&lt;br&gt;{  “consul”: [], “files”: []  }      # 看到新注册的 files 服务了&lt;br&gt;$ curl -sSL 172.17.42.1:8500/v1/catalog/service/files | python -m json.tool&lt;br&gt;[&lt;br&gt;  {&lt;br&gt;    “Address”: “192.168.1.80”,          # 服务在 1.80 也就是 c2 节点上&lt;br&gt;    “Node”: “mylaptop2”,                # 节点名字&lt;br&gt;    “ServiceAddress”: “192.168.1.80”,   # 服务 ip&lt;br&gt;    “ServiceID”: “mylaptop2-reg:evil_hopper:80”,     # 服务 id，${Registrator hostname}:${服务容器名字}:${端口}&lt;br&gt;    “ServiceName”: “files”,             # 服务名字&lt;br&gt;    “ServicePort”: 8000,                # 服务端口&lt;br&gt;    “ServiceTags”: null&lt;br&gt;  }&lt;br&gt;]&lt;br&gt;```&lt;br&gt;看到，注册服务非常简单，只要在创建服务容器时指定环境变量即可。Registrator 通过 docker sock 获知容器信息，然后发现容器服务的 ip 和端口，并添加到 Consul 中，设置 service id。注意到 service id 使用了 Registrator 容器的 hostname&lt;/p&gt;
&lt;p&gt;Registrator 就简单介绍到这里，实际上它还可以从环境变量中得到其他信息，比如服务的 tag/name/port/health checks 等，详见 &lt;a href=&quot;http://gliderlabs.com/registrator/latest/user/backends/#consul&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;集群部署方案的小结&quot;&gt;&lt;a href=&quot;#集群部署方案的小结&quot; class=&quot;headerlink&quot; title=&quot;集群部署方案的小结&quot;&gt;&lt;/a&gt;集群部署方案的小结&lt;/h1&gt;&lt;p&gt;方案一：最普通的方法，自然就是在多个 Hosts 上直接部署集群，不使用 Docker 容器&lt;/p&gt;
&lt;p&gt;方案二：在单宿主机上，通过容器模拟 Hosts，通过 Docker 虚拟局域网模拟 Hosts 之间的网络连接。这里还有两个分支&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 –link 、docker-compose link 、docker network 或者 Resolvable 创建局域网中的 DNS，这样集群可以通过容器的 hostname 来搭建&lt;/li&gt;
&lt;li&gt;直接通过 ip 互联搭建集群，如上面 Helios 和 Mesos/Marathon 的例子&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个方案就是对方案一的直接模拟&lt;/p&gt;
&lt;p&gt;方案三：使用 WeaveNet 在多宿主机的容器之间创建虚拟局域网，这个相当于对方案二在多宿主机下的扩展，然后使用 ip 在多宿主机的容器间创建集群&lt;/p&gt;
&lt;p&gt;方案四：在多宿主机上通过容器部署集群，容器本身通过端口映射来 tunnel 到宿主机上，如上面 Swarm 的例子。和上面的方案比较来看&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;外部对集群的使用上，完全类似方案一，直接访问宿主机的端口，然后通过端口映射由容器提供服务&lt;/li&gt;
&lt;li&gt;集群内部的互访也是一样，比如 discovery service 之类的维护的都是宿主机的 ip 和端口，完全不使用容器的局域网 ip 和端口，这一点和方案二迥然不同。这一点，可以看 &lt;a href=&quot;https://github.com/ijustloveses/hexo_source/blob/master/Docker-in-Practice-Etcd.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Etcd&lt;/a&gt; 的例子&lt;/li&gt;
&lt;li&gt;其实就是说，通过端口映射，用宿主机给容器做了个壳，然后把容器直接当宿主机来使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;方案五：其实是对方案四的 Hack，不使用端口映射，而是使用 –net=host 选项来直接共享宿主机的网络，如 Consul &lt;/p&gt;
&lt;p&gt;另外补充一下， 如果集群中的容器本身还有启动其他容器的责任(比如容器编排集群的 Agent)，那么通常有两种做法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 -v 选项 mount 宿主机的 docker daemon socket，这样容器本身就可以主动启动新容器，所谓主动模式&lt;/li&gt;
&lt;li&gt;暴露宿主 docker daemon socket，这样外部就可以调用容器所在宿主的 docker daemon 了，所谓被动模式&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Some advanced topics on 《Manning Docker in Practice》&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://ijustloveses.github.io/categories/Docker/"/>
    
    
      <category term="笔记" scheme="http://ijustloveses.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Docker" scheme="http://ijustloveses.github.io/tags/Docker/"/>
    
      <category term="Network" scheme="http://ijustloveses.github.io/tags/Network/"/>
    
      <category term="Orchestration" scheme="http://ijustloveses.github.io/tags/Orchestration/"/>
    
      <category term="Deploy" scheme="http://ijustloveses.github.io/tags/Deploy/"/>
    
  </entry>
  
  <entry>
    <title>Docker in Practice - Misc</title>
    <link href="http://ijustloveses.github.io/2016/12/28/Docker-in-Practice-Misc/"/>
    <id>http://ijustloveses.github.io/2016/12/28/Docker-in-Practice-Misc/</id>
    <published>2016-12-28T03:05:16.000Z</published>
    <updated>2016-12-28T03:09:47.000Z</updated>
    
    <content type="html">&lt;p&gt;Some miscellenious topics on 《Manning Docker in Practice》&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Docker-Security&quot;&gt;&lt;a href=&quot;#Docker-Security&quot; class=&quot;headerlink&quot; title=&quot;Docker Security&quot;&gt;&lt;/a&gt;Docker Security&lt;/h1&gt;&lt;h3 id=&quot;限制-capabilities&quot;&gt;&lt;a href=&quot;#限制-capabilities&quot; class=&quot;headerlink&quot; title=&quot;限制 capabilities&quot;&gt;&lt;/a&gt;限制 capabilities&lt;/h3&gt;&lt;p&gt;即使你使用非 root 的用户来启动 Docker 容器，你在容器中仍然具有 root 权限。而 Docker 还可以 mount 宿主机的目录，这样就有漏洞了&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -v /sbin:/sbin busybox rm -rf /sbin    # 不要运行这个语句，你会删除 /sbin 目录下的文件，这很危险&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -v /etc/shadow:/etc/shadow busybox cat /etc/shadow    # 这个命令会展示用户密码文件内容&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;即使两个用户都是 root 用户，他们也会有不同的权限，Linux 通过 capabilities 提供 fine-grained 权限控制。&lt;/p&gt;
&lt;p&gt;当容器启动时，如果不加控制，有些 capabilities 是默认打开的，有些再是默认关闭的，比如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CHOWN 开启&lt;br&gt;DAC_OVERRIDE 开启&lt;br&gt;FOWNER 开启&lt;br&gt;SYS_CHROOT 开启&lt;br&gt;……..&lt;br&gt;IPC_LOCK 关闭&lt;br&gt;MAC_ADMIN 关闭&lt;br&gt;NET_ADMIN 关闭&lt;br&gt;……..&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一个极端的方案是，在容器启动时，通过 –cap-drop 选项关闭全部 capabilities，然后运行容器，如果不能正常运行，则开启导致错误的那些 capabilities，直到容器正常运行&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -ti --cap-drop=CHOWN --cap-drop=DAC_OVERRIDE \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--cap-drop=FSETID --cap-drop=FOWNER --cap-drop=KILL --cap-drop=MKNOD \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--cap-drop=NET_RAW --cap-drop=SETGID --cap-drop=SETUID \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--cap-drop=SETFCAP --cap-drop=SETPCAP --cap-drop=NET_BIND_SERVICE \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--cap-drop=SYS_CHROOT --cap-drop=AUDIT_WRITE debian /bin/bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后，还是要说明一下，capabilities 是控制 root 用户如何使用其他用户资源的权限，而 root 用户对其自身的资源仍有完全的控制权限&lt;/p&gt;
&lt;h3 id=&quot;通过-HTTP-auth-来访问-Docker-容器&quot;&gt;&lt;a href=&quot;#通过-HTTP-auth-来访问-Docker-容器&quot; class=&quot;headerlink&quot; title=&quot;通过 HTTP auth 来访问 Docker 容器&quot;&gt;&lt;/a&gt;通过 HTTP auth 来访问 Docker 容器&lt;/h3&gt;&lt;p&gt;我们通过 -H 命令，使用 http 方式来启动 docker，代理后台的 unix domain socket；然后加入 http authentication，只允许有权限的用户访问 http 接口。所对应的代码在&lt;a href=&quot;https://github.com/docker-in-practice/docker-authenticate&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;dockerinpractice/docker-authenticate 镜像的 Dockerfile 如下&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FROM debian&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN apt-get update &amp;amp;&amp;amp; apt-get install -y nginx apache2-utils&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN htpasswd -c /etc/nginx/.htpasswd username               # 创建用户 username 的密码文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN htpasswd -b /etc/nginx/.htpasswd username password      # 设置密码为 password&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN sed -i &amp;apos;s/user .*;/user root;/&amp;apos; /etc/nginx/nginx.conf   # nginx 文件中的 user 指定为 root，因为需要 root 权限来访问 docker unix socket&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ADD etc/nginx/sites-enabled/docker /etc/nginx/sites-enabled/docker     # 把 etc/nginx/sites-enabled/docker 加到 nginx site 中，后面介绍&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CMD service nginx start &amp;amp;&amp;amp; sleep infinity                   # 启动 nginx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;nginx 站点 etc/nginx/sites-enabled/docker 如下&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;upstream docker &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  server unix:/var/run/docker.sock;      # 定义 docker unix socket 为 upstream，名为 docker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  listen 2375 default_server;      # 监听 2357&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  location / &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    proxy_pass http://docker;      # 把请求转到上面定义的 docker socket&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    auth_basic_user_file /etc/nginx/.htpasswd;    # 请求的用户密码文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    auth_basic &amp;quot;Access restricted&amp;quot;;               # 严格执行密码访问&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;好了，现在可以启动容器了&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -d --name docker-authenticate -p 2375:2375 \     # 监听 2375 端口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v /var/run:/var/run dockerinpractice/docker-authenticate     # mount /var/run/docker.sock 所在的目录，以获取 docker daemon 和 socket 的访问权&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对宿主机 2375 端口的请求，通过端口映射发送给容器 2375 端口的 http 代理，进而转发给容器的 unix:/var/run/docker.sock，通过 mount，这个请求其实就是发送给宿主机的 docker unix socket；经过这一番曲折，实现了 http authentication&lt;/p&gt;
&lt;p&gt;现在尝试对这个 web service 访问&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl http://username:password@localhost:2375/info&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;Containers&amp;quot;:115,&amp;quot;Debug&amp;quot;:0,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;quot;DockerRootDir&amp;quot;:&amp;quot;/var/lib/docker&amp;quot;,&amp;quot;Driver&amp;quot;:&amp;quot;aufs&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;quot;DriverStatus&amp;quot;:[[&amp;quot;Root Dir&amp;quot;,&amp;quot;/var/lib/docker/aufs&amp;quot;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ..........&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们看到此时对 docker 的访问，需要使用 restful api 的方式；那么能直接使用 docker 命令么？比如下面这样？&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker -H tcp://username:password@localhost:2375 ps&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;目前 docker 命令本身还不支持 user/password authentication，原著笔者创建了一个镜像来解决这个问题&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -d --name docker-authenticate-client -p 127.0.0.1:12375:12375 \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dockerinpractice/docker-authenticate-client 192.168.1.74:2375 username:password&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker -H localhost:12375 ps    # 问题解决！&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;思考一下这个的实现方式：用户通过 -H 的方式访问 12375 端口，通过端口映射把请求传给容器的 12375 端口；我们知道，Docker 内部其实就是使用 restful api 来通讯的，那么容器 12375 端口的 web service 只需要把 docker 的 restful api 加上 username:password 再转发给前面实现的 http 认证的 web service 即可&lt;/p&gt;
&lt;h3 id=&quot;使用密钥确保-Docker-API-的安全&quot;&gt;&lt;a href=&quot;#使用密钥确保-Docker-API-的安全&quot; class=&quot;headerlink&quot; title=&quot;使用密钥确保 Docker API 的安全&quot;&gt;&lt;/a&gt;使用密钥确保 Docker API 的安全&lt;/h3&gt;&lt;p&gt;类似 ssh，Docker 也可以通过密钥来保证连接和 API 调用的安全&lt;/p&gt;
&lt;p&gt;具体的密钥生成命令就省略了，简单的说，服务器端生成以下密钥文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ca.key.pem / server-key.pem / ca.pem / server-cert.pem / cert.pem / key.pem&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后 docker daemon 的配置文件中加入如下选项，并重启&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;DOCKER_OPTS=&amp;quot;$DOCKER_OPTS --tlsverify&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DOCKER_OPTS=&amp;quot;$DOCKER_OPTS --tlscacert=/etc/docker/ca.pem&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DOCKER_OPTS=&amp;quot;$DOCKER_OPTS --tlscert=/etc/docker/server-cert.pem&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DOCKER_OPTS=&amp;quot;$DOCKER_OPTS --tlskey=/etc/docker/server-key.pem&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DOCKER_OPTS=&amp;quot;$DOCKER_OPTS -H tcp://0.0.0.0:2376&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DOCKER_OPTS=&amp;quot;$DOCKER_OPTS -H unix:///var/run/docker.sock&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;把其中的 ca.pem / cert.pem / key.pem 发布给客户端&lt;/p&gt;
&lt;p&gt;然后 Docker 的客户端就可以使用这些密钥安全调用 Docker Server 了&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker --tlsverify --tlscacert=/etc/docker/ca.pem \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--tlscert=/etc/docker/cert.pem --tlskey=/etc/docker/key.pem \     # 指定密钥文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-H myserver.localdomain:2376 info       # 通过 -H 选项调用 docker 命令&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用-MAC-tool-比如-Selinux&quot;&gt;&lt;a href=&quot;#使用-MAC-tool-比如-Selinux&quot; class=&quot;headerlink&quot; title=&quot;使用 MAC tool 比如 Selinux&quot;&gt;&lt;/a&gt;使用 MAC tool 比如 Selinux&lt;/h3&gt;&lt;p&gt;除了前面介绍的 capabilities 外，还可以用 MAC(mandatory access control) 工具如 Selinux 来做 fine-grained 访问限制&lt;/p&gt;
&lt;p&gt;Selinux 是 NSA 开发的工具用来保护其系统，使用于 Red Hat 相关的 linux 系统，而 Debian-based 系统对应工具为 AppArmor&lt;/p&gt;
&lt;p&gt;首先需要安装 Selinux，可以通过 sestatus 命令查看系统是否已经安装过 Selinux；然后要 yum 安装 selinuxpolicy-devel 包&lt;/p&gt;
&lt;p&gt;运行 sestatus 看看&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# sestatus&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SELinux status: enabled    # 已开启&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SELinuxfs mount: /sys/fs/selinux&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SELinux root directory: /etc/selinux&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Loaded policy name: targeted&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Current mode: permissive     # permissive 模式，指 selinux 会记录所有违规行为，但是不会约束它们；很适合测试环境&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Mode from config file: permissive      # 如果当前不是 permissive 模式，可以调用 setenforce Permissive 命令设置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Policy MLS status: enabled&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Policy deny_unknown status: allowed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Max kernel policy version: 28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;另外，还要确保 docker daemon 设置了 –selinux-enabled 选项，可以通过下面命令确认&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ps -fe|grep &amp;apos;docker -d.*--selinux-enabled&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;OK，准备工作完毕。以 root 身份创建一个策略文件目录，进入目录创建策略文件，名为 docker_apache.te，如下&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;policy_module(docker_apache,1.0)    # 策略名为 docker_apache，版本 1.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;virt_sandbox_domain_template(docker_apache)   # 此模版创建 docker_apache_t 类型，运行为 docker 容器，初始权限很少&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;allow docker_apache_t self: capability &amp;#123; chown dac_override kill setgid setuid net_bind_service sys_chroot sys_nice sys_tty_config &amp;#125; ;         # 这里添加新的 capability 权限&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;allow docker_apache_t self:tcp_socket create_stream_socket_perms;   # 以下添加 Apache 监听的相关网络权限&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;allow docker_apache_t self:udp_socket create_socket_perms;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;corenet_tcp_bind_all_nodes(docker_apache_t)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;corenet_tcp_bind_http_port(docker_apache_t)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;corenet_udp_bind_all_nodes(docker_apache_t)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;corenet_udp_bind_http_port(docker_apache_t)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sysnet_dns_name_resolve(docker_apache_t)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#permissive docker_apache_t    # 可选项，指定 permissive 模式。可在不改变主机模式的情况下，为策略重载主机模式&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;编译策略文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ make -f /usr/share/selinux/devel/Makefile docker_apache.te     # 这会得到一个 docker_apache.pp 二进制策略文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Compiling targeted docker_apache module&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.........&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Creating targeted docker_apache.pp policy package&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm tmp/docker_apache.mod tmp/docker_apache.mod.fc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ semodule -i docker_apache.pp      # 安装编译好的策略文件&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;试试看&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ setenforce Enforcing          # 设置为 enforcing，对违反策略的行为，不仅报错，而且会阻止其运行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -ti --name selinuxdock --security-opt \     # 指定了容器运行时应用 docker_apache_t 策略 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  label:type:docker_apache_t httpd                       # 容器的运行将会被阻止，因为违规&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.........&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Status: Downloaded newer image for httpd:latest&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;permission denied&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker rm -f selinuxdock      # 清理未正常启动的容器&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;研究为何出错&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ setenforce Permissive       # 设置会 permissive 模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -d --name selinuxdock --security-opt label:type:docker_apache_t httpd    # 再次运行，应该会记录错误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ grep -w denied /var/log/audit/audit.log         # 查看错误日志&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;..........&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面会报出很多错误的信息和描述。如果你并不熟悉 selinux，那么研究这些错误并针对性的更新原有策略是很复杂的事情，那么有一个工具帮助你根据错误日志来生成新的策略以修正这些错误，这个工具是 audit2allow&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir -p /root/selinux_policy_httpd_auto        # 创建新的策略目录，并进入目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd /root/selinux_policy_httpd_auto&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;audit2allow -a -w                               # 通过 -M 选项指明你给新策略所起的名字&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;audit2allow -a -M newmodname create policy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;semodule -i newmodname.pp                       # 生成新的策略文件，并安装之&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;日志-Logging-amp-Monitering&quot;&gt;&lt;a href=&quot;#日志-Logging-amp-Monitering&quot; class=&quot;headerlink&quot; title=&quot;日志 Logging &amp;amp; Monitering&quot;&gt;&lt;/a&gt;日志 Logging &amp;amp; Monitering&lt;/h1&gt;&lt;h3 id=&quot;把容器的日志记录在宿主机的-syslog-里&quot;&gt;&lt;a href=&quot;#把容器的日志记录在宿主机的-syslog-里&quot; class=&quot;headerlink&quot; title=&quot;把容器的日志记录在宿主机的 syslog 里&quot;&gt;&lt;/a&gt;把容器的日志记录在宿主机的 syslog 里&lt;/h3&gt;&lt;p&gt;Linux 系统通常都运行着 syslog daemon，应用程序把日志发送到 syslogd 的 touchpoint (/dev/log)，由 syslogd 来可靠的记录和保存日志 (/var/log/syslog)。Docker 容器默认并不安装 syslogd，这不妨碍我们在每个容器中安装和启动 syslogd，不过这样每个容器的日志都保存在各自的文件系统中，我们希望有一个集中的 central location 来保存所有的日志，便于收集和管理&lt;/p&gt;
&lt;p&gt;central syslog daemon 容器的 Dockerfile 如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FROM ubuntu:14.04&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN apt-get update &amp;amp;&amp;amp; apt-get install rsyslog    # syslogd 服务容器安装 rsyslog 软件包，r stands for reliable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;VOLUME /dev               # 创建 /dev volume，是 syslogd 的 touchpoint&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;VOLUME /var/log           # 创建 /var/log volume，mount 宿主机目录，用于集中保存 syslog 日志文件，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CMD rsyslogd -n           # 启动 syslod daemon&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;创建和启动容器&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker build -t syslogger .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker run --name syslogger -d -v /tmp/syslogdev:/dev syslogger     # touch point 映射到宿主 /tmp/syslogdev/log&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样，在宿主机上，可以看到 /tmp/syslogdev 目录已经 mount 好了&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ls -1 /tmp/syslogdev/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;full&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;..........&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;zero&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在可以启动应用容器来调用 syslog 记录日志了&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;for d in &amp;#123;1..100&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    docker run -d -v /tmp/syslogdev/log:/dev/log ubuntu logger hi_$d      # mount /tmp/syslogdev/log 到 /dev/log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;done&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意，ubuntu 的 logger 程序会把消息记录到 syslogd 的 touch point /dev/log 文件，进而通过 mount 记录到宿主的 /tmp/syslogdev/log，进而再通过 mount 记录到 central syslogd service 容器的 /dev/log，然后会被 rsyslog 记录到容器的 /var/log/syslog 中去，达成集中收集 syslog 日志的目标&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker exec -ti syslogger tail -f /var/log/syslog&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;May 25 11:55:15 f4fb5d829699 logger: hi_1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;May 25 11:55:15 f4fb5d829699 logger: hi_2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[...]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;May 25 11:57:39 f4fb5d829699 logger: hi_99     # 看到不同应用容器的系统日志都集中记录到 central syslog 服务容器&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;几点说明如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本节介绍了通过宿主机的同一个目录分别 mount 在 syslog 服务容器和所有应用容器，达到系统日志集中到一起的目标&lt;/li&gt;
&lt;li&gt;/var/log volumne 也可以 mount 到宿主机中去，这样应用容器的日志就可以在宿主机上去管理了&lt;/li&gt;
&lt;li&gt;使用本技巧的应用容器只能使用 logger 等记录 syslog 的程序，而不能用于集中管理普通的程序日志&lt;/li&gt;
&lt;li&gt;最后，本技巧仅限于集中管理单宿主机上的应用容器，无法应用于跨宿主机容器的情况&lt;/li&gt;
&lt;li&gt;这里我忽然有个想法，是不是通过宿主的同一个目录分别去 mount 各容器的 /var/log 目录会更简单，且不限于 syslog 呢？想象中，这个方法可能要解决不同容器中的同名文件的访问冲突问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;把-Docker-logs-日志记录由宿主的应用程序接管&quot;&gt;&lt;a href=&quot;#把-Docker-logs-日志记录由宿主的应用程序接管&quot; class=&quot;headerlink&quot; title=&quot;把 Docker logs 日志记录由宿主的应用程序接管&quot;&gt;&lt;/a&gt;把 Docker logs 日志记录由宿主的应用程序接管&lt;/h3&gt;&lt;p&gt;Docker 提供 docker logs 命令来捕获容器启动程序的日志，而且还提供 –log-driver 选项来指定宿主机的特定应用程序管理 docker logs 日志，包括 syslog / journald / json-file。syslog 在上一节中介绍过了，它使用 /dev/log 作为 touch point 来接收日志并输出到 /var/log/syslog；journald 是一个收集和管理结构化索引日志的系统服务，通过 journalctl 命令来查询日志&lt;/p&gt;
&lt;p&gt;把日志输出到 syslog&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run --log-driver=syslog ubuntu echo &amp;apos;outputting to syslog&amp;apos;    # 容器 start 程序为 echo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ grep &amp;apos;outputting to syslog&amp;apos; /var/log/syslog        # 查看&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;把日志输出到 journald&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run --log-driver=journald ubuntu echo &amp;apos;outputting to journald&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ journalctl | grep &amp;apos;outputting to journald&amp;apos;         # 查看&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以设置在 Docker 的默认配置 (/etc/default/docker or /etc/sysconfig/docker) 的 DOCKER_OPTS 中&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;DOCKER_OPTS=&amp;quot;--dns 8.8.8.8 --dns 8.8.4.4 --log-driver syslog&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样就不用每次使用 –log-driver 选项来启动容器了&lt;/p&gt;
&lt;p&gt;注意，这个方法只对容器启动时执行的 start 程序的日志有效，其他容器内应用的日志不会记录到 docker logs 中，自然无效&lt;/p&gt;
&lt;p&gt;另外，还可以使用容器实现一个 ELK logging 框架，好处是对跨宿主机的容器有效&lt;/p&gt;
&lt;h3 id=&quot;使用-cAdvisor-监控容器&quot;&gt;&lt;a href=&quot;#使用-cAdvisor-监控容器&quot; class=&quot;headerlink&quot; title=&quot;使用 cAdvisor 监控容器&quot;&gt;&lt;/a&gt;使用 cAdvisor 监控容器&lt;/h3&gt;&lt;p&gt;你想要监控大量容器的资源使用率、性能？Google 开源的 &lt;a href=&quot;https://github.com/google/cadvisor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cAdvisor&lt;/a&gt; 是个不错的选择&lt;/p&gt;
&lt;p&gt;启动 cAdvisor&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run --volume /:/rootfs:ro \       # 只读 mount 系统 root 目录，以收集文件系统信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--volume /var/run:/var/run:rw \            # 读写 mount /var/run 目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--volume /sys:/sys:ro \                    # 只读 mount 系统 sys 目录，以收集 kernel 和 devices 信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--volume /var/lib/docker/:/var/lib/docker:ro \    # 只读 mount docker 目录，收集 docker 信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-p 8080:8080 -d --name cadvisor \          # 8080 web interface&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--restart on-failure:10 google/cadvisor    # 失败自动重启，共计 10 次&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;登录 &lt;a href=&quot;http://localhost:8080&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:8080&lt;/a&gt; 可以查看宿主、容器的 cpu、内存等信息；数据保存在系统中，也可以配置保存在 InfluxDB&lt;/p&gt;
&lt;h1 id=&quot;Resource-Control&quot;&gt;&lt;a href=&quot;#Resource-Control&quot; class=&quot;headerlink&quot; title=&quot;Resource Control&quot;&gt;&lt;/a&gt;Resource Control&lt;/h1&gt;&lt;p&gt;Docker 使用 cgroups 来管理容器资源使用，默认的策略是简单的平均分配算法，然而有时这样是不够的&lt;/p&gt;
&lt;h3 id=&quot;限制容器运行在特定的-cpu-cores-上&quot;&gt;&lt;a href=&quot;#限制容器运行在特定的-cpu-cores-上&quot; class=&quot;headerlink&quot; title=&quot;限制容器运行在特定的 cpu cores 上&quot;&gt;&lt;/a&gt;限制容器运行在特定的 cpu cores 上&lt;/h3&gt;&lt;p&gt;默认的，Docker 可以执行在宿主的任何 cpu cores 上，容器如果是单进程的，那么只会占用一个 core，而如果是多线程的，那么可以使用所有的 cores；而 Docker 还可以通过 –cpuset-cpus 硬性指定容器运行在哪个 cores 上&lt;/p&gt;
&lt;p&gt;运行两个容器&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run ubuntu:14.04 sh -c &amp;apos;cat /dev/zero &amp;gt;/dev/null&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你会发现两个 cpu cores 占用率 100%&lt;/p&gt;
&lt;p&gt;如果这样运行两个容器&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run --cpuset-cpus=0 ubuntu:14.04 sh -c &amp;apos;cat /dev/zero &amp;gt;/dev/null&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你会发现第一个 core 占用率 100%，因为两个容器全部运行在第一个 core 上&lt;/p&gt;
&lt;p&gt;–cpuset-cpus 选项允许指定多个 cores，格式如 (0,1,2)，或者 (0-2)，或者 (0-1,3)&lt;/p&gt;
&lt;h3 id=&quot;给重要的容器更多的-cpu-资源&quot;&gt;&lt;a href=&quot;#给重要的容器更多的-cpu-资源&quot; class=&quot;headerlink&quot; title=&quot;给重要的容器更多的 cpu 资源&quot;&gt;&lt;/a&gt;给重要的容器更多的 cpu 资源&lt;/h3&gt;&lt;p&gt;在 docker run 启动容器时，可以使用 -c/–cpu-shares 选项来分配容器对 cpu 资源的优先级；如果不指定，那么默认为 1024。要注意，当只有一个容器时，那么它一定 100% 占有 cpu 资源，不管 -c/–cpu-shares 选项的值是多少。-c/–cpu-shares 选项只有当多个容器竞争 cpu 资源时，才发生作用。特别的，假如两个容器都是单线程应用，运行在 2-cores 宿主上，那么无论它俩的 -c/–cpu-shares 值是多少，都只会各占 1 个 core&lt;/p&gt;
&lt;p&gt;假如现在有 A,B,C 3 个容器，那么&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;都不设置 -c/–cpu-shares，那么每个容器 1/3 &lt;/li&gt;
&lt;li&gt;A &amp;amp; B 512, C 1024，那么 A &amp;amp; B 各占 1/4，C 占 1/2&lt;/li&gt;
&lt;li&gt;A 10, B 100, C 1000，那么 A 占不到 1%，B 占不到 10%，C 占不到 90%&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;限制容器内存的使用&quot;&gt;&lt;a href=&quot;#限制容器内存的使用&quot; class=&quot;headerlink&quot; title=&quot;限制容器内存的使用&quot;&gt;&lt;/a&gt;限制容器内存的使用&lt;/h3&gt;&lt;p&gt;当容器运行时，可以分配宿主机上全部的内存；同时，我们还可以通过 -m/–memory 选项限制容器能分配的内存&lt;/p&gt;
&lt;p&gt;注意，对于 Ubuntu 系统，这个 capability 并不是默认 enable 的，可以调用 docker info 查看是否有 “No swap limit support” 警告，如果有那么就需要做一些设置，让 kernel 知道在系统启动时 enable memory-limiting capability。具体如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 修改 /etc/default/grub 文件，加入&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GRUB_CMDLINE_LINUX=&amp;quot;cgroup_enable=memory swapaccount=1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo update-grub&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后重启系统即可&lt;/p&gt;
&lt;p&gt;接下来可以做一些测试了&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -it -m 4m ubuntu:14.04 bash        # 限制内存分配最大 4m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@cffc126297e2:/# python3 -c &amp;apos;open(&amp;quot;/dev/zero&amp;quot;).read(10*1024*1024)&amp;apos;    # 尝试通过 python 分配 10m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Killed                                          # 脚本运行失败&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@e9f13cacd42f:/# A=$(dd if=/dev/zero bs=1M count=10 | base64)         # 尝试通过命令行分配 10m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$                                               # Bash 被 killed，容器退出，回到宿主机的 Bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ echo $?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137                                             # 返回错误码 137&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接下来的测试使用 jess/stress 镜像中的 stress 工具，来测试系统的极限&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -m 100m jess/stress --vm 1 --vm-bytes 150M --vm-hang 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的命令指定容器内存分配 limit 为 100m，容器启动时会使用 stress 分配 150m，会失败么？答案是不会&lt;/p&gt;
&lt;p&gt;可以使用下面的命令来验证 stress 确实分配了 150m 内存&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker top &amp;lt;container_id&amp;gt; -eo pid,size,args&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;那么，为什么没有失败呢？原来 Docker 会 double-reserve 内存，其中一半为实际物理内存，一半为 swap；故此，-m 100m 选项其实指定的 limit 为 200m 内存，故此没有失败。那么如果让 stress 分配 250m 肯定会失败吧&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run -m 100m jess/stress --vm 1 --vm-bytes 250M --vm-hang 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面这条命令确实立刻就 terminate 了&lt;/p&gt;
&lt;p&gt;double-reservation 策略是默认的设置，不过我们可以通过 –memory 和 –memory-swap 的配合设置来调整。比如两个选项设置为相同的值，你就完全禁掉了 swap 内存，或者说 swap 内存 limit 为 0&lt;/p&gt;
&lt;h3 id=&quot;访问宿主机的资源&quot;&gt;&lt;a href=&quot;#访问宿主机的资源&quot; class=&quot;headerlink&quot; title=&quot;访问宿主机的资源&quot;&gt;&lt;/a&gt;访问宿主机的资源&lt;/h3&gt;&lt;p&gt;容器使用 kernel 的 namespace 来做到资源的隔离，然而我们还是有很多方式来 bypass namespace，直接访问宿主机的资源&lt;/p&gt;
&lt;h5 id=&quot;v-volumn-mounting&quot;&gt;&lt;a href=&quot;#v-volumn-mounting&quot; class=&quot;headerlink&quot; title=&quot;-v volumn mounting&quot;&gt;&lt;/a&gt;-v volumn mounting&lt;/h5&gt;&lt;p&gt;volumes 是最常见的访问宿主机资源的方式，主要的好处有两点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方便的共享宿主机的文件，而不需要把文件加到镜像的 layers 中，减少镜像的体积&lt;/li&gt;
&lt;li&gt;访问宿主机的文件系统，比访问容器内部的文件系统要快，性能更好&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;–net-host-直接共享宿主机网络&quot;&gt;&lt;a href=&quot;#–net-host-直接共享宿主机网络&quot; class=&quot;headerlink&quot; title=&quot;–net=host 直接共享宿主机网络&quot;&gt;&lt;/a&gt;–net=host 直接共享宿主机网络&lt;/h5&gt;&lt;p&gt;是完全的使用宿主机的网络，比如通过 netstat 命令可以看到宿主机上的网络应用和端口信息，而不会生成 veth 接口和 bridge 虚拟局域网 ip。主要的好处如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更容易的 connect 容器，直接当做宿主机来访问就行，代价是失去了端口映射功能 (比如两个容器都想监听 80 端口，就不能都使用 –net=host 了，否则就要端口冲突了)&lt;/li&gt;
&lt;li&gt;网络连接的速度和性能更好&lt;ul&gt;
&lt;li&gt;–net=host 方式，直接使用宿主机网络，那么网络数据包就直接走 TCP/IP 到达 NIC (network interface card)&lt;/li&gt;
&lt;li&gt;容器常规方式下，数据包则要经过 TCP/IP -&amp;gt; Veth pair -&amp;gt; Bridge -&amp;gt; NAT 最终到达 NIC&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;其他方式&quot;&gt;&lt;a href=&quot;#其他方式&quot; class=&quot;headerlink&quot; title=&quot;其他方式&quot;&gt;&lt;/a&gt;其他方式&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;–pid=host 用于共享宿主机的 pid 信息&lt;/li&gt;
&lt;li&gt;–ipc=host 用于共享宿主机的共享内存、ipc 等资源&lt;/li&gt;
&lt;li&gt;–uts=host 用于共享宿主机的 hostname, NIS domain 等资源&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Device-Mapper-storage-driver-和默认容器磁盘空间&quot;&gt;&lt;a href=&quot;#Device-Mapper-storage-driver-和默认容器磁盘空间&quot; class=&quot;headerlink&quot; title=&quot;Device Mapper storage driver 和默认容器磁盘空间&quot;&gt;&lt;/a&gt;Device Mapper storage driver 和默认容器磁盘空间&lt;/h3&gt;&lt;p&gt;Docker 自带一些 storage drivers 的支持，比如 Centos &amp;amp; Red Hat 默认的 devicemapper，Ubuntu 默认的 AUFS 等；相比起来，devicemapper bug 少一些，而且在一些方面上更加灵活&lt;/p&gt;
&lt;p&gt;Devicemapper 默认的行为是分配一个文件，把它视为 “device” 来读写，比如我们上面提到过的 syslog 使用 /dev/log 文件来写入。这个设备文件是有 capability limit 的，不能自动增加文件尺寸&lt;/p&gt;
&lt;p&gt;比如下面的 Dockerfile&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FROM ubuntu:14.04&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN truncate --size 11G /root/file&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在 build 镜像时会出错，11G 太大了，无论你的宿主机有多大的磁盘空间也都会失败，因为 devicemapper 对容器的限制是 10G&lt;/p&gt;
&lt;p&gt;通过 –storage-opt dm.basesize=xxx 来修改，我们还可以把它放到 DOCKER_OPTIONS 中，避免每次都带上这个选项&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;DOCKER_OPTIONS=&amp;quot;-s devicemapper --storage-opt dm.basesize=20G&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;调试容器&quot;&gt;&lt;a href=&quot;#调试容器&quot; class=&quot;headerlink&quot; title=&quot;调试容器&quot;&gt;&lt;/a&gt;调试容器&lt;/h1&gt;&lt;h3 id=&quot;使用-nsenter-调试容器网络&quot;&gt;&lt;a href=&quot;#使用-nsenter-调试容器网络&quot; class=&quot;headerlink&quot; title=&quot;使用 nsenter 调试容器网络&quot;&gt;&lt;/a&gt;使用 nsenter 调试容器网络&lt;/h3&gt;&lt;p&gt;之前介绍过使用 socat 作为 proxy，代理对其他容器服务的请求，此时可以通过 socat 来调试和诊断对容器的网络连接；然而如果仅为了调试来 setup socat proxy 还是稍嫌复杂了，使用 nsenter 可以更加便捷的完成调试任务。&lt;/p&gt;
&lt;h5 id=&quot;容器化安装&quot;&gt;&lt;a href=&quot;#容器化安装&quot; class=&quot;headerlink&quot; title=&quot;容器化安装&quot;&gt;&lt;/a&gt;容器化安装&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -v /usr/local/bin:/target jpetazzo/nsenter&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此时，nsenter 会被安装在宿主的 /usr/local/bin 目录，可以在宿主机上直接被调用，就像直接安装在宿主机上一样&lt;/p&gt;
&lt;h5 id=&quot;通过宿主机的-bash-访问容器&quot;&gt;&lt;a href=&quot;#通过宿主机的-bash-访问容器&quot; class=&quot;headerlink&quot; title=&quot;通过宿主机的 bash 访问容器&quot;&gt;&lt;/a&gt;通过宿主机的 bash 访问容器&lt;/h5&gt;&lt;p&gt;我们知道 BusyBox 镜像是不带 bash 的，下面通过 nsenter 来达成使用宿主机 bash 进入容器的目标&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -ti busybox /bin/bash     # 这个会失败， busybox 不带 /bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FATA[0000] Error response from daemon: Cannot start container&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ CID=$(docker run -d busybox sleep 9999)    # 启动 busybox 并进入 sleep，把容器 id 保存到 CID 中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ PID=$(docker inspect --format &amp;#123;&amp;#123;.State.Pid&amp;#125;&amp;#125; $CID)    # 获取 busybox 容器的 PID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo nsenter --target $PID \       # 在宿主机运行 nsenter，通过 --target 指定欲进入的容器 PID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--uts --ipc --net /bin/bash          # 其他选项指定 capability 以及进入容器后要启动的程序，也即宿主机的 /bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@781c1fed2b18:~#                 # 看到进入容器了，而且启动了 /bin/bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;使用宿主的-tcpdump-来调试网络应用&quot;&gt;&lt;a href=&quot;#使用宿主的-tcpdump-来调试网络应用&quot; class=&quot;headerlink&quot; title=&quot;使用宿主的 tcpdump 来调试网络应用&quot;&gt;&lt;/a&gt;使用宿主的 tcpdump 来调试网络应用&lt;/h5&gt;&lt;p&gt;要使用 tcpdump，在启动 nsenter 的时候需要指定 –net 选项，以允许在宿主机上看到容器的网络，进而才能通过 tcpdump 调试&lt;/p&gt;
&lt;p&gt;这里假定我们还在上一节启动的 busybox 容器中&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@781c1fed2b18:/# tcpdump -XXs 0 -w /tmp/google.tcpdump &amp;amp;      # 容器中使用宿主的 bash，后台启动宿主的 tcpdump&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@781c1fed2b18:/# wget google.com      # 然后调用一个 wget 命令，让 tcpdump 来 dump 网络连接信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Resolving google.com (google.com)... 216.58.208.46, 2a00:1450:4009:80d::200e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;............&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http://www.google.co.uk/?gfe_rd=cr&amp;amp;ei=tLzEVcCXN7Lj8wepgarQAQ&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Resolving www.google.co.uk (www.google.co.uk)... 216.58.208.67, 2a00:1450:4009:80a::2003&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;............&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Saving to: ‘index.html’&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2015-08-07 15:12:05 (2.18 MB/s) - ‘index.html’ saved [18720]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;............&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;找出宿主机中目标容器所对应的-veth-interface-设备&quot;&gt;&lt;a href=&quot;#找出宿主机中目标容器所对应的-veth-interface-设备&quot; class=&quot;headerlink&quot; title=&quot;找出宿主机中目标容器所对应的 veth interface 设备&quot;&gt;&lt;/a&gt;找出宿主机中目标容器所对应的 veth interface 设备&lt;/h5&gt;&lt;p&gt;有时我们需要很快的 down 掉目标容器的网络，一般的做法是使用一些网络工具来模拟网络 breakage，非常麻烦。我们看看用 nsenter 怎么完成这个任务&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -d --name offlinetest ubuntu:14.04.2 sleep infinity        # 重新启动一个目标容器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fad037a77a2fc337b7b12bc484babb2145774fde7718d1b5b53fb7e9dc0ad7b3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker exec offlinetest ping -q -c1 8.8.8.8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 packets transmitted, 1 received, 0% packet loss, time 0ms     # 验证容器内部 ping 是 ok 的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker exec offlinetest ifconfig eth0 down      # 验证我们不能直接在宿主机上 down 掉容器的网络&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SIOCSIFFLAGS: Operation not permitted&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ PID=$(docker inspect --format &amp;#123;&amp;#123;.State.Pid&amp;#125;&amp;#125; offlinetest)     # 找到容器 PID 准备 nsenter 进入容器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ nsenter --target $PID --net ethtool -S eth0      # 进入容器，且指定 --net 选项，并启动宿主的 ethtool 工具&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NIC statistics:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;peer_ifindex: 53         # 容器的 eth0 是 veth pair 的一端，另一端在宿主机上&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ip addr | grep &amp;apos;^53&amp;apos;   # 宿主机上查找 53 interface&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53: veth2e7d114: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue master docker0 state UP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo ifconfig veth2e7d114 down      # 上面看到 53 接口对应的 veth pair 就是 veth2e7d114 ，down 掉它！&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker exec offlinetest ping -q -c1 8.8.8.8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 packets transmitted, 0 received, 100% packet loss, time 0ms      # 看到容器断网了！&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;综上 3 个例子，nsenter 的作用集中体现在可以进入容器内，同时使用或者说保留宿主机的诊断工具，非常方便，因为容器不需要做任何设置和修改&lt;/p&gt;
&lt;h3 id=&quot;使用-tcpflow-调试容器网络&quot;&gt;&lt;a href=&quot;#使用-tcpflow-调试容器网络&quot; class=&quot;headerlink&quot; title=&quot;使用 tcpflow 调试容器网络&quot;&gt;&lt;/a&gt;使用 tcpflow 调试容器网络&lt;/h3&gt;&lt;p&gt;前面的技巧中，我们可以通过 nsenter 使用宿主机的 tcpdump 来研究容器的网络包信息，然而 tcpdump 属于比较底层的调试工具，上手难度高，而且如果要调试更上层的应用程序，会比较复杂和麻烦；可以考虑使用 tcpflow&lt;/p&gt;
&lt;p&gt;容器安装和启动&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ IMG=dockerinpractice/tcpflow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker pull $IMG&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ alias tcpflow=&amp;quot;docker run --rm --net host $IMG&amp;quot;        # 注意到 --net=host 选项，共享宿主机的网络&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;有两种方法来调试容器的网络包&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;监控 docker0 interface，此时宿主机和容器全部网络包都会被监控，需要使用 packet-filtering expression 来过滤&lt;/li&gt;
&lt;li&gt;类似上一节的方法，找到并监控对应容器的 veth pair interface，这样监控到的都是容器的网络包&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一种就很好用，看下例&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -d --name tcpflowtest alpine:3.2 sleep 30d               # 启动一个 alpine 容器做测试&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker inspect -f &amp;apos;&amp;#123;&amp;#123; .NetworkSettings.IPAddress &amp;#125;&amp;#125;&amp;apos; tcpflowtest    # 容器的内部局域网 ip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172.17.0.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ tcpflow -c -J -i docker0 &amp;apos;host 172.17.0.1 and port 80&amp;apos;              # 监控 docker0 接口，并过滤内网 ip 和端口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcpflow: listening on docker0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;看到，使用起来非常方便，而且同样不需要修改和配置目标容器&lt;/p&gt;
&lt;h3 id=&quot;容器应用失败的调试&quot;&gt;&lt;a href=&quot;#容器应用失败的调试&quot; class=&quot;headerlink&quot; title=&quot;容器应用失败的调试&quot;&gt;&lt;/a&gt;容器应用失败的调试&lt;/h3&gt;&lt;p&gt;当容器中有应用程序运行失败，又找不出原因时，可以考虑使用 strace 工具来跟踪系统调用，然后和正常运行的应用程序做比较，可能会帮助找到问题所在&lt;/p&gt;
&lt;p&gt;比如在 ubuntu:12.04 的容器中，常常会遇到下面的错误，而 ubuntu:14.04 就没问题&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@centos vagrant]# docker run -ti ubuntu:12.04&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@afade8b94d32:/# useradd -m -d /home/dockerinpractice dockerinpractice       # useradd 会失败&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@afade8b94d32:/# echo $?               # 返回非 0 值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用 strace 工具来追踪&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# strace -f \          # -f 选项跟踪进程以及进程的派生进程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;useradd -m -d /home/dockerinpractice dockerinpractice     # 后面跟着需要跟踪的进程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;execve(&amp;quot;/usr/sbin/useradd&amp;quot;, [&amp;quot;useradd&amp;quot;, &amp;quot;-m&amp;quot;, &amp;quot;-d&amp;quot;, ... &amp;quot;dockerinpractice&amp;quot;], ... = 0       # 以下是输出，execve 表示执行参数中的命令，最后的 0 表示这条命令的返回值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[...]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;open(&amp;quot;/proc/self/task/39/attr/current&amp;quot;, O_RDONLY) = 9      # 到这个命令时，打开文件，返回的 9 是文件的 handle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;read(9, &amp;quot;system_u:system_r:svirt_lxc_net_&amp;quot;...,4095) = 46   # 读 handle 9 对应的文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;close(9) = 0                                               # 关闭文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[...]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;open(&amp;quot;/etc/selinux/config&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)    # 运行到这里出错了，未找到文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;open(&amp;quot;/etc/selinux/targeted/contexts/files/ file_contexts.subs_dist&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;open(&amp;quot;/etc/selinux/targeted/contexts/files/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;file_contexts.subs&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;open(&amp;quot;/etc/selinux/targeted/contexts/files/ file_contexts&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[...]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;exit_group(12)         # 这个就是整个应用最终的返回值 12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;那么我们找到了问题，是因为应用要访问 selinux 的文件，然而并没有这个文件&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Some miscellenious topics on 《Manning Docker in Practice》&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://ijustloveses.github.io/categories/Docker/"/>
    
    
      <category term="笔记" scheme="http://ijustloveses.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Docker" scheme="http://ijustloveses.github.io/tags/Docker/"/>
    
      <category term="Network" scheme="http://ijustloveses.github.io/tags/Network/"/>
    
      <category term="安全" scheme="http://ijustloveses.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="监控" scheme="http://ijustloveses.github.io/tags/%E7%9B%91%E6%8E%A7/"/>
    
      <category term="DevOps" scheme="http://ijustloveses.github.io/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>Docker in Practice - Etcd</title>
    <link href="http://ijustloveses.github.io/2016/11/30/Docker-in-Practice-Etcd/"/>
    <id>http://ijustloveses.github.io/2016/11/30/Docker-in-Practice-Etcd/</id>
    <published>2016-11-30T10:14:30.000Z</published>
    <updated>2016-11-30T10:17:40.000Z</updated>
    
    <content type="html">&lt;p&gt;Some notes about Docker and Etcd on 《Manning Docker in Practice》&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Part-I-Etcd-with-Docker&quot;&gt;&lt;a href=&quot;#Part-I-Etcd-with-Docker&quot; class=&quot;headerlink&quot; title=&quot;Part I. Etcd with Docker&quot;&gt;&lt;/a&gt;Part I. Etcd with Docker&lt;/h1&gt;&lt;p&gt;Etcd 是一个分布式的 key-value 存储工具，通常用于存储配置信息等轻量级 (小于 512 K) 的数据，类似 ZK 和 Consul.&lt;/p&gt;
&lt;h3 id=&quot;Etcd-Cluster-and-Etcd-proxy-setup&quot;&gt;&lt;a href=&quot;#Etcd-Cluster-and-Etcd-proxy-setup&quot; class=&quot;headerlink&quot; title=&quot;Etcd Cluster and Etcd proxy setup&quot;&gt;&lt;/a&gt;Etcd Cluster and Etcd proxy setup&lt;/h3&gt;&lt;p&gt;首先需要获取宿主机对外的真实 ip，以供访问 Etcd 集群的应用访问；外部应用甚至可能不在宿主机上，故此需要使用外部 ip&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ip addr | grep &amp;apos;inet &amp;apos; | grep -v &amp;apos;lo$\|docker0$&amp;apos;         &amp;lt;-- 过滤掉 lo 和 docker 网络，得到真实 ip 10.194.12.221&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;inet 10.194.12.221/20 brd 10.194.15.255 scope global eth0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后启动 Etcd 集群容器&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ IMG=quay.io/coreos/etcd:v2.0.10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker pull $IMG&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ HTTPIP=http://10.194.12.221         &amp;lt;-- 外网 ip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ CLUSTER=&amp;quot;etcd0=$HTTPIP:2380,etcd1=$HTTPIP:2480,etcd2=$HTTPIP:2580&amp;quot;   &amp;lt;-- 使用外网 ip 定义集群；由于容器在同一个 host 上，故此分配了不同的 port 以避免冲突&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ARGS=         &amp;lt;-- ARGS 不是 docker run 参数，而是 etcd 容器 entrypoint 的参数，故此可以使用宿主真实 ip，是配置 Etcd 集群所用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ARGS=&amp;quot;$ARGS -listen-client-urls http://0.0.0.0:2379&amp;quot;    &amp;lt;-- 用于监听和处理 client 的请求&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ARGS=&amp;quot;$ARGS -listen-peer-urls http://0.0.0.0:2380&amp;quot;      &amp;lt;-- 用于和集群内的其他节点相互访问，和集群定义部分一致&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ARGS=&amp;quot;$ARGS -initial-cluster-state new&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ARGS=&amp;quot;$ARGS -initial-cluster $CLUSTER&amp;quot;     &amp;lt;-- Arguments 中指定了集群定义，而定义里使用了外网 ip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -d -p 2379:2379 -p 2380:2380 --name etcd0 $IMG \      &amp;lt;-- 启动第一个节点 etcd0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ARGS -name etcd0 -advertise-client-urls $HTTPIP:2379 \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-initial-advertise-peer-urls $HTTPIP:2380&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -d -p 2479:2379 -p 2480:2380 --name etcd1 $IMG \      &amp;lt;-- etcd1，容器内部仍然使用 2379 2380 端口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ARGS -name etcd1 -advertise-client-urls $HTTPIP:2479 \            &amp;lt;-- 然而要映射到宿主的 2479 和 2480 端口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-initial-advertise-peer-urls $HTTPIP:2480                          &amp;lt;-- 参数中还有宿主的外部 ip 和映射的端口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -d -p 2579:2379 -p 2580:2380 --name etcd2 $IMG \      &amp;lt;-- 同 etcd2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ARGS -name etcd2 -advertise-client-urls $HTTPIP:2579 \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-initial-advertise-peer-urls $HTTPIP:2580&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;看到，3个 Etcd 节点容器内部使用的都是标准的 2379 2380 端口，而在宿主机上映射到不同的外部端口，这些外部的端口才是使用 Etcd 集群的应用所看到和访问的地址，是 Etcd 集群的配置&lt;/p&gt;
&lt;p&gt;docker run 启动 Etcd 节点容器本身不需要读取这些参数，故此也不会去识别宿主机的外部 ip&lt;/p&gt;
&lt;h3 id=&quot;宿主中进行测试&quot;&gt;&lt;a href=&quot;#宿主中进行测试&quot; class=&quot;headerlink&quot; title=&quot;宿主中进行测试&quot;&gt;&lt;/a&gt;宿主中进行测试&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl -L $HTTPIP:2579/version&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;etcd 2.0.10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# put something &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ curl -L $HTTPIP:2579/v2/keys/mykey -XPUT -d value=&amp;quot;test key&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;action&amp;quot;:&amp;quot;set&amp;quot;,&amp;quot;node&amp;quot;: &amp;#123;&amp;quot;key&amp;quot;:&amp;quot;/mykey&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;test key&amp;quot;, &amp;quot;modifiedIndex&amp;quot;:7,&amp;quot;createdIndex&amp;quot;:7&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 等待集群同步完成&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sleep 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 杀掉 etcd2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker kill etcd2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 访问 etcd2 会失败&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ curl -L $HTTPIP:2579/v2/keys/mykey&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;curl: (7) couldn&amp;apos;t connect to host&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 但是刚刚 put 进去的数据应该还在集群中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ curl -L $HTTPIP:2379/v2/keys/mykey&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;action&amp;quot;:&amp;quot;get&amp;quot;,&amp;quot;node&amp;quot;: &amp;#123;&amp;quot;key&amp;quot;:&amp;quot;/mykey&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;test key&amp;quot;, &amp;quot;modifiedIndex&amp;quot;:7,&amp;quot;createdIndex&amp;quot;:7&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;重启 etcd2，数据还会同步回来的，略&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker start etcd2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;安装-Etcd-proxy&quot;&gt;&lt;a href=&quot;#安装-Etcd-proxy&quot; class=&quot;headerlink&quot; title=&quot;安装 Etcd proxy&quot;&gt;&lt;/a&gt;安装 Etcd proxy&lt;/h3&gt;&lt;p&gt;前面看到了要 put 数据等操作，需要知道 etcd 集群的内部服务器 ip 和端口，这很不好；安装 Etcd proxy 来解决&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -d -p 8080:8080 --restart always --name etcd-proxy $IMG \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-proxy on -listen-client-urls http://0.0.0.0:8080 -initial-cluster $CLUSTER      &amp;lt;-- 读取 Etcd 集群配置，然后在 8080 上开代理&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;由于在启动时传入了 Etcd 集群配置，故此原则上不需要在宿主机上，其他机器只要能够访问宿主机，都可以创建 Etcd Proxy&lt;/p&gt;
&lt;p&gt;当然，本例中是在宿主机上启动的 Proxy，这样对宿主机 $HTTPIP:8080 访问就可以了。也就是说，下面的测试也可以不在宿主机上进行，只要能连接 HTTPIP 即可：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl -L $HTTPIP:8080/v2/keys/mykey2 -XPUT -d value=&amp;quot;t&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;action&amp;quot;:&amp;quot;set&amp;quot;,&amp;quot;node&amp;quot;: &amp;#123;&amp;quot;key&amp;quot;:&amp;quot;/mykey2&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;t&amp;quot;, &amp;quot;modifiedIndex&amp;quot;:12,&amp;quot;createdIndex&amp;quot;:12&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# etcd1 &amp;amp; etcd2 都删掉&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker kill etcd1 etcd2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 依旧可读，因为 etcd0 还在&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ curl -L $HTTPIP:8080/v2/keys/mykey2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;action&amp;quot;:&amp;quot;get&amp;quot;,&amp;quot;node&amp;quot;: &amp;#123;&amp;quot;key&amp;quot;:&amp;quot;/mykey2&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;t&amp;quot;, &amp;quot;modifiedIndex&amp;quot;:12,&amp;quot;createdIndex&amp;quot;:12&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 然而，写入是不可能了，因为 majority 的服务器已经 offline 了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ curl -L $HTTPIP:8080/v2/keys/mykey3 -XPUT -d value=&amp;quot;t&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;message&amp;quot;:&amp;quot;proxy: unable to get response from 3 endpoint(s)&amp;quot;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 重启 etcd2，重新可写&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker start etcd2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ curl -L $HTTPIP:8080/v2/keys/mykey3 -XPUT -d value=&amp;quot;t&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;action&amp;quot;:&amp;quot;set&amp;quot;,&amp;quot;node&amp;quot;: &amp;#123;&amp;quot;key&amp;quot;:&amp;quot;/mykey3&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;t&amp;quot;, &amp;quot;modifiedIndex&amp;quot;:16,&amp;quot;createdIndex&amp;quot;:16&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;外部访问-Etcd-集群的应用容器使用-Etcd-Proxy-的模式-–-Ambassador&quot;&gt;&lt;a href=&quot;#外部访问-Etcd-集群的应用容器使用-Etcd-Proxy-的模式-–-Ambassador&quot; class=&quot;headerlink&quot; title=&quot;外部访问 Etcd 集群的应用容器使用 Etcd Proxy 的模式 – Ambassador&quot;&gt;&lt;/a&gt;外部访问 Etcd 集群的应用容器使用 Etcd Proxy 的模式 – Ambassador&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -it --rm --link etcd-proxy:etcd ubuntu:14.04.2 bash      &amp;lt;-- 其实就是 link 了 proxy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@8df11eaae71e:/# apt-get install -y wget&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@8df11eaae71e:/# wget -q -O- http://etcd:8080/v2/keys/mykey3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;action&amp;quot;:&amp;quot;get&amp;quot;,&amp;quot;node&amp;quot;: &amp;#123;&amp;quot;key&amp;quot;:&amp;quot;/mykey3&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;t&amp;quot;, &amp;quot;modifiedIndex&amp;quot;:16,&amp;quot;createdIndex&amp;quot;:16&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也就是说，应用服务器通过 link，把 Etcd proxy 服务器作为 Ambassador (proxy) 来访问背后的 Etcd 集群&lt;/p&gt;
&lt;p&gt;由于是 link 的方式，故此访问 Etcd 的容器必须和 Etcd Proxy 容器在一个机器上才行&lt;/p&gt;
&lt;h3 id=&quot;还可以使用-etcdctl-Docker-镜像来访问-Etcd-proxy&quot;&gt;&lt;a href=&quot;#还可以使用-etcdctl-Docker-镜像来访问-Etcd-proxy&quot; class=&quot;headerlink&quot; title=&quot;还可以使用 etcdctl Docker 镜像来访问 Etcd proxy&quot;&gt;&lt;/a&gt;还可以使用 etcdctl Docker 镜像来访问 Etcd proxy&lt;/h3&gt;&lt;p&gt;前面，无论是直接访问 Etcd proxy 还是容器内通过 link 访问，都采用了 http 的方式，比较麻烦，命令和参数复杂&lt;/p&gt;
&lt;p&gt;可以使用 etcdctl 镜像来简化操作&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ IMG=dockerinpractice/etcdctl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker pull dockerinpractice/etcdctl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ alias etcdctl=&amp;quot;docker run --rm $IMG -C \&amp;quot;$HTTPIP:8080\&amp;quot;&amp;quot;       &amp;lt;-- 这里通过参数指定了 Etcd proxy 的地址&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ etcdctl set /test value                   &amp;lt;-- 后续访问就简单的多了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ etcdctl ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/test&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于参数中指定了 Etcd Proxy 的地址，故此原则上 EtcdCtl 不需要和 Etcd Proxy 在同一台机器上，更不需要和 Etcd 集群宿主机在同一台机器上&lt;/p&gt;
&lt;h1 id=&quot;Part-II-Zero-downtime-Switchover-with-Confd&quot;&gt;&lt;a href=&quot;#Part-II-Zero-downtime-Switchover-with-Confd&quot; class=&quot;headerlink&quot; title=&quot;Part II. Zero-downtime Switchover with Confd&quot;&gt;&lt;/a&gt;Part II. Zero-downtime Switchover with Confd&lt;/h1&gt;&lt;p&gt;当服务升级，需要更改配置和重启时，通常做法无非删除 old 服务器容器，然后启动 new 服务器容器。这很快，但是仍做不到无缝切换&lt;/p&gt;
&lt;p&gt;利用 Nginx 的 “reloading config files without dropping connections to the server” 属性，配合 Etcd，可以实现 Web-facing 应用的 zero-downtime 热升级&lt;/p&gt;
&lt;h3 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Etcd 集群，按 Part I. 部分安装即可；同时记录宿主外网 ip: HTTPIP=&lt;a href=&quot;http://10.194.12.221&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://10.194.12.221&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动一个 python http 服务&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -d --name py1 -p 80 ubuntu:14.04.2 sh -c &amp;apos;cd / &amp;amp;&amp;amp; python3 -m http.server 80&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 查看 http 服务在宿主机端的端口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker inspect -f &amp;apos;&amp;#123;&amp;#123;.NetworkSettings.Ports&amp;#125;&amp;#125;&amp;apos; py1     &amp;lt;-- 查看 容器所 expose 的端口在宿主机上对应的端口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;map[80/tcp:[map[HostIp:0.0.0.0 HostPort:49156]]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 查看主页&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ curl -s localhost:49156 | tail&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;content of the py1 http server index page&amp;#125;     &amp;lt;-- 内容是列出 / 目录中的文件&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;配置-confd-nginx-容器来中转-py1-容器内的-http-服务&quot;&gt;&lt;a href=&quot;#配置-confd-nginx-容器来中转-py1-容器内的-http-服务&quot; class=&quot;headerlink&quot; title=&quot;配置 confd-nginx 容器来中转 py1 容器内的 http 服务&quot;&gt;&lt;/a&gt;配置 confd-nginx 容器来中转 py1 容器内的 http 服务&lt;/h3&gt;&lt;p&gt;首先安装运行 confd-nginx 容器&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ IMG=dockerinpractice/confd-nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker pull $IMG&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -d --name nginx -p 8000:80 $IMG $HTTPIP:8080      &amp;lt;-- nginx 监听的端口为 80，映射到宿主的 8000，同时指定 Etcd Proxy 地址&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;不过此时还没有给 nginx 配置它所要中转的 http 服务，这个配置是 confd-nginx 这个镜像内部固化好的，配置方法如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ etcdctl set /app/upstream/py1 10.194.12.221:49156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.194.12.221:49156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sleep 10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;查看日志&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker logs nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Using http://10.194.12.221:8080 as backend&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ERROR 100: Key not found (/app) [14]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;INFO Target config /etc/nginx/conf.d/app.conf out of sync&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Target config /etc/nginx/conf.d/app.conf has been updated       &amp;lt;-- 配置更新&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ curl -s localhost:8000 | tail&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;content of the py1 http server index page&amp;#125;     &amp;lt;-- 成功中转了 py1 容器内的 http 服务&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;测试热升级&quot;&gt;&lt;a href=&quot;#测试热升级&quot; class=&quot;headerlink&quot; title=&quot;测试热升级&quot;&gt;&lt;/a&gt;测试热升级&lt;/h3&gt;&lt;p&gt;类似 py1 http server，我们再创建一个 py2 http server，作为待切换的新服务&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -d --name py2 -p 80 ubuntu:14.04.2 sh -c &amp;apos;cd /etc &amp;amp;&amp;amp; python3 -m http.server 80&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 查看 http 服务在宿主机端的端口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker inspect -f &amp;apos;&amp;#123;&amp;#123;.NetworkSettings.Ports&amp;#125;&amp;#125;&amp;apos; py1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;map[80/tcp:[map[HostIp:0.0.0.0 HostPort:49161]]]        &amp;lt;-- 和 py1 不同的宿主端口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 查看主页&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ curl -s localhost:49161 | tail&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;content of the py2 http server index page&amp;#125;     &amp;lt;-- 内容是列出 /etc 目录中的文件&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;调用 etcdctl 来更新配置，把中转的服务指向 py2 http server&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ etcdctl set /app/upstream/py2 $HTTPIP:49161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.194.12.221:49161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ etcdctl ls /app/upstream&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/app/upstream/py1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/app/upstream/py2         &amp;lt;-- /app/upstream 中有了两个服务，confd-nginx 镜像配置为选取版本号大的为最新版本&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;查看 http 服务&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl -s localhost:8000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;content of the py2 http server index page&amp;#125;    &amp;lt;-- 已经更新为 py2 服务的内容了！成功！&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;清理工作&quot;&gt;&lt;a href=&quot;#清理工作&quot; class=&quot;headerlink&quot; title=&quot;清理工作&quot;&gt;&lt;/a&gt;清理工作&lt;/h3&gt;&lt;p&gt;作为 two-stage switchover 的最后一步，需要清理 old 服务&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ etcdctl rm /app/upstream/py1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ etcdctl ls /app/upstream&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/app/upstream/py2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker rm -f py1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;整个流程的小结&quot;&gt;&lt;a href=&quot;#整个流程的小结&quot; class=&quot;headerlink&quot; title=&quot;整个流程的小结&quot;&gt;&lt;/a&gt;整个流程的小结&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;用户访问 $HTTPIP:8000，这个端口映射到 confd-nginx 容器的 80 端口&lt;/li&gt;
&lt;li&gt;confd-nginx 容器中，confd 配置为读取 etcd 集群的 /app/upstream 的最新服务地址，然后把用户请求转发到这个地址&lt;/li&gt;
&lt;li&gt;这个地址配置为宿主机的一个端口，如 10.194.12.221:49161；而 49161 端口映射到 python http server 容器的 80 端口&lt;/li&gt;
&lt;li&gt;用户的请求发送到 python http server，顺利返回结果&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看到，confd-nginx 容器和 python http server 容器之间没有直接关联，是通过 etcd 集群的配置，以及宿主机上映射的端口来发生间接的关联&lt;/p&gt;
&lt;p&gt;其实，这个和服务发现也有一些类似，confd-nginx 并不知道具体的服务在哪里，通过 etcd 来间接的找到具体提供服务的容器&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Some notes about Docker and Etcd on 《Manning Docker in Practice》&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://ijustloveses.github.io/categories/Docker/"/>
    
    
      <category term="笔记" scheme="http://ijustloveses.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Docker" scheme="http://ijustloveses.github.io/tags/Docker/"/>
    
      <category term="Orchestration" scheme="http://ijustloveses.github.io/tags/Orchestration/"/>
    
      <category term="Deploy" scheme="http://ijustloveses.github.io/tags/Deploy/"/>
    
      <category term="Etcd" scheme="http://ijustloveses.github.io/tags/Etcd/"/>
    
      <category term="ServiceDiscovery" scheme="http://ijustloveses.github.io/tags/ServiceDiscovery/"/>
    
  </entry>
  
  <entry>
    <title>Docker in Practice - Foundamental</title>
    <link href="http://ijustloveses.github.io/2016/11/30/Docker-in-Practice-Foundamental/"/>
    <id>http://ijustloveses.github.io/2016/11/30/Docker-in-Practice-Foundamental/</id>
    <published>2016-11-30T06:39:25.000Z</published>
    <updated>2016-11-30T07:20:37.000Z</updated>
    
    <content type="html">&lt;p&gt;Some Notes on 《Manning Docker in Practice》&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Docker-fundamentals&quot;&gt;&lt;a href=&quot;#Docker-fundamentals&quot; class=&quot;headerlink&quot; title=&quot;Docker fundamentals&quot;&gt;&lt;/a&gt;Docker fundamentals&lt;/h1&gt;&lt;h3 id=&quot;docker-diff&quot;&gt;&lt;a href=&quot;#docker-diff&quot; class=&quot;headerlink&quot; title=&quot;docker diff&quot;&gt;&lt;/a&gt;docker diff&lt;/h3&gt;&lt;p&gt;docker diff 命令用于查看容器启动后修改了哪些文件&lt;/p&gt;
&lt;h3 id=&quot;docker-daemon-amp-client&quot;&gt;&lt;a href=&quot;#docker-daemon-amp-client&quot; class=&quot;headerlink&quot; title=&quot;docker daemon &amp;amp; client&quot;&gt;&lt;/a&gt;docker daemon &amp;amp; client&lt;/h3&gt;&lt;p&gt;Docker 安装后，其实在机器上安装了 daemon 和 client 两个程序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;client 用于接收用户的命令行输入，并传给 daemon&lt;/li&gt;
&lt;li&gt;daemon 真正维护 docker image/container/registry 等相关的内部逻辑&lt;/li&gt;
&lt;li&gt;client 和 daemon 之间的调用竟然是 HTTP RESTFUL API，daemon 和 DockerHub/其他Registry 之间当然也是 HTTP&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;允许-Docker-Daemon-被远程访问&quot;&gt;&lt;a href=&quot;#允许-Docker-Daemon-被远程访问&quot; class=&quot;headerlink&quot; title=&quot;允许 Docker Daemon 被远程访问&quot;&gt;&lt;/a&gt;允许 Docker Daemon 被远程访问&lt;/h3&gt;&lt;p&gt;默认 Docker 只能本地访问，这是因为 Docker Daemon 和 Docker Client 是通过 /var/run/docker.sock 本地文件 sock 来通信的&lt;/p&gt;
&lt;p&gt;Docker Client 也可以通过 TCP Socket 来访问 Docker Daemon，不过此时 Docker Daemon 暴露在网络中，处于不安全的状态，需谨慎使用这种情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关掉当前 Docker Daemon&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo service docker stop 或者&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ systemctl stop docker&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用下面的命令确认没有任何 Docker Daemon 输出&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ps -ef | grep -E &amp;apos;docker (-d|daemon)\b&amp;apos; | grep -v grep&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通过 TCP Socket 启动新的 Docker Daemon (故此不能使用 service docker start 这样的命令来启动)&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker daemon -H tcp://0.0.0.0:2375    # 如果不行，试试 [-d] 选项&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Docker Client 连接&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker -H tcp://&amp;lt;your host&amp;apos;s ip&amp;gt;:2375&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;容器运行为后台服务&quot;&gt;&lt;a href=&quot;#容器运行为后台服务&quot; class=&quot;headerlink&quot; title=&quot;容器运行为后台服务&quot;&gt;&lt;/a&gt;容器运行为后台服务&lt;/h3&gt;&lt;p&gt;通常 Linux 下的 Daemon 服务程序都是通过 nohup \&lt;your command=&quot;&quot;&gt; &amp;amp; 这种方式来实现的；不过，docker run 提供了 -d 选项，使得容器可以轻松运行为 Daemon&lt;/your&gt;&lt;/p&gt;
&lt;p&gt;Docker run 命令提供 –restart 选项控制服务失败的后处理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;–restart=no  容器退出后不重启&lt;/li&gt;
&lt;li&gt;–restart=always  容器退出后总是重启&lt;/li&gt;
&lt;li&gt;–restart=on-failure[:max-retry]  容器因为失败退出后重启，如果给定数字，那么只重启有限次数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;设置-Docker-Storage-的位置&quot;&gt;&lt;a href=&quot;#设置-Docker-Storage-的位置&quot; class=&quot;headerlink&quot; title=&quot;设置 Docker Storage 的位置&quot;&gt;&lt;/a&gt;设置 Docker Storage 的位置&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;停止当前 Docker Daemon 服务&lt;/li&gt;
&lt;li&gt;docker daemon -g &amp;lt;新的 Storage 目录&amp;gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;你会发现之前 Docker 的镜像和容器全部都消失掉了，没有关系，只要你杀掉调整位置后的 Docker 服务，再以通常的方式重启 Docker，一切恢复原样&lt;/p&gt;
&lt;h3 id=&quot;使用-socat-作为-proxy-来监控-Docker-API-traffic&quot;&gt;&lt;a href=&quot;#使用-socat-作为-proxy-来监控-Docker-API-traffic&quot; class=&quot;headerlink&quot; title=&quot;使用 socat 作为 proxy 来监控 Docker API traffic&quot;&gt;&lt;/a&gt;使用 socat 作为 proxy 来监控 Docker API traffic&lt;/h3&gt;&lt;p&gt;如果想要调试或者研究 Docker 内部的 API 调用流，可以使用 socat 在 Docker Client 和 Docker Daemon 之间搭一个代理：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker Client &amp;lt;==&amp;gt; Socat Unix Domain Socket Proxy &amp;lt;==&amp;gt; Docker Defaut Unix Domain Socket &amp;lt;==&amp;gt; Docker Daemon&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用如下命令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo socat -v UNIX-LISTEN:/tmp/dockerapi.sock UNIX-CONNECT:/var/run/docker.sock &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;-v 使输出可读；UNIX-LISTEN 表示 socat 监听 /tmp/dockerapi.sock；UNIX-CONNECT 表示 socket 连接默认 docker 的 socket，把监听到的请求转发过去；反过来，当接收到 docker 的 response 后，再通过 /tmp/dockerapi.sock 返回给 Docker Client，完成一个成功的请求响应过程&lt;/p&gt;
&lt;p&gt;以 docker ps -a 命令为例，Docker Client 的调用方法为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker -H unix:///tmp/dockerapi.sock ps -a&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Linking-containers&quot;&gt;&lt;a href=&quot;#Linking-containers&quot; class=&quot;headerlink&quot; title=&quot;Linking containers&quot;&gt;&lt;/a&gt;Linking containers&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run --name wp-mysql -e MYSQL_ROOT_PASSWORD=yoursecretpassword -d mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker run --name wordpress --link wp-mysql:mysql -p 10003:80 -d wordpress&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意，第二条命令要在第一条命令执行之后再等一下才能运行，否则第一个容器还没准备好，第二个命令中的 link 就无效了；使用 docker-compose to rescue !&lt;/p&gt;
&lt;p&gt;另外，像上面命令中这样的 setup，需要在 Dockerfile 中 EXPOSE 端口号&lt;/p&gt;
&lt;h3 id=&quot;Setting-up-a-local-Docker-registry&quot;&gt;&lt;a href=&quot;#Setting-up-a-local-Docker-registry&quot; class=&quot;headerlink&quot; title=&quot;Setting up a local Docker registry&quot;&gt;&lt;/a&gt;Setting up a local Docker registry&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run -d -p 5000:5000 -v $HOME/registry:/var/lib/registry registry:2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果 Docker Client 在 docker push 或者其他访问时出问题，试试看在启动 Docker Daemon 时加入 –insecure-registry HOSTNAME 选项&lt;/p&gt;
&lt;h3 id=&quot;管理容器内服务的启动&quot;&gt;&lt;a href=&quot;#管理容器内服务的启动&quot; class=&quot;headerlink&quot; title=&quot;管理容器内服务的启动&quot;&gt;&lt;/a&gt;管理容器内服务的启动&lt;/h3&gt;&lt;p&gt;通常我们使用 crontab 来控制系统服务的启动，然而这个对于容器来说并不理想，会导致很多问题&lt;/p&gt;
&lt;p&gt;相应的，应该使用 Supervisor 来控制服务的启动，通过 pip install supervisor 安装，并通过 /etc/supervisord.conf 配置文件来管理&lt;/p&gt;
&lt;h3 id=&quot;docker-commit-只能提交文件系统的修改&quot;&gt;&lt;a href=&quot;#docker-commit-只能提交文件系统的修改&quot; class=&quot;headerlink&quot; title=&quot;docker commit 只能提交文件系统的修改&quot;&gt;&lt;/a&gt;docker commit 只能提交文件系统的修改&lt;/h3&gt;&lt;p&gt;docker commit 只能提交文件系统的修改，不能保存容器内正在运行中的进程，也不能保存数据库、Docker volumns 等外部依赖组件&lt;/p&gt;
&lt;h3 id=&quot;Referring-to-a-specific-image-in-builds&quot;&gt;&lt;a href=&quot;#Referring-to-a-specific-image-in-builds&quot; class=&quot;headerlink&quot; title=&quot;Referring to a specific image in builds&quot;&gt;&lt;/a&gt;Referring to a specific image in builds&lt;/h3&gt;&lt;p&gt;在 build Docker 镜像时，我们都是基于 (FROM) 一个已有的镜像。我们知道，通过镜像 name/repository/tag 都无法真正限制一个镜像保持不变，那么如何让 build 时真正基于一个确定性的镜像呢？&lt;/p&gt;
&lt;p&gt;答案是使用镜像 id，比如 FROM 8eaa4ff06b53&lt;/p&gt;
&lt;p&gt;更厉害的是，这个镜像 id 甚至不需要有 name/repositary/tag，可以是本地 build 任何镜像时任意步骤所产生的中间镜像 id&lt;/p&gt;
&lt;h3 id=&quot;Volumn-的一些注意事项&quot;&gt;&lt;a href=&quot;#Volumn-的一些注意事项&quot; class=&quot;headerlink&quot; title=&quot;Volumn 的一些注意事项&quot;&gt;&lt;/a&gt;Volumn 的一些注意事项&lt;/h3&gt;&lt;p&gt;比如 docker run -v /var/db/tables:/var/data1 -it debian bash&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;host 的 /var/db/tables 目录 mount 到容器中的 /var/data1 目录&lt;/li&gt;
&lt;li&gt;如果 /var/db/tables 或者 /var/data1 目录不存在，那么在容器启动的时候会创建&lt;/li&gt;
&lt;li&gt;如果 /var/data1 目录本来就在镜像中存在，那么在容器启动时，该目录会被消失，并被重新 mount 到 host 的 /var/db/tables；故此切忌使用容器的关键目录&lt;/li&gt;
&lt;li&gt;Selinux 可能会影响 volumn，比如报错 permission denied&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;如何保留容器中的-Bash-History&quot;&gt;&lt;a href=&quot;#如何保留容器中的-Bash-History&quot; class=&quot;headerlink&quot; title=&quot;如何保留容器中的 Bash History&quot;&gt;&lt;/a&gt;如何保留容器中的 Bash History&lt;/h3&gt;&lt;p&gt;方法是使用 Volumn 把容器中的 History 文件共享给 host&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run -e HIST_FILE=/root/.bash_history \               # 这里设置 History 文件环境变量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -v=$HOME/.bash_history:/root/.bash_history \              # 这里把 History 文件 mount 到 host 的 ~/.bash_history 文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -ti ubuntu /bin/bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果想避免把容器的 History 文件和 host 的 History 文件混合在一起，可以把 host 目录设置到另外的地方即可&lt;/p&gt;
&lt;p&gt;如果想避免写这么长的 docker run 命令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;alias dockbash=&amp;apos;docker run -e HIST_FILE=/root/.bash_history \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -v=$HOME/.bash_history:/root/.bash_history&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然而，这样就得用 dockbash 代替 docker run 了，这样不够好，不够 seamless；&lt;/p&gt;
&lt;p&gt;可以在 ~/.bashrc 中添加下面代码，就完美无缝了&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function basher() &amp;#123;            # 定义函数 basher&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  if [[ $1 = &amp;apos;run&amp;apos; ]]          # 如果首个参数是 run&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  then&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    shift                      # 移除第一个参数，也就是说去掉 run 参数，剩下的就是 docker run 的其他参数了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /usr/bin/docker run \      # 运行 docker run，注意使用绝对路径去找 docker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      -e HIST_FILE=/root/.bash_history \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      -v $HOME/.bash_history:/root/.bash_history &amp;quot;$@&amp;quot;        # 配置 History 目录，并指定 docker run 剩下的参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /usr/bin/docker &amp;quot;$@&amp;quot;       # 否则，不移除首参数，正常运行原命令；仍然指定 docker 绝对路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias docker=basher            # 最后，docker 设置为别名，每次调用 docker 命令就会调用 basher 函数，实现对 docker 的覆盖&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后，推出当前 bash session，重进，更新 History 设置&lt;/p&gt;
&lt;h3 id=&quot;Data-Only-Container-–-Docker-常见模式之一&quot;&gt;&lt;a href=&quot;#Data-Only-Container-–-Docker-常见模式之一&quot; class=&quot;headerlink&quot; title=&quot;Data-Only Container – Docker 常见模式之一&quot;&gt;&lt;/a&gt;Data-Only Container – Docker 常见模式之一&lt;/h3&gt;&lt;p&gt;启动 Data-Only Container&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -v /shared-data --name dc busybox touch /shared-data/somefile&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-v /shared-data 由于没有指定 host 目录，故此它只是在容器中创建一个目录，以供 mount 使用。(相当于 Dockerfile 中指定 VOLUMN 指令的值)&lt;/li&gt;
&lt;li&gt;touch /shared-data/somefile 在指定的目录中创建一个文件，然后命令就结束了，也就是说容器退出了(exit)；要注意，即使容器退出，Data-Only 容器仍然会起作用&lt;/li&gt;
&lt;li&gt;为了减少容器 size，使用了 busybox&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过 –volumns-from 选项，启动 Data-Only Container 的引用容器，自动 mount 上 /share-data 目录&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run -t -i --volumes-from dc busybox /bin/sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/ # ls /shared-data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;somefile&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当所有 Data-Only 容器的引用容器都退出之后，Data-Only 容器才会清空 Volumn；然而，这一点并不能保证，经常会看到 /data/docker/volumes/ 目录 (或者其他指定的 docker volumes 目录) 中遗留着历史 volumes 文件，导致空间占满的现象，可以清理如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker volume ls -qf dangling=true | xargs -r docker volume rm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;或者 docker volume rm $(docker volume ls -qf dangling=true)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;参考 &lt;a href=&quot;https://lebkowski.name/docker-volumes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cleaning up docker to reclaim disk space&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当存在多个引用容器，尽量使每个容器访问独立的文件或目录，以避免数据损失；也要注意避免名称冲突&lt;/p&gt;
&lt;h3 id=&quot;通过-BitTorrent-Sync-让-data-container-的-volumn-能够自动和远程数据源同步&quot;&gt;&lt;a href=&quot;#通过-BitTorrent-Sync-让-data-container-的-volumn-能够自动和远程数据源同步&quot; class=&quot;headerlink&quot; title=&quot;通过 BitTorrent Sync 让 data container 的 volumn 能够自动和远程数据源同步&quot;&gt;&lt;/a&gt;通过 BitTorrent Sync 让 data container 的 volumn 能够自动和远程数据源同步&lt;/h3&gt;&lt;p&gt;远程数据源 host 启动一个 btsync 容器&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[host1]$ docker run -d -p 8888:8888 -p 55555:55555 --name btsync ctlc/btsync&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[host1]$ docker logs btsync&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Starting btsync with secret: ALSVEUABQQ5ILRS2OQJKAOKCU5SIIP6A3            &amp;lt;-- key，供客户端连接使用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.................&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;远程数据源 host 启动容器，link btsync 容器，用于控制和配置需要同步的数据源&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[host1]$ docker run -i -t --volumes-from btsync ubuntu /bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[host1]$ touch /data/shared_from_server_one          &amp;lt;--- 看到，默认的 mount 目录为 /data/，我们在目录中配置了一个新数据文件&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;类似的，本地 host 启动 btsync 客户端容器用于同步 btsync 服务器容器，再启动一个容器 link 客户端容器，用于读取和更改数据源&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[host2]$ docker run -d --name btsync-client -p 8888:8888 -p 55555:55555 \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ctlc/btsync ALSVEUABQQ5ILRS2OQJKAOKCU5SIIP6A3             &amp;lt;--- 这里指定了 key，用于连接 btsync 服务器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[host2]$ docker run -i -t --volumes-from btsync-client ubuntu bash     &amp;lt;-- 启动容器 link btsync 客户端&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[host2]$ ls /data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;shared_from_server_one&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[host2]$ touch /data/shared_from_server_two         &amp;lt;--- 创建新文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[host2]$ ls /data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;shared_from_server_one shared_from_server_two&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;回到数据源 host，应该也能看到新建的 shared_from_server_two，从略&lt;/p&gt;
&lt;p&gt;简单的说，就是启动 btsync server &amp;amp; client 容器用于同步数据，然后 server &amp;amp; client 所在 host 各启动一个 app 容器，link 对应的 btsync 容器，操纵已经同步的数据&lt;/p&gt;
&lt;p&gt;本方法不能保证时间上的可靠性，可能需要等待一段时间以供同步所需，在安全性、可扩展性和性能上，都有一定的局限&lt;/p&gt;
&lt;h3 id=&quot;通过-SSHFS-直接-mount-远程-volume&quot;&gt;&lt;a href=&quot;#通过-SSHFS-直接-mount-远程-volume&quot; class=&quot;headerlink&quot; title=&quot;通过 SSHFS 直接 mount 远程 volume&quot;&gt;&lt;/a&gt;通过 SSHFS 直接 mount 远程 volume&lt;/h3&gt;&lt;p&gt;前面的技巧是通过同步来把远程数据源更新到本地，再使用 Data-Only 容器来访问；那么能否直接 mount 远程数据源呢？答案是肯定的，通常有两种方法：NFS 或者 SSHFS。这里先介绍 SSHFS，下面一节介绍 NFS&lt;/p&gt;
&lt;p&gt;SSHFS 的方法需要 root 权限，并安装 FUSE (Linux’s “Filesystem in Userspace” kernel module)，后者可以根据是否存在 /dev/fuse 来判断。SSHFS + FUSE kernel 通过内部的 SSH 连接，提供了一套文件系统的标准接口，让你可以正常访问远程文件。由于直连远程文件，故此不会有 local container-level persistence，文件修改都发生在远程数据源。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -t -i --privileged debian /bin/bash        &amp;lt;-- 如上面所说，需要 root 权限&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;容器内部&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ apt-get update &amp;amp;&amp;amp; apt-get install sshfs        &amp;lt;-- 安装 sshfs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sshfs user@host:/path/to/local/directory $&amp;#123;localpath&amp;#125;    &amp;lt;-- 把远程文件数据源 mount 到本地&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;搞定，远程数据源服务器只要有 ssh service 就可以了，基本不需要做额外配置&lt;/p&gt;
&lt;p&gt;当然，还可以把 ${localpath} 暴露出去，让本地容器成为 Data-Only 容器，供其他 app 容器 link。总之 ${localpath} 就和本地目录完全同等看待&lt;/p&gt;
&lt;p&gt;如果要 unmount，非常简单&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fusermount -u $&amp;#123;localpath&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;通过-NFS-直接-mount-远程-volume&quot;&gt;&lt;a href=&quot;#通过-NFS-直接-mount-远程-volume&quot; class=&quot;headerlink&quot; title=&quot;通过 NFS 直接 mount 远程 volume&quot;&gt;&lt;/a&gt;通过 NFS 直接 mount 远程 volume&lt;/h3&gt;&lt;p&gt;前面 SSHFS 的方法优点在于配置简单：远程数据源有 SSH 即可；本地需要预先安装 FUSE；本地容器内安装 SSHFS。&lt;/p&gt;
&lt;p&gt;NFS 方法的话，很多大些的公司内部都已经在使用 NFS 共享目录，那么可以配置一个容器来安装 NFS 客户端 mount 远程共享目录，同时作为 Data-Only 容器向其他 app 容器提供 volume 数据服务&lt;/p&gt;
&lt;p&gt;数据源 host 的配置 (比较简略，详细的需要查询 NFS 文档&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# apt-get install nfs-kernel-server      &amp;lt;-- 安装 nfs 服务，注意是 root 权限&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# mkdir /export &amp;amp;&amp;amp; chmod 777 /export &amp;amp;&amp;amp; mount --bind /opt/test/db /export      &amp;lt;-- 把数据目录 mount 到 /export&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在 /etc/fstab file 文件中加入&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/opt/test/db /export none bind 0 0       &amp;lt;-- 重启后仍然保持 mount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在 /etc/exports 文件中加入&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/export 127.0.0.1(ro,fsid=0,insecure,no_subtree_check,async)     &amp;lt;-- 配置 NFS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这里限制为本地访问；现实中可以配置能够访问的 ip 段，或者 * 号不设置权限；还可以设置 ro 为 rw 等，配置不同的权限粒度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# exportfs -a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# service nfs-kernel-server restart&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;本地 Data-Only 容器的配置&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# mount -t nfs 127.0.0.1:/export /mnt     &amp;lt;-- 本例中是本地配置的 NFS 服务，现实中改为真实 ip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# docker run -ti --name nfs_client --privileged -v /mnt:/mnt busybox /bin/true      &amp;lt;-- 注意有 privileged 选项&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;本地其他 app 容器连接&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# docker run -ti --volumes-from nfs_client debian /bin/bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;相比起来，服务器端的配置麻烦，而 Data-Only 容器的配置简单很多，因为 mount 过来后，就可以完全当作本地文件了&lt;/p&gt;
&lt;h3 id=&quot;容器使用-host-的资源&quot;&gt;&lt;a href=&quot;#容器使用-host-的资源&quot; class=&quot;headerlink&quot; title=&quot;容器使用 host 的资源&quot;&gt;&lt;/a&gt;容器使用 host 的资源&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run -t -i \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v /var/run/docker.sock:/var/run/docker.sock \     &amp;lt;-- 容器内可以使用 docker 命令，充当 host 的 Docker Daemon&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v /tmp/.X11-unix:/tmp/.X11-unix \                 &amp;lt;-- 容器内可以使用 host 的显示设备来访问 GUI 程序&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-e DISPLAY=$DISPLAY \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--net=host --ipc=host \                            &amp;lt;-- 容器内可以使用本地网络和 ipc；--net 默认值为 bridge&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v /opt/workspace:/home/dockerinpractice \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dockerinpractice/docker-dev-tools-image&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;查看容器&quot;&gt;&lt;a href=&quot;#查看容器&quot; class=&quot;headerlink&quot; title=&quot;查看容器&quot;&gt;&lt;/a&gt;查看容器&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker inspect 0808ef13d450&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker inspect --format &amp;apos;&amp;#123;&amp;#123;.NetworkSettings.IPAddress&amp;#125;&amp;#125;&amp;apos; 0808ef13d450&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker ps -q | xargs docker inspect --format=&amp;apos;&amp;#123;&amp;#123;.NetworkSettings.IPAddress&amp;#125;&amp;#125;&amp;apos; | xargs -l1 ping -c1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;清理容器&quot;&gt;&lt;a href=&quot;#清理容器&quot; class=&quot;headerlink&quot; title=&quot;清理容器&quot;&gt;&lt;/a&gt;清理容器&lt;/h3&gt;&lt;p&gt;一句话：使用 docker stop 而不要用 docker kill&lt;/p&gt;
&lt;p&gt;具体的说，docker stop 和 unix 命令 kill 一样，都会给进程发送 TERM 信号；而 docker kill 则是发送 KILL 信号&lt;/p&gt;
&lt;p&gt;区别在于，进程收到 TERM 信号后可以做一些 cleanup 工作再退出；而 KILL 信号则强迫进程立即退出，可能导致问题&lt;/p&gt;
&lt;h3 id=&quot;Docker-Machine&quot;&gt;&lt;a href=&quot;#Docker-Machine&quot; class=&quot;headerlink&quot; title=&quot;Docker Machine&quot;&gt;&lt;/a&gt;Docker Machine&lt;/h3&gt;&lt;p&gt;docker-machine 是一个工具，用来方便的创建和管理 docker host。它支持多种 docker host 环境，并提供统一的命令，方便用户的使用 (不同类型的 host 可用命令数会不同，比如 virtualbox 只有 3 个命令，而 openstack 则支持 17 个)&lt;/p&gt;
&lt;p&gt;比如创建 virtualbox 环境&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker-machine create --driver virtualbox host1        &amp;lt;-- 会创建 virtualbox + boot2docker.iso 镜像环境&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ eval $(docker-machine env host1)           &amp;lt;-- 设置默认 docker 环境变量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker ps -a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES    &amp;lt;-- 还没有 docker 容器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker-machine ssh host1                   &amp;lt;-- 登录 host1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Dockerfile-之-ADD&quot;&gt;&lt;a href=&quot;#Dockerfile-之-ADD&quot; class=&quot;headerlink&quot; title=&quot;Dockerfile 之 ADD&quot;&gt;&lt;/a&gt;Dockerfile 之 ADD&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl https://www.flamingspork.com/projects/libeatmydata/libeatmydata-105.tar.gz &amp;gt; my.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在 Dockerfile 中加入&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FROM debian&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN mkdir -p /opt/libeatmydata&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ADD my.tar.gz /opt/libeatmydata/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN ls -lRt /opt/libeatmydata&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker build --no-cache .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.................&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Step 3 : RUN ls -lRt /opt/libeatmydata&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---&amp;gt; Running in e3283848ad65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/opt/libeatmydata:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;total 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxr-xr-x 7 1000 1000 4096 Oct 29 23:02 libeatmydata-105       &amp;lt;-- 看到 tar.gz 文件自动解压了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.................&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Docker 会自动解压常见的标准压缩文件，包括并不仅限于 gz, bz2, xz, tar。但是，前提是你已经下载为本地文件了才行，否则不会自动解压，比如&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FROM debian&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN mkdir -p /opt/libeatmydata&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ADD https://www.flamingspork.com/projects/libeatmydata/libeatmydata-105.tar.gz /opt/libeatmydata/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN ls -lRt /opt/libeatmydata&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个就不会自动解压&lt;/p&gt;
&lt;p&gt;另外，注意到 ADD 的目的目录最后有一个斜杠 /，表示这是个目录；如果没有这个斜杠，那么 Docker 会把 /opt/libeatmydata 当作一个文件名，并把下载的文件保存为这个文件名&lt;/p&gt;
&lt;p&gt;如果你就不希望自动解压缩，那么使用 Dockerfile 的 COPY 命令即可&lt;/p&gt;
&lt;h3 id=&quot;Docker-build-过程中的-cache&quot;&gt;&lt;a href=&quot;#Docker-build-过程中的-cache&quot; class=&quot;headerlink&quot; title=&quot;Docker build 过程中的 cache&quot;&gt;&lt;/a&gt;Docker build 过程中的 cache&lt;/h3&gt;&lt;p&gt;在重新 build Docker 镜像的时候，如果 Dockerfile 没有发生改变，那么 Docker 会默认使用 cache，不会真正重新执行命令&lt;/p&gt;
&lt;p&gt;如果不希望使用 cache，那么使用 –no-cache 选项，如 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;docker build –no-cache .&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果希望有一些更 fine-grained 的控制呢？比如希望从某个点开始不使用 cache? 可以通过修改 Dockerfile 的方式来实现&lt;/p&gt;
&lt;p&gt;Docker 的规则是，只要 Dockerfile 发生了字符级别的改变，那么就从改变发生的位置起，不再使用 cache。注意，字符级别的改变，意味着即使我们只是添加了一条 comment、一个空格，那么也会被认为 Dockerfile 改变，继而不再使用 cache&lt;/p&gt;
&lt;h3 id=&quot;Running-Docker-without-sudo&quot;&gt;&lt;a href=&quot;#Running-Docker-without-sudo&quot; class=&quot;headerlink&quot; title=&quot;Running Docker without sudo&quot;&gt;&lt;/a&gt;Running Docker without sudo&lt;/h3&gt;&lt;p&gt;通常用户在前台需要使用 sudo 来调用 docker 命令。如何避免使用 sudo 呢？加入 docker group&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ sudo addgroup -a username docker&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;退出 shell 再进，就可以不使用 sudo 了&lt;/p&gt;
&lt;h3 id=&quot;清理-Containers&quot;&gt;&lt;a href=&quot;#清理-Containers&quot; class=&quot;headerlink&quot; title=&quot;清理 Containers&quot;&gt;&lt;/a&gt;清理 Containers&lt;/h3&gt;&lt;p&gt;清理全部容器&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker ps -a -q | xargs --no-run-if-empty docker rm -f&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;–no-run-if-empty 选项表示如果前面的命令没有返回，那么就不运行后面的命令； -f 表示即使运行中的容器也 force remove&lt;/p&gt;
&lt;p&gt;清理 exited 的容器，既然已经 exited 了，就不需要 -f 了&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker ps -a -q --filter status=exited | xargs --no-run-if-empty docker rm&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;查看全部错误退出的容器&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;comm -3 \                  &amp;lt;-- comm 命令比较两个文件内容，-3 选项清除两个文件中都有的行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;(docker ps -a -q --filter=status=exited | sort) \     &amp;lt;-- &amp;quot;&amp;lt;(command)&amp;quot; 会执行命令，并把结果看待为一个文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;(docker ps -a -q --filter=exited=0 | sort) | \        &amp;lt;-- 得到 exited 和 exited=0 的两个结果文件，作为 comm 参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xargs --no-run-if-empty docker inspect &amp;gt; error_containers    &amp;lt;-- 两个文件去除重复行后，剩下的就是 exited 非零的容器了&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Detaching-containers-without-stopping-them&quot;&gt;&lt;a href=&quot;#Detaching-containers-without-stopping-them&quot; class=&quot;headerlink&quot; title=&quot;Detaching containers without stopping them&quot;&gt;&lt;/a&gt;Detaching containers without stopping them&lt;/h3&gt;&lt;p&gt;有时运行 docker 容器时，会遇到这种情况：如果退出 shell，那么容器也会跟着退出。如何 detach 而不会 stop 容器呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Press Ctrl-P and then Ctrl-Q to detach.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;使用-DockerUI-来管理-Docker-Daemon&quot;&gt;&lt;a href=&quot;#使用-DockerUI-来管理-Docker-Daemon&quot; class=&quot;headerlink&quot; title=&quot;使用 DockerUI 来管理 Docker Daemon&quot;&gt;&lt;/a&gt;使用 DockerUI 来管理 Docker Daemon&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -d -p 9000:9000 --privileged -v /var/run/docker.sock:/var/run/docker.sock dockerui/dockerui&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;生成-Docker-images-间的依赖图&quot;&gt;&lt;a href=&quot;#生成-Docker-images-间的依赖图&quot; class=&quot;headerlink&quot; title=&quot;生成 Docker images 间的依赖图&quot;&gt;&lt;/a&gt;生成 Docker images 间的依赖图&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run --rm -v /var/run/docker.sock:/var/run/docker.sock dockerinpractice/docker-image-graph &amp;gt; docker_images.png&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;docker-exec-的三种模式&quot;&gt;&lt;a href=&quot;#docker-exec-的三种模式&quot; class=&quot;headerlink&quot; title=&quot;docker exec 的三种模式&quot;&gt;&lt;/a&gt;docker exec 的三种模式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Basic mode – Runs the command in the container synchronously on the command line&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker exec sleeper echo &amp;quot;hello host from container&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Daemon mode – Runs the command in the background on the container&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker exec -d sleeper find / -ctime 7 -name &amp;apos;*log&amp;apos; -exec rm &amp;#123;&amp;#125; \;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Interactive mode – Runs the command and allows the user to interact with it&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker exec -i -t sleeper /bin/bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;ENTRYPOINT-v-s-CMD&quot;&gt;&lt;a href=&quot;#ENTRYPOINT-v-s-CMD&quot; class=&quot;headerlink&quot; title=&quot;ENTRYPOINT v.s. CMD&quot;&gt;&lt;/a&gt;ENTRYPOINT v.s. CMD&lt;/h3&gt;&lt;p&gt;例如一个脚本 clean_log 用于清理 N 天没有变动过的文件，天数 N 为传入参数&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;quot;Cleaning logs over $1 days old&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;find /log_dir -ctime &amp;quot;$1&amp;quot; -name &amp;apos;*log&amp;apos; -exec rm &amp;#123;&amp;#125; \;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;容器化&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FROM ubuntu:14.04&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ADD clean_log /usr/bin/clean_log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN chmod +x /usr/bin/clean_log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ENTRYPOINT [&amp;quot;/usr/bin/clean_log&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CMD [&amp;quot;7&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里面有几个重点需要注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;清理的目标目录 /log_dir，这个是在 docker run 的时候，通过 -v 选项动态 mount 即可&lt;/li&gt;
&lt;li&gt;当 Dockerfile 中同时具有 ENTRYPOINT 和 CMD 的时候，CMD 定义为 ENTRYPOINT 的默认参数&lt;/li&gt;
&lt;li&gt;当容器运行时，如果有 ENTRYPOINT，那么一定会被运行；此时如果 docker run 还提供了 command 参数，那么这个 command 不会执行，而是作为 ENTRYPOINT 的参数，替代 CMD 指令中的参数&lt;/li&gt;
&lt;li&gt;如果就不要 ENTRYPOINT，唯一的办法是使用 docker run 的 –entrypoint 选项&lt;/li&gt;
&lt;li&gt;无论 ENTRYPOINT 还是 CMD 都采用了 array 模式，而不是 shell 命令模式，这是因为后者会自动加入 /bin/bash -c 前缀，也许有时这是你需要的，但是大部分情况下可能会引起未知的结果，故此倾向于 array 模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker build -t log-cleaner .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker run -v /var/log/myapplogs:/log_dir log-cleaner 365&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个 docker run 的 command 参数 365 成为了 ENTRYPOINT 的参数；故此如果把 365 改为 /bin/bash，是不会运行 bash &lt;/p&gt;
&lt;p&gt;shell的，而是把 ‘/bin/bash’ 作为 clean_log 的参数，这显然会报错 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;find: invalid argument &lt;code&gt;-name&amp;#39; to&lt;/code&gt;-ctime’&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;保证镜像中的软件版本-for-debian-based-images&quot;&gt;&lt;a href=&quot;#保证镜像中的软件版本-for-debian-based-images&quot; class=&quot;headerlink&quot; title=&quot;保证镜像中的软件版本 (for debian based images)&quot;&gt;&lt;/a&gt;保证镜像中的软件版本 (for debian based images)&lt;/h3&gt;&lt;p&gt;例如 nginx&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ apt-cache show nginx | grep ^Version:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Version: 1.4.6-1ubuntu3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;于是 Dockerfile 中可以指定版本&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;RUN apt-get -y install nginx=1.4.6-1ubuntu3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然而依赖库怎么办呢？&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ apt-cache --recurse depends nginx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过 –recurse 参数迭代检测依赖软件的版本，然后一一指定在 Dockerfile 中&lt;/p&gt;
&lt;p&gt;似乎有些麻烦啊？作者提供了一个容器来简化&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -ti dockerinpractice/get-versions vim&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN apt-get install -y \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vim=2:7.4.052-1ubuntu3 vim-common=2:7.4.052-1ubuntu3 \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vim-runtime=2:7.4.052-1ubuntu3 libacl1:amd64=2.2.52-1 \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;..........&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;看到，docker run 中指定需要处理的软件，容器运行之后会输出 vim 自身及所有依赖的软件的全部版本&lt;/p&gt;
&lt;h3 id=&quot;Dockerfile-中要替换多个文件中的文本？使用-perl-pie&quot;&gt;&lt;a href=&quot;#Dockerfile-中要替换多个文件中的文本？使用-perl-pie&quot; class=&quot;headerlink&quot; title=&quot;Dockerfile 中要替换多个文件中的文本？使用 perl -pie&quot;&gt;&lt;/a&gt;Dockerfile 中要替换多个文件中的文本？使用 perl -pie&lt;/h3&gt;&lt;p&gt;sed -i 也可以做类似的替换工作，那么为什么要使用 perl -pie 呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;天生可以作用于多个文件，一个文件即使处理失败也不会异常退出&lt;/li&gt;
&lt;li&gt;可以使用其他的符号代替通常的 ‘/‘ forward slashes 符号&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ perl -p -i -e &amp;apos;s/127\.0\.0\.1/0.0.0.0/g&amp;apos; *       &amp;lt;-- 通配符，处理多个文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ perl -p -i -e &amp;apos;s/\/usr\/share\/www/\/var\/www\/html/g&amp;apos; /etc/apache2/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ perl -p -i -e &amp;apos;s@/usr/share/www@/var/www/html/@g&amp;apos; /etc/apache2/*     &amp;lt;-- 这个和上面的一样，但是使用 @ 代替 /&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Flattening-images&quot;&gt;&lt;a href=&quot;#Flattening-images&quot; class=&quot;headerlink&quot; title=&quot;Flattening images&quot;&gt;&lt;/a&gt;Flattening images&lt;/h3&gt;&lt;p&gt;有时 Dockerfile 中会涉及一些隐私信息或者重要信息文件不想泄漏，那么在 Dockerfile 的最后几步把这些文件删除，有用么？&lt;/p&gt;
&lt;p&gt;没有！因为 Docker 中镜像是分层的，这些文件在比较老的 layers 中依旧存在，只是在删除之后的 layers 中不存在而已&lt;/p&gt;
&lt;p&gt;可以通过 docker history 命令查看 layers 信息，然后对老的 layers 调用 docker run 导出隐私文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker history mysecret&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;..........&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run 5b376ff3d7cd cat /tmp/secret_key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;My Big Secret&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如何解决这个问题？&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -d mysecret /bin/true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28cde380f0195b24b33e19e132e81a4f58d2f055a42fa8406e755b2ef283630f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker export 28cde380f | docker import - mysecret     &amp;lt;--- 先 export 在 import，去掉 layers 信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker history mysecret&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IMAGE CREATED CREATED BY SIZE             &amp;lt;--- 看到最后只有一个 layer了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fdbeae08751b 13 seconds ago 85.01 MB&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;让镜像更小之-Dockerfile-篇&quot;&gt;&lt;a href=&quot;#让镜像更小之-Dockerfile-篇&quot; class=&quot;headerlink&quot; title=&quot;让镜像更小之 Dockerfile 篇&quot;&gt;&lt;/a&gt;让镜像更小之 Dockerfile 篇&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;FROM 指令选择比较小的 base 镜像，虽然这意味着会少一些软件，只要保证需要的软件都在即可；甚至使用 BusyBox 或 Alpine&lt;/li&gt;
&lt;li&gt;镜像构建完成之前，删除不再需要的中间文件或者源软件安装包。需要指出，这些删除也需要使用 RUN 指令调用，而由于 Docker 的 layer 机制，每个 RUN 指令都会在最终的镜像上添加一个 copy-on-write layer，这会间接的增大最终镜像，故此，可能最终镜像看起来并没有减少&lt;/li&gt;
&lt;li&gt;紧跟前一条，显然我们需要减少 RUN 指令的个数。一种方法是把所需要的命令都放到同一个 RUN 指令中；另一种方法是把命令写到一个 shell 脚本中，然后在 Dockerfile 中 RUN 这个脚本即可&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Side Note 1. 把全部命令集中到同一个 RUN 指令中的方法，在优化了镜像空间的同时，牺牲了 Docker layer 带来的 build flexibility 以及 build time (layer cache)&lt;/p&gt;
&lt;p&gt;Side Note 2. 什么是 copy-on-write? 这是 Docker 最小化资源使用的重要方法，当多个容器都要读取同一个文件时，他们都会去包含该文件的 topmost layer 去找，也就是说，读取的是同一个文件，这就避免的把这个文件 copy 到每个容器中，极大的减小了容器的体积。只有当某个容器需要修改文件时，该文件才被 copy 到该容器中。&lt;/p&gt;
&lt;h3 id=&quot;让镜像更小之-Tricks-篇&quot;&gt;&lt;a href=&quot;#让镜像更小之-Tricks-篇&quot; class=&quot;headerlink&quot; title=&quot;让镜像更小之 Tricks 篇&quot;&gt;&lt;/a&gt;让镜像更小之 Tricks 篇&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;通常在 Dockerfile 中 RUN 的 apt-get/yum 等命令并不会做清理工作，那么我们这样做&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;build 镜像 =&amp;gt; 运行容器 =&amp;gt; 进容器删除不需要的文件 =&amp;gt; docker commit 为新的镜像 =&amp;gt; flatten 镜像 (export再import)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其中，删除部分通常包括&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dpkg -l | awk &amp;apos;&amp;#123;print $2&amp;#125;&amp;apos; 查看安装包&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apt-get purge -y $&amp;#123;unnecessary_package_name&amp;#125; (如果警告 potentially harmful，就返回继续其他 package)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apt-get autoremove &amp;amp;&amp;amp; apt-get clean  来清理 cache&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm -rf /usr/share/doc/* /usr/share/man/* /usr/share/info/*  来删除文档&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;find /var | grep &amp;apos;\.log$&amp;apos; | xargs rm -v  来删除 logs&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;让镜像更小之-Nuclear-武器篇-inotifywait&quot;&gt;&lt;a href=&quot;#让镜像更小之-Nuclear-武器篇-inotifywait&quot; class=&quot;headerlink&quot; title=&quot;让镜像更小之 Nuclear 武器篇 - inotifywait&quot;&gt;&lt;/a&gt;让镜像更小之 Nuclear 武器篇 - inotifywait&lt;/h3&gt;&lt;p&gt;nifty 工具可以监控哪些文件被容器引用，然后清除掉它们；这个方法有很大风险，尽量不要应用到生产环境；但是能让我们更好的了解系统&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ apt-get update &amp;amp;&amp;amp; apt-get install -y inotify-tools&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ inotifywait -r -d -o /tmp/inotifywaitout.txt /bin /etc /lib /sbin /var&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;-r 递归查看子目录； -o 输出文件&lt;/p&gt;
&lt;h3 id=&quot;使用-C-或者-Go-创建没有外部依赖的-Docker-镜像&quot;&gt;&lt;a href=&quot;#使用-C-或者-Go-创建没有外部依赖的-Docker-镜像&quot; class=&quot;headerlink&quot; title=&quot;使用 C 或者 Go 创建没有外部依赖的 Docker 镜像&quot;&gt;&lt;/a&gt;使用 C 或者 Go 创建没有外部依赖的 Docker 镜像&lt;/h3&gt;&lt;p&gt;C、Go 等编译语言可以制作 statically linked binary，比如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gcc -static hi.c -w -o hi&lt;/li&gt;
&lt;li&gt;CGO_ENABLED=0 go get -a -ldflags ‘-s’ -installsuffix cgo github.com/docker-in-practice/go-web-server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于没有外部依赖的镜像，可以使用 scratch (空镜像) 作为 base 镜像，ADD binary，然后 CMD/ENTRYPOINT binary 即可&lt;/p&gt;
&lt;h3 id=&quot;DEBIAN-FRONTEND-noninteractive-apt-get-install-qy-package&quot;&gt;&lt;a href=&quot;#DEBIAN-FRONTEND-noninteractive-apt-get-install-qy-package&quot; class=&quot;headerlink&quot; title=&quot;DEBIAN_FRONTEND=noninteractive apt-get install -qy ${package}&quot;&gt;&lt;/a&gt;DEBIAN_FRONTEND=noninteractive apt-get install -qy ${package}&lt;/h3&gt;&lt;p&gt;保证安装过程不提示输入&lt;/p&gt;
&lt;h3 id=&quot;利用-DockerHub-进行自动构建镜像&quot;&gt;&lt;a href=&quot;#利用-DockerHub-进行自动构建镜像&quot; class=&quot;headerlink&quot; title=&quot;利用 DockerHub 进行自动构建镜像&quot;&gt;&lt;/a&gt;利用 DockerHub 进行自动构建镜像&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;创建 Github (BitBucket) 项目，然后 clone 到本地。添加 Dockerfile 文件，提交到 Github&lt;/li&gt;
&lt;li&gt;创建 DockerHub 帐号，登录，把 DockerHub Repo 和 Git Repo 进行绑定，等待 DockerHub 自动构建镜像完毕&lt;/li&gt;
&lt;li&gt;之后，当再次更改 Dockerfile，DockerHub 都会自动检测到更新，并重新自动 build 镜像&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;和 Dockerfile 一起，可能还需要一个 bash_extra，配合 DockerHub 做一些配置工作&lt;/p&gt;
&lt;h3 id=&quot;针对-IO-intensive-的镜像通过-eatmydata-库来提高测试、开发环境的持续集成速度&quot;&gt;&lt;a href=&quot;#针对-IO-intensive-的镜像通过-eatmydata-库来提高测试、开发环境的持续集成速度&quot; class=&quot;headerlink&quot; title=&quot;针对 IO-intensive 的镜像通过 eatmydata 库来提高测试、开发环境的持续集成速度&quot;&gt;&lt;/a&gt;针对 IO-intensive 的镜像通过 eatmydata 库来提高测试、开发环境的持续集成速度&lt;/h3&gt;&lt;p&gt;应用把数据写入文件通常有两个方法：1. 把写操作告诉 OS，后者会 cahe 数据直到写入完成；2. 强制系统调用写文件&lt;/p&gt;
&lt;p&gt;eatmydata 库会让系统调用直接返回而不真正写入数据，在加快速度的同时，也会引起数据的 inconsistent，故此只用于测试或者开发环境&lt;/p&gt;
&lt;p&gt;方法是在镜像 (Dockerfile) 中安装 libeatmydata，然后在 docker run 的时候，在真正的命令前面加上 eatmydata&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;docker run -d mybuildautomation eatmydata /run_tests.sh&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;利用-Squid-搭建-Package-Cache-来加速构建过程&quot;&gt;&lt;a href=&quot;#利用-Squid-搭建-Package-Cache-来加速构建过程&quot; class=&quot;headerlink&quot; title=&quot;利用 Squid 搭建 Package Cache 来加速构建过程&quot;&gt;&lt;/a&gt;利用 Squid 搭建 Package Cache 来加速构建过程&lt;/h3&gt;&lt;p&gt;容器运行的时候如果要安装 package，会带来很大的网络开销；利用 Squid Proxy 缓存住已经下载的 package，加速构建速度&lt;/p&gt;
&lt;p&gt;Squid Proxy 安装在 Host 中，然后各容器直接向 Squid Proxy 下载 package，由后者代理下载或者下发已缓存的 package&lt;/p&gt;
&lt;p&gt;Debian&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# Host 安装 squid&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install squid-deb-proxy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 容器对应的镜像 Dockerfile 中设置 squid 代理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FROM debian&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN apt-get update -y &amp;amp;&amp;amp; apt-get install net-tools                 # 安装 net-tools 以使用 route&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN echo &amp;quot;Acquire::http::Proxy \&amp;quot;http://$( \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;route -n | awk &amp;apos;/^0.0.0.0/ &amp;#123;print $2&amp;#125;&amp;apos; \                           # 使用 route + awk 获取 Host ip 地址&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;):8000\&amp;quot;;&amp;quot;  &amp;gt; /etc/apt/apt.conf.d/30proxy                          # 把 HostIp:8000 配置到 apt 的代理配置文件中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN echo &amp;quot;Acquire::http::Proxy::ppa.launchpad.net DIRECT;&amp;quot; &amp;gt;&amp;gt; /etc/apt/apt.conf.d/30proxy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CMD [&amp;quot;/bin/bash&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意，这个 Host ip 是容器所处网络中的宿主机的 ip，而不是外部 ip；容器可以通过这个内网 ip，访问到宿主机上的 squid 服务&lt;/p&gt;
&lt;p&gt;CentOS&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 安装后需要调整 /etc/squid/squid.conf 文件，增大 cache 空间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cache_dir ufs /var/spool/ squid 10000 16 256.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Dockerfile 也是类似的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FROM centos:centos7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN yum update -y &amp;amp;&amp;amp; yum install -y net-tools&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN echo &amp;quot;proxy=http://$(route -n | awk &amp;apos;/^0.0.0.0/ &amp;#123;print $2&amp;#125;&amp;apos;):3128&amp;quot; &amp;gt;&amp;gt; /etc/yum.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN sed -i &amp;apos;s/^mirrorlist/#mirrorlist/&amp;apos; /etc/yum.repos.d/CentOS-Base.repo   # 避免使用 mirror&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN sed -i &amp;apos;s/^#baseurl/baseurl/&amp;apos; /etc/yum.repos.d/CentOS-Base.repo         # 只使用 baseurl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN rm -f /etc/yum/pluginconf.d/fastestmirror.conf                          # 不再需要 fastestmirror&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN yum update -y                                                           # 更新，保证上面生效&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CMD [&amp;quot;/bin/bash&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;前面都是说把 Squid 安装在 Host；可以参考&lt;a href=&quot;https://github.com/jpetazzo/squid-in-a-can&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文档&lt;/a&gt; 来把 Squid 安装在容器中&lt;/p&gt;
&lt;h3 id=&quot;容器获取宿主机的-IP&quot;&gt;&lt;a href=&quot;#容器获取宿主机的-IP&quot; class=&quot;headerlink&quot; title=&quot;容器获取宿主机的 IP&quot;&gt;&lt;/a&gt;容器获取宿主机的 IP&lt;/h3&gt;&lt;p&gt;当然，这个 ip 并不是外部看到的宿主机 ip，而是 from the point of view of the container，类似 172.27.0.1&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ip route | grep &amp;quot;default via&amp;quot; |awk &amp;apos;&amp;#123;print $3&amp;#125;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上一节中，我们还看到类似的指令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# install net-tools first&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;route -n |awk &amp;apos;/^0.0.0.0/ &amp;#123;print $2&amp;#125;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其实，这个宿主机的 IP 就是容器所处的 bridge 网络的网关，通过宿主机的 IP，容器可以访问宿主机的服务&lt;/p&gt;
&lt;h3 id=&quot;在不同-registry-之间转移-docker-镜像&quot;&gt;&lt;a href=&quot;#在不同-registry-之间转移-docker-镜像&quot; class=&quot;headerlink&quot; title=&quot;在不同 registry 之间转移 docker 镜像&quot;&gt;&lt;/a&gt;在不同 registry 之间转移 docker 镜像&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果有一个环境能同时访问两个不同的 registry，那么打个 tag 再 push 即可&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker pull $OLDREG/$MYIMAGE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker tag -f $OLDREG/$MYIMAGE $NEWREG/$MYIMAGE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker push $NEWREG/$MYIMAGE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker rmi $(docker images -q --filter dangling=true)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同上述情况，但是传递多个相似的镜像&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker 镜像有 layer 机制，docker push/pull 只会对共享的 layers 传输一次，这对传输共享很多 layers 的镜像很有利&lt;/p&gt;
&lt;p&gt;但是例如 ubuntu:14.04.1 和 ubuntu:14.04.2，完全没有共享任何 layers，但其实镜像中的文件非常相似；这种情况下，&lt;a href=&quot;https://github.com/docker-in-practice/dbup&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dbup&lt;/a&gt; 会更有帮助。它会开辟一个存储空间，检测镜像文件中的 duplication，对这些重复项只保存一次；也就是说，dbup 实现了一套和 docker 并行的，也是基于 deduplication 的存储。&lt;/p&gt;
&lt;p&gt;以 ubuntu:14.04.1 和 ubuntu:14.04.2 为例。首先在两个 registry 上都创建 dbup 环境&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ mkdir bup_pool    &amp;lt;-- 存储空间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ alias dbup=&amp;quot;docker run --rm \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v $(pwd)/bup_pool:/pool -v /var/run/docker.sock:/var/run/docker.sock \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dockerinpractice/dbup&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在源 registry&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker pull ubuntu:14.04.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker pull ubuntu:14.04.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ dbup save ubuntu:14.04.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ dbup save ubuntu:14.04.2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;rsync bup_pool 目录到目的 registry，然后执行&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ dbup load ubuntu:14.04.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ dbup load ubuntu:14.04.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker push ubuntu:14.04.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker push ubuntu:14.04.2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里 docker push / pull 的过程，没有因为 layer 机制减少数据量 (因为没有共享的 layers)；而在 dbup save /load 的过程中减少了数据量，更重要的在 rsync 网络传输的时候减少了数据量，因为 dbup 进行了 deduplication 的存储&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker 镜像保存为 TAR 文件传输&lt;ul&gt;
&lt;li&gt;export 把容器导出为 TAR，丢掉 layers 信息&lt;/li&gt;
&lt;li&gt;import 把 TAR 导入为镜像，没有 layers 信息&lt;/li&gt;
&lt;li&gt;save 把镜像保存为 TAR，保留 layers 信息&lt;/li&gt;
&lt;li&gt;load 把 TAR 加载为镜像，带着 layers 信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker save debian:7.3 | ssh example.com docker import -      &amp;lt;-- 最后面的&amp;quot;-&amp;quot; dash 符号表示从标准输入导入&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker save debian:7.3 | ssh example.com docker load          &amp;lt;-- load 不需要 dash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;SQLite-and-Proxy-setup-with-docker-compose-and-socat&quot;&gt;&lt;a href=&quot;#SQLite-and-Proxy-setup-with-docker-compose-and-socat&quot; class=&quot;headerlink&quot; title=&quot;SQLite and Proxy setup with docker compose and socat&quot;&gt;&lt;/a&gt;SQLite and Proxy setup with docker compose and socat&lt;/h3&gt;&lt;p&gt;首先创建一个 SQLite 和 Proxy 容器共享的镜像 Dockerfile&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FROM ubuntu:14.04&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN apt-get update &amp;amp;&amp;amp; apt-get -y install rlwrap sqlite3 socat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;EXPOSE 12345&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中 rlwrap 是用于美化 telnet 的命令行输入输出的，和整个构架无关&lt;/p&gt;
&lt;p&gt;ok，现在可以实现 docker-compose.yml 文件了&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;server:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  command: socat TCP-L:12345,fork,reuseaddr EXEC:&amp;apos;sqlite3 /opt/sqlite/db&amp;apos;,pty&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  build: .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  volumes:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - /tmp/sqlitedbs/test:/opt/sqlite/db&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;proxy:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  command: socat TCP-L:12346,fork,reuseaddr TCP:sqliteserver:12345&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  build: .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  links:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - server:sqliteserver&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ports:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - 12346:12346&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;要点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;server 和 proxy 都使用本目录下的 Dockerfile build 镜像&lt;/li&gt;
&lt;li&gt;server 容器监听 12345 端口的消息，收到消息后执行 sqlite3；&lt;/li&gt;
&lt;li&gt;proxy 容器 link 上 server 容器，监听 12346 端口，收到消息转发到 server 容器的 12345 端口 (继而执行 sqlite)&lt;/li&gt;
&lt;li&gt;server 和 proxy 的 TCP 参数 “fork,reuseaddr” 表示支持多用户访问，也即所谓多路复用机制 multiplexing&lt;/li&gt;
&lt;li&gt;server 通过 volumes mount 了 host 宿主的 /temp/sqlitedbs/ 目录，这样可以在宿主上创建 SQLite 数据库，由 server 容器管理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Proxy 模式优点是隐藏了 SQLite 服务，让真正的服务和网络连接的职责分离&lt;/p&gt;
&lt;p&gt;客户端访问类似下面：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ rlwrap telnet localhost 12346&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Trying 127.0.0.1...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Connected to localhost.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Escape character is &amp;apos;^]&amp;apos;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SQLite version 3.7.17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Enter &amp;quot;.help&amp;quot; for instructions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sqlite&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Some Notes on 《Manning Docker in Practice》&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://ijustloveses.github.io/categories/Docker/"/>
    
    
      <category term="笔记" scheme="http://ijustloveses.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Docker" scheme="http://ijustloveses.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>First Step on Scala</title>
    <link href="http://ijustloveses.github.io/2016/10/08/Learning_Scala/"/>
    <id>http://ijustloveses.github.io/2016/10/08/Learning_Scala/</id>
    <published>2016-10-08T01:37:14.000Z</published>
    <updated>2016-10-08T01:41:18.000Z</updated>
    
    <content type="html">&lt;p&gt;Some tips while learning scala&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Env-Setup&quot;&gt;&lt;a href=&quot;#Env-Setup&quot; class=&quot;headerlink&quot; title=&quot;Env Setup&quot;&gt;&lt;/a&gt;Env Setup&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;docker pull hseeberger/scala-sbt&lt;/p&gt;
&lt;p&gt;docker run -it –rm hseeberger/scala-sbt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后 docker exec 进到容器里面去；然而，发现该镜像竟然没有 vi，那么可以通过目录映射，在容器外面编辑，在容器内部调试运行&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;docker run -d -v ${absolute_path_in_host}:/root/workspace/scala docker.io/hseeberger/scala-sbt sleep infinity&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;How-to-run-a-scala-script&quot;&gt;&lt;a href=&quot;#How-to-run-a-scala-script&quot; class=&quot;headerlink&quot; title=&quot;How to run a scala script&quot;&gt;&lt;/a&gt;How to run a scala script&lt;/h1&gt;&lt;p&gt;参考 &lt;a href=&quot;http://www.scala-lang.org/documentation/getting-started.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Scala-命令行中交互运行&quot;&gt;&lt;a href=&quot;#Scala-命令行中交互运行&quot; class=&quot;headerlink&quot; title=&quot;Scala 命令行中交互运行&quot;&gt;&lt;/a&gt;Scala 命令行中交互运行&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; scala&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;This is a Scala shell.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Type in expressions to have them evaluated.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Type :help for more information.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; object HelloWorld &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     |   def main(args: Array[String]): Unit = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     |     println(&amp;quot;Hello, world!&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     |   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     | &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;defined module HelloWorld&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; HelloWorld.main(Array())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello, world!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt;:q&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;编译运行，类似-java&quot;&gt;&lt;a href=&quot;#编译运行，类似-java&quot; class=&quot;headerlink&quot; title=&quot;编译运行，类似 java&quot;&gt;&lt;/a&gt;编译运行，类似 java&lt;/h3&gt;&lt;p&gt;编译&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; scalac HelloWorld.scala&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;指定编译目录&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; scalac -d classes HelloWorld.Scala&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;运行&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; scala HelloWorld&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;指定 classpath 运行&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; scala -cp classes HelloWorld&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过 scala 命令运行的程序，比如是顶级 scala object，也即满足以下条件中的一个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;object 扩展自 App&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;object HelloWorld extends App &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println(&amp;quot;Hello, world!&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;含有 main 函数，如前面命令行交互模式中的那段程序&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;脚本化运行&quot;&gt;&lt;a href=&quot;#脚本化运行&quot; class=&quot;headerlink&quot; title=&quot;脚本化运行&quot;&gt;&lt;/a&gt;脚本化运行&lt;/h3&gt;&lt;p&gt;比如脚本文件 script.sh 如下&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#!/usr/bin/env scala&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;object HelloWorld extends App &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println(&amp;quot;Hello, world!&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HelloWorld.main(args)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;那么，命令行下直接调用&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; ./script.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Some tips while learning scala&lt;/p&gt;
    
    </summary>
    
      <category term="Scala" scheme="http://ijustloveses.github.io/categories/Scala/"/>
    
    
      <category term="Docker" scheme="http://ijustloveses.github.io/tags/Docker/"/>
    
      <category term="Scala" scheme="http://ijustloveses.github.io/tags/Scala/"/>
    
      <category term="sbt" scheme="http://ijustloveses.github.io/tags/sbt/"/>
    
  </entry>
  
  <entry>
    <title>Architecting HBase Applications</title>
    <link href="http://ijustloveses.github.io/2016/09/22/HBase-intro/"/>
    <id>http://ijustloveses.github.io/2016/09/22/HBase-intro/</id>
    <published>2016-09-22T05:08:00.000Z</published>
    <updated>2016-09-22T05:11:57.000Z</updated>
    
    <content type="html">&lt;p&gt;Notes on “Architecting HBase Applications”&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;HBase-Principles&quot;&gt;&lt;a href=&quot;#HBase-Principles&quot; class=&quot;headerlink&quot; title=&quot;HBase Principles&quot;&gt;&lt;/a&gt;HBase Principles&lt;/h1&gt;&lt;h3 id=&quot;Table-Layout&quot;&gt;&lt;a href=&quot;#Table-Layout&quot; class=&quot;headerlink&quot; title=&quot;Table Layout&quot;&gt;&lt;/a&gt;Table Layout&lt;/h3&gt;&lt;p&gt;HBase 有两类表：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Systems Tables - used internally by HBase to keep track of meta information like the table’s access control lists (ACLs), metadata for the tables and regions, namespaces, and so on.&lt;/li&gt;
&lt;li&gt;User Table - what you will create for your use cases.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Table Layout: HBase ==&amp;gt; column families (CF) ==&amp;gt; column (CQ) ==&amp;gt; Cell&lt;/p&gt;
&lt;p&gt;row 是由有相同 row key 的多个 columns 组成的，每个 column 加上对应的 row key 称为 cell&lt;/p&gt;
&lt;p&gt;每个 cell 可能有多个不同的版本，对应不同的时间戳，cell 还可以被称为 KeyValue 对儿&lt;/p&gt;
&lt;p&gt;于是，换句话说，row 又可以定义为具有相同 row key 的一组 cells&lt;/p&gt;
&lt;p&gt;和传统 RDBMSs 不同，HBase 是稀疏存储的，如果 row key 对应的某 column 的值不存在，那么在 HBase 中就确实不会存储这个 column，而不是存储 null&lt;/p&gt;
&lt;p&gt;在定义 HBase table 的时候，只需要指定表名和 column families，不需要指定 columns，因为 columns 完全是动态生成和配置的&lt;/p&gt;
&lt;p&gt;在 HBase 中，row keys 和 columns 都是 alphabetically 排序好的，无论是在内存中还是在表文件中，故此如果要按数字排序，需要把数字转为 byte representation&lt;/p&gt;
&lt;p&gt;比如 9 和 1234 直接排序的话，1234 会在前面；如果想按大小排序，需要把两个数字分别保存为 0x00 0x00 0x04 0xD2 和 0x00 0x00 0x00 0x09，这样 9 就在前面了&lt;/p&gt;
&lt;h3 id=&quot;Table-Storage&quot;&gt;&lt;a href=&quot;#Table-Storage&quot; class=&quot;headerlink&quot; title=&quot;Table Storage&quot;&gt;&lt;/a&gt;Table Storage&lt;/h3&gt;&lt;p&gt;每个 HBase 表包含若干 Regions，每个 Region 包含若干 column families，每个 column family 包含一个 Store&lt;/p&gt;
&lt;p&gt;Store 包含一个 memstore 和若干个 HFiles，每个 HFile 包含若干 blocks，每个 block 包含若干 cells&lt;/p&gt;
&lt;p&gt;HBase 为了提供 scalability 和快速随机访问，把表数据分布到多个 RegionServers(对应 Hadoop的 Workers) 来存储&lt;/p&gt;
&lt;p&gt;每个 Region 只存储一个特定范围的表数据，对应的 start row key 和  end row key 保存在 hbase:meta 表中&lt;/p&gt;
&lt;p&gt;在同一个 Region 中，不同 column families 的数据被存储在不同的文件中，可以被区别配置，那么具有相似访问模式和相似格式的数据应该被放在同一个 column family 中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可压缩的文本信息数据和不可压缩的图像数据应该放在不同的 column families 中&lt;/li&gt;
&lt;li&gt;多读少写的数据和多写少读的数据，应该放到不同的 column families 中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;滥用 column family 会导致生成过多的小文件 (前面说了不同 CF 的数据会放在不同文件中)，给 memstore 带来很大压力，同时会导致更多的 Compaction 压力 (后面介绍 Compaction)&lt;/p&gt;
&lt;p&gt;理论和 HBase 设计上，并没有限制 column family 的个数；然而实践上，column family 基本上不会多于 3 个；如果确实需要多个 column family，不妨把表拆成多个表来的更有效率&lt;/p&gt;
&lt;p&gt;每个 Region 上的 column family 都对应一个 Store，其中数据会存储在 memstore 中，如果 memstore 满了，就 flush 到若干 HFiles 中&lt;/p&gt;
&lt;p&gt;HFile 被存储在 HDFS 上，由若干 Blocks 组成，每个 Block 默认 size 为 64 KB，可以被压缩存储；Blocks 按类型顺序存储：Data Block -&amp;gt; Index Block -&amp;gt; BloomFilter Block -&amp;gt; Trailer Block&lt;/p&gt;
&lt;p&gt;最终，HBase 表数据的最小存储单位是 cell，其实 row / column 这些都是逻辑概念，真正存储的是 cells 的集合&lt;/p&gt;
&lt;p&gt;比如下面的 HBase 表&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Keys&lt;/th&gt;
&lt;th&gt;CF1/CQ1&lt;/th&gt;
&lt;th&gt;CF1/CQ2&lt;/th&gt;
&lt;th&gt;CF2/CQ1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;042&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;E&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;123&lt;/td&gt;
&lt;td&gt;I&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在 HBase 中存储为&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Keys&lt;/th&gt;
&lt;th&gt;CF&lt;/th&gt;
&lt;th&gt;CQ&lt;/th&gt;
&lt;th&gt;val&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;042&lt;/td&gt;
&lt;td&gt;CF1&lt;/td&gt;
&lt;td&gt;CQ1&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;042&lt;/td&gt;
&lt;td&gt;CF2&lt;/td&gt;
&lt;td&gt;CQ1&lt;/td&gt;
&lt;td&gt;E&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;123&lt;/td&gt;
&lt;td&gt;CF1&lt;/td&gt;
&lt;td&gt;CQ1&lt;/td&gt;
&lt;td&gt;I&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;123&lt;/td&gt;
&lt;td&gt;CF1&lt;/td&gt;
&lt;td&gt;CQ2&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;当然，实际上的 cell 实现比上面的样子要复杂的多，会附带有 key length / value length / key / value / tags / cf length / cf / cq / timestamp / key type 等等各种属性信息&lt;/p&gt;
&lt;h3 id=&quot;Internal-Table-Operations&quot;&gt;&lt;a href=&quot;#Internal-Table-Operations&quot; class=&quot;headerlink&quot; title=&quot;Internal Table Operations&quot;&gt;&lt;/a&gt;Internal Table Operations&lt;/h3&gt;&lt;h4 id=&quot;Compaction&quot;&gt;&lt;a href=&quot;#Compaction&quot; class=&quot;headerlink&quot; title=&quot;Compaction&quot;&gt;&lt;/a&gt;Compaction&lt;/h4&gt;&lt;p&gt;HBase 把接收到的操作数据保存到 memstore 中，当 memstore 满了，就会 flush 到 HFile 中，于是就会在 HDFS 中产生很多的小文件&lt;/p&gt;
&lt;p&gt;HBase 会时不时的选择一些小文件进行 Compaction，整合成大文件，在保持数据 locality 的同时提高查询效率，减少 keep track of 过多小文件的压力，同时还可以清除已经被删除的数据&lt;/p&gt;
&lt;p&gt;Compaction 分为 Minor 和 major 两类&lt;/p&gt;
&lt;p&gt;Minor Compaction 只对 Region 中的部分文件进行，默认为超过两个 HFiles 就会触发 Compaction，HBase 会按策略选取某些文件进行处理；如果选取了的全部 HFiles，那么就提升为 major&lt;/p&gt;
&lt;p&gt;Minor Compaction 可能会做一些不完全的 data cleanup，之所以不完全，是因为只对部分文件进行处理，故此信息不够全面&lt;/p&gt;
&lt;p&gt;比如执行 cell 的删除操作，比如选中的 HFiles 中有一个 cell 的版本为 3，标记为删除，同时还有相同的 cell 版本为 2，那么就会删除版本为 2 的 cell&lt;/p&gt;
&lt;p&gt;之所以是不完全的 cleanup，是因为版本为 1 的 cell 可能没有被选中，故不会被删除；也由此，版本为 3 的 cell 也不能删除，否则就丢掉了删除标识，版本为 1 的 cell 就不会再被删除了&lt;/p&gt;
&lt;p&gt;Major Compaction 则是 Region 中 (甚至 Table 中) 的 HFiles 全部被选中处理，既可以被手动触发，也可以被配置为 weekly 执行&lt;/p&gt;
&lt;p&gt;上例中的 cell 的全部 1~3 版本都可以在 Major Compaction 中被删除，达到完全 cleanup 的效果&lt;/p&gt;
&lt;h4 id=&quot;Splits-Auto-Sharding&quot;&gt;&lt;a href=&quot;#Splits-Auto-Sharding&quot; class=&quot;headerlink&quot; title=&quot;Splits (Auto-Sharding)&quot;&gt;&lt;/a&gt;Splits (Auto-Sharding)&lt;/h4&gt;&lt;p&gt;和 Compaction 正好相反，随着 Compaction 的进行，HFiles 越来越大，也会导致问题，因为越大就越难于解析，难于进一步的 Compaction 等等&lt;/p&gt;
&lt;p&gt;HBase 配置了一个 maximum HFile size，0.94 版本之后设置为 10 GB，只要 Region 中的某个 column family 的 HFile 超过这个阈值，就会引发 Splits，效果是把 Region 一分为二&lt;/p&gt;
&lt;p&gt;注意，如果 Region 中有多个 column family，而只有一个的 HFile 超过了阈值，那么 Splits 的时候会把所有 column family 都分成两份；新的 Regions 的信息会在 hbase:meta 中更新&lt;/p&gt;
&lt;p&gt;还记得 Region 和 hbase:meta 表记录着数据 row key 范围的上下界，故此 Splits 一定不会把同一个 row key 的不同 column 分到不同的 region 中，即 All the columns stay together&lt;/p&gt;
&lt;h4 id=&quot;Balancing&quot;&gt;&lt;a href=&quot;#Balancing&quot; class=&quot;headerlink&quot; title=&quot;Balancing&quot;&gt;&lt;/a&gt;Balancing&lt;/h4&gt;&lt;p&gt;Regions 会被 Split，系统会 Fail，新的 servers 会加到 cluster 中来，故此负载会有可能不再很好的分布在集群的 RegionServers 中&lt;/p&gt;
&lt;p&gt;于是 HBase 每 5 分钟会运行 load balancer 来协调负载；0.96 版本后，默认使用 StochasticLoadBalancer 来做 balancing&lt;/p&gt;
&lt;h1 id=&quot;HBase-Sizing-and-Tuning&quot;&gt;&lt;a href=&quot;#HBase-Sizing-and-Tuning&quot; class=&quot;headerlink&quot; title=&quot;HBase Sizing and Tuning&quot;&gt;&lt;/a&gt;HBase Sizing and Tuning&lt;/h1&gt;&lt;h3 id=&quot;Hadoop-Tuning&quot;&gt;&lt;a href=&quot;#Hadoop-Tuning&quot; class=&quot;headerlink&quot; title=&quot;Hadoop Tuning&quot;&gt;&lt;/a&gt;Hadoop Tuning&lt;/h3&gt;&lt;p&gt;YARN allows for specific tuning around the number of CPUs utilized and memory consumption. Three main functions to take into consideration are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;yarn.nodemanager.resource.cpu-vcores&lt;/p&gt;
&lt;p&gt;  Number of CPU cores that can be allocated for containers.&lt;/p&gt;
&lt;p&gt;  由于超线程 CPU 的存在， total vcores = physical-cores * 1.5&lt;/p&gt;
&lt;p&gt;  这样，配置值为 total vcores - HBase 1 vocre - DataNode 1 vcore - NodeManager 1 vcore - 操作系统 1 vcore - 其他可能的服务如 Impala/Solr 1 vcore&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;yarn.nodemanager.resource.memory-mb&lt;/p&gt;
&lt;p&gt;  Amount of physical memory, in megabytes, that can be allocated for containers.&lt;/p&gt;
&lt;p&gt;  It is important not to over allocate memory for the node: 操作系统 8-16 GB，DataNode 2-4 GB，HBase 12-24 GB，其他分给 YARN framework&lt;/p&gt;
&lt;p&gt;  HBase heap space 不要超过 24 GB，否则会导致 garbage collection 过程时间过长(超过 30s)，使得 RegionServer 在 zookeeper 中超时&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;yarn.scheduler.minimum-allocation-mb&lt;/p&gt;
&lt;p&gt;  The minimum allocation for every container request at the RM, in megabytes，推荐 1-2 GB&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;HBase-Tuning&quot;&gt;&lt;a href=&quot;#HBase-Tuning&quot; class=&quot;headerlink&quot; title=&quot;HBase Tuning&quot;&gt;&lt;/a&gt;HBase Tuning&lt;/h3&gt;&lt;h4 id=&quot;Write-heavy-workload&quot;&gt;&lt;a href=&quot;#Write-heavy-workload&quot; class=&quot;headerlink&quot; title=&quot;Write-heavy workload&quot;&gt;&lt;/a&gt;Write-heavy workload&lt;/h4&gt;&lt;p&gt;Two main ways to get data into HBase: either through API (Java, Thrift, REST) or by using bulk load.&lt;/p&gt;
&lt;p&gt;最重要的区别在于，API 的方法要使用 WAL (write ahead log) 和 memstore，而 bulk load 是一种 short-circuit 短路型写操作，绕过了 WAL 和 memstore&lt;/p&gt;
&lt;h5 id=&quot;API-driven-write-model&quot;&gt;&lt;a href=&quot;#API-driven-write-model&quot; class=&quot;headerlink&quot; title=&quot;API-driven write model&quot;&gt;&lt;/a&gt;API-driven write model&lt;/h5&gt;&lt;p&gt;我们说，HBase 最主要的瓶颈就在于 WAL followed by the memstore，以下使一些优化写操作性能的公式 (假设一个 Region 只有一个 CF)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To determine region count per node&lt;/p&gt;
&lt;p&gt;  availableMemstoreHeap = HBaseHeap * memstoreUpperLimit  (总 HBase 内存堆 乘以 可用于 memstore 的比例)&lt;/p&gt;
&lt;p&gt;  recommendedActiveRegionCount = availableMemstoreHeap / memstoreSize  (前提假设了 Region 只有一个 CF，而每个 CF 对应一个 memstore，故此，可供 memstore 使用的总内存 除以 单个 memstore 的容量即可)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To determine raw space per node&lt;/p&gt;
&lt;p&gt;  rawSpaceUsed = recommendedRegionCount &lt;em&gt; maxfileSize &lt;/em&gt; replicationFactor  (Region 数 &lt;em&gt; 每个 Region 的文件容量 &lt;/em&gt; 复制系数)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To determine the number of WALs to keep&lt;/p&gt;
&lt;p&gt;  numberOfWALs = availableMemstoreHeap / (WALSize * WALMultiplier)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如：假设节点 HBase heap = 16 GB， Memstore upper limit = 0.5， Memstore size = 128 MB， Maximum file size = 20 GB， WAL size = 128 MB， WAL rolling multiplier = 0.95， replicationFactor = 3&lt;/p&gt;
&lt;p&gt;availableMemstoreHeap = 16,384 MB * 0.5 = 8192 MB&lt;/p&gt;
&lt;p&gt;recommendedActiveRegionCount = 8192 MB / 128 MB = 64&lt;/p&gt;
&lt;p&gt;rawSpaceUsed = 64 &lt;em&gt; 20G &lt;/em&gt; 3 = 3.75 TB&lt;/p&gt;
&lt;p&gt;numberOfWALs = 8192 MB / (128 MB * 0.95) = 67&lt;/p&gt;
&lt;h5 id=&quot;Bulk-load-write-model&quot;&gt;&lt;a href=&quot;#Bulk-load-write-model&quot; class=&quot;headerlink&quot; title=&quot;Bulk load write model&quot;&gt;&lt;/a&gt;Bulk load write model&lt;/h5&gt;&lt;p&gt;再次模型下，HFile 是在 MapRedue 的 Reduce 阶段被生成，然后使用 completebulkload 工具导入到 HBase 中&lt;/p&gt;
&lt;h4 id=&quot;Read-heavy-workload&quot;&gt;&lt;a href=&quot;#Read-heavy-workload&quot; class=&quot;headerlink&quot; title=&quot;Read-heavy workload&quot;&gt;&lt;/a&gt;Read-heavy workload&lt;/h4&gt;&lt;p&gt;The primary settings that need to be tweaked are the same as write workloads&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lowering memstore settings&lt;/li&gt;
&lt;li&gt;raising the block cache to allow for more data to be stored in memory&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HBase 0.96 引入了 bucket cache 的概念，允许数据同时在内存和低延迟的 disk (SSD/flash cards) 中保存&lt;/p&gt;
&lt;h1 id=&quot;Table-Design&quot;&gt;&lt;a href=&quot;#Table-Design&quot; class=&quot;headerlink&quot; title=&quot;Table Design&quot;&gt;&lt;/a&gt;Table Design&lt;/h1&gt;&lt;h3 id=&quot;一些表设计中的相关考虑&quot;&gt;&lt;a href=&quot;#一些表设计中的相关考虑&quot; class=&quot;headerlink&quot; title=&quot;一些表设计中的相关考虑&quot;&gt;&lt;/a&gt;一些表设计中的相关考虑&lt;/h3&gt;&lt;h4 id=&quot;Keys-Distribution&quot;&gt;&lt;a href=&quot;#Keys-Distribution&quot; class=&quot;headerlink&quot; title=&quot;Keys Distribution&quot;&gt;&lt;/a&gt;Keys Distribution&lt;/h4&gt;&lt;p&gt;HBase 中数据的 key 往往使用业务逻辑中的某些字段，而有时这些字段可能并不均匀分布，这导致了 hotspots 现象，引起负载不平衡，影响效率&lt;/p&gt;
&lt;p&gt;一种解决方法是采用非局部敏感的 Hash (这样，即使相似的 key 也会产生很大差异的 hash 值)，然后使用 hash 结果来做 key&lt;/p&gt;
&lt;h4 id=&quot;Compression&quot;&gt;&lt;a href=&quot;#Compression&quot; class=&quot;headerlink&quot; title=&quot;Compression&quot;&gt;&lt;/a&gt;Compression&lt;/h4&gt;&lt;p&gt;前面说过，HBase 数据的 HFile 是以 Block 为单位存储的，每个 Block 默认 64 KB，不压缩。实践中发现，对 Block 压缩存储总是会提升性能和效率&lt;/p&gt;
&lt;p&gt;通常的压缩算法有 LZO, GZ, SNOOPY, LZ4；每种算法各有优缺点，比如 GZ 压缩比高，但是操作更占用资源，相反的 SNOOPY 压缩比不高，但是压缩、解压速度都很快&lt;/p&gt;
&lt;h4 id=&quot;Data-block-encoding&quot;&gt;&lt;a href=&quot;#Data-block-encoding&quot; class=&quot;headerlink&quot; title=&quot;Data block encoding&quot;&gt;&lt;/a&gt;Data block encoding&lt;/h4&gt;&lt;p&gt;这是 HBase 的一个属性，用于对 keys 进行编码存储，具体来说就是如果基于前面已保存的 keys 来编码当前 key&lt;/p&gt;
&lt;p&gt;常用算法为 FAST_DIFF，让 HBase 只存储当前 key 和 previous key 之间的 difference&lt;/p&gt;
&lt;p&gt;还记得最细粒度下 HBase 中存储的其实是 cell，或者说一个 (key, cf, cq, val) 的四元组。那么对于一个有很多个字段 (cells) 的 row 记录，只存储 difference 会减少很多存储空间&lt;/p&gt;
&lt;h4 id=&quot;Bloom-filter&quot;&gt;&lt;a href=&quot;#Bloom-filter&quot; class=&quot;headerlink&quot; title=&quot;Bloom filter&quot;&gt;&lt;/a&gt;Bloom filter&lt;/h4&gt;&lt;p&gt;Bloom filter 可以是 False positive (hash conflict)，但是不会 False Negative。这样，可以在查询的时候，先以很小代价判断 key 是否存在，减少无谓的 I/O 开销&lt;/p&gt;
&lt;h4 id=&quot;Presplitting&quot;&gt;&lt;a href=&quot;#Presplitting&quot; class=&quot;headerlink&quot; title=&quot;Presplitting&quot;&gt;&lt;/a&gt;Presplitting&lt;/h4&gt;&lt;p&gt;Presplitting 是指让 HBase 在创建 table 的时候，预先把 table 分开为多个 Regions 存储，保证初始化时候的负载就分布在多个 Regions 上，避免形成 hotspots&lt;/p&gt;
&lt;h4 id=&quot;建表实例&quot;&gt;&lt;a href=&quot;#建表实例&quot; class=&quot;headerlink&quot; title=&quot;建表实例&quot;&gt;&lt;/a&gt;建表实例&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# /usr/local/hbase/bin/hbase shell&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hbase(main):001:0&amp;gt; create &amp;apos;sensors&amp;apos;, &amp;#123;NUMREGIONS =&amp;gt; 6, SPLITALGO =&amp;gt; &amp;apos;HexStringSplit&amp;apos;&amp;#125;, &amp;#123;NAME =&amp;gt; &amp;apos;v&amp;apos;, COMPRESSION =&amp;gt; &amp;apos;SNAPPY&amp;apos;, BLOOMFILTER =&amp;gt; &amp;apos;NONE&amp;apos;, DATA_BLOCK_ENCODING =&amp;gt; &amp;apos;FAST_DIFF&amp;apos;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ERROR: org.apache.hadoop.hbase.DoNotRetryIOException: java.lang.RuntimeException: native snappy library not available&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;看到，一些压缩算法需要预先安装对应的包才能工作，比如 SNOOPY&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;那么，去掉 COMPRESSION&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hbase(main):002:0&amp;gt; create &amp;apos;sensors&amp;apos;, &amp;#123;NUMREGIONS =&amp;gt; 6, SPLITALGO =&amp;gt; &amp;apos;HexStringSplit&amp;apos;&amp;#125;, &amp;#123;NAME =&amp;gt; &amp;apos;v&amp;apos;, BLOOMFILTER =&amp;gt; &amp;apos;NONE&amp;apos;, DATA_BLOCK_ENCODING =&amp;gt; &amp;apos;FAST_DIFF&amp;apos;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; Hbase::Table - sensors&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hbase(main):009:0&amp;gt; describe &amp;apos;sensors&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Table sensors is ENABLED&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sensors&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;COLUMN FAMILIES DESCRIPTION&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;NAME =&amp;gt; &amp;apos;v&amp;apos;, DATA_BLOCK_ENCODING =&amp;gt; &amp;apos;FAST_DIFF&amp;apos;, BLOOMFILTER =&amp;gt; &amp;apos;NONE&amp;apos;, REPLICATION_SCOPE =&amp;gt; &amp;apos;0&amp;apos;, VERSIONS =&amp;gt; &amp;apos;1&amp;apos;, COMPRESSION =&amp;gt; &amp;apos;NONE&amp;apos;, MIN&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_VERSIONS =&amp;gt; &amp;apos;0&amp;apos;, TTL =&amp;gt; &amp;apos;FOREVER&amp;apos;, KEEP_DELETED_CELLS =&amp;gt; &amp;apos;FALSE&amp;apos;, BLOCKSIZE =&amp;gt; &amp;apos;65536&amp;apos;, IN_MEMORY =&amp;gt; &amp;apos;false&amp;apos;, BLOCKCACHE =&amp;gt; &amp;apos;true&amp;apos;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hbase(main):010:0&amp;gt; put &amp;apos;sensors&amp;apos;, &amp;apos;key1&amp;apos;, &amp;apos;v:&amp;apos;, &amp;apos;val1&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 row(s) in 0.0200 seconds&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hbase(main):022:0&amp;gt; put &amp;apos;sensors&amp;apos;, &amp;apos;key2&amp;apos;, &amp;apos;v:f1&amp;apos;, &amp;apos;val2&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 row(s) in 0.0220 seconds&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hbase(main):024:0* scan &amp;apos;sensors&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ROW                                  COLUMN+CELL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; key1                                column=v:, timestamp=1473144773543, value=val1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; key2                                column=v:f1, timestamp=1473144907953, value=val2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 row(s) in 0.0790 seconds&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;NUMREGIONS 和 SPLITALGO 仅用于创建 table，而并不保存在 table 的 metadata里。故此，一旦创建了 table，那么就无法再去获取这两个参数的信息了&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Notes on “Architecting HBase Applications”&lt;/p&gt;
    
    </summary>
    
      <category term="HBase" scheme="http://ijustloveses.github.io/categories/HBase/"/>
    
    
      <category term="Architect" scheme="http://ijustloveses.github.io/tags/Architect/"/>
    
      <category term="HBase" scheme="http://ijustloveses.github.io/tags/HBase/"/>
    
      <category term="NoSql" scheme="http://ijustloveses.github.io/tags/NoSql/"/>
    
  </entry>
  
  <entry>
    <title>Microservices in Go - Part I.</title>
    <link href="http://ijustloveses.github.io/2016/08/25/Microservice-in-go-part1/"/>
    <id>http://ijustloveses.github.io/2016/08/25/Microservice-in-go-part1/</id>
    <published>2016-08-25T07:47:13.000Z</published>
    <updated>2016-08-25T07:56:13.000Z</updated>
    
    <content type="html">&lt;p&gt;Metrics in Go&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;初步搭建可运行环境-–-metrics-server&quot;&gt;&lt;a href=&quot;#初步搭建可运行环境-–-metrics-server&quot; class=&quot;headerlink&quot; title=&quot;初步搭建可运行环境  – metrics_server&quot;&gt;&lt;/a&gt;初步搭建可运行环境  – metrics_server&lt;/h3&gt;&lt;h5 id=&quot;influxdb-amp-grafana-docker-containers&quot;&gt;&lt;a href=&quot;#influxdb-amp-grafana-docker-containers&quot; class=&quot;headerlink&quot; title=&quot;influxdb &amp;amp; grafana docker containers&quot;&gt;&lt;/a&gt;influxdb &amp;amp; grafana docker containers&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;influxdb - json timeseries database&lt;/li&gt;
&lt;li&gt;grafana - charts&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run --name influxdb -d -p 8083:8083 -p 8086:8086 -e PRE_CREATE_DB=&amp;quot;metric&amp;quot; tutum/influxdb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run --name grafana -d --link influxdb:influxdb &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -e INFLUXDB_HOST=influxdb &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -e INFLUXDB_PORT=8086 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -e INFLUXDB_NAME=metric         &amp;lt;--- 上面 influxdb container 启动时，预创建数据库 metric&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -e INFLUXDB_USER=root &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -e INFLUXDB_PASS=root &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -p 3300:80 hyperworks/grafana&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker images&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker.io/tutum/influxdb                           latest              5d606dc14680        6 months ago        275.2 MB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker.io/hyperworks/grafana                       latest              c2d5108b41f0        15 months ago       260 MB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker ps -a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CONTAINER ID        IMAGE                COMMAND             CREATED             STATUS              PORTS                                            NAMES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;461158dad923        hyperworks/grafana   &amp;quot;/run.sh&amp;quot;           6 hours ago         Up 6 hours          0.0.0.0:3300-&amp;gt;80/tcp                             grafana&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48681f0bddd1        tutum/influxdb       &amp;quot;/run.sh&amp;quot;           6 hours ago         Up 6 hours          0.0.0.0:8083-&amp;gt;8083/tcp, 0.0.0.0:8086-&amp;gt;8086/tcp   influxdb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://10.88.147.128:8083/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://10.88.147.128:8083/&lt;/a&gt; 可以看到 influxdb 的配置，以及运行一些查询和操作；另看到 influxdb 版本：v0.9.6&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://10.88.147.128:3300/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://10.88.147.128:3300/&lt;/a&gt; 可以看到 grafana 的登录页面，可以使用 admin/admin 登录；另看到 grafana 版本：version: 2.0.2&lt;/p&gt;
&lt;h5 id=&quot;golang-docker-container&quot;&gt;&lt;a href=&quot;#golang-docker-container&quot; class=&quot;headerlink&quot; title=&quot;golang docker container&quot;&gt;&lt;/a&gt;golang docker container&lt;/h5&gt;&lt;p&gt;为了找个小一些的，找了 go-1.7.0 + alpine&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker pull golang:1.7.0-alpine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker images&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker.io/golang                                   1.7.0-alpine        52493611af1e        7 days ago          241.1 MB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -it --rm --name metrics_server -p 3000:3000 --link influxdb:influxdb golang:1.7.0-alpine sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;查看环境&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/go # go env&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GOARCH=&amp;quot;amd64&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GOHOSTARCH=&amp;quot;amd64&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GOHOSTOS=&amp;quot;linux&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GOOS=&amp;quot;linux&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GOPATH=&amp;quot;/go&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GOROOT=&amp;quot;/usr/local/go&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GOTOOLDIR=&amp;quot;/usr/local/go/pkg/tool/linux_amd64&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CC=&amp;quot;gcc&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GOGCCFLAGS=&amp;quot;-fPIC -m64 -pthread -fmessage-length=0&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CXX=&amp;quot;g++&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CGO_ENABLED=&amp;quot;1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;试试看下载安装一个 go model&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/go # go get github.com/GeertJohan/go-metrics/influxdb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;go: missing Git command. See https://golang.org/s/gogetcmd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;失败了，原因是没有安装 git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;关闭容器，然后去掉 --rm 命令，再次启动&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -it --name metrics_server -p 3000:3000 --link influxdb:influxdb golang:1.7.0-alpine sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;安装 git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/go # apk add --no-cache git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/main/x86_64/APKINDEX.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/community/x86_64/APKINDEX.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(1/5) Installing libssh2 (1.7.0-r0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(2/5) Installing libcurl (7.50.1-r0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(3/5) Installing expat (2.1.1-r1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(4/5) Installing pcre (8.38-r1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(5/5) Installing git (2.8.3-r0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Executing busybox-1.24.2-r9.trigger&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OK: 22 MiB in 17 packages&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;退出，然后使用 docker commit 把安装好 git 的容器提交为镜像&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker commit metrics_server golang:1.7.0-alpine-git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker images&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;golang                                             1.7.0-alpine-git    4c832d88245a        11 seconds ago      258.1 MB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker.io/golang                                   1.7.0-alpine        52493611af1e        7 days ago          241.1 MB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;............&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;最后善后，把未 rm 的 metrics_server 容器 rm 掉&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker rm metrics_server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;本地创建-HttpServer-测试项目-metrics-server-go&quot;&gt;&lt;a href=&quot;#本地创建-HttpServer-测试项目-metrics-server-go&quot; class=&quot;headerlink&quot; title=&quot;本地创建 HttpServer 测试项目 metrics_server.go&quot;&gt;&lt;/a&gt;本地创建 HttpServer 测试项目 metrics_server.go&lt;/h5&gt;&lt;p&gt;目录 /home/vagrant/workspace/myproj/microservices_in_go/&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ cd /home/vagrant/workspace/myproj&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ mkdir microservices_in_go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ cd microservices_in_go/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Http 服务器代码，这里只是搭建一个 metric 数据定时导入 influxdb 的框架，然而并没有添加任何事件的监控&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ vim metrics_server.go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;package main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;github.com/GeertJohan/go-metrics/influxdb&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;github.com/rcrowley/go-metrics&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;net/http&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;time&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func MetricToInfluxDB(d time.Duration) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    go influxdb.Influxdb(metrics.DefaultRegistry, d, &amp;amp;influxdb.Config&amp;#123;    ==&amp;gt;  goroutine to monitor metric and save into influxdb every d duration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Host: &amp;quot;influxdb:8086&amp;quot;,                                            ==&amp;gt;  这个 go 脚本会放到容器中运行，而这个容器会 link influxdb 容器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Database: &amp;quot;metric&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Username: &amp;quot;root&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Password: &amp;quot;root&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func IndexHandler(w http.ResponseWriter, r *http.Request) &amp;#123;          ==&amp;gt;  handler to handle http request&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    w.WriteHeader(http.StatusOK)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    w.Write([]byte(&amp;quot;Hello World!&amp;quot;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MetricToInfluxDB(time.Second * 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    http.HandleFunc(&amp;quot;/&amp;quot;, IndexHandler)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    http.ListenAndServe(&amp;quot;:3000&amp;quot;, nil)                               ==&amp;gt; 外部可以通过 10.88.147.128 访问&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;在-docker-中启动-golang-容器运行-HttpServer&quot;&gt;&lt;a href=&quot;#在-docker-中启动-golang-容器运行-HttpServer&quot; class=&quot;headerlink&quot; title=&quot;在 docker 中启动 golang 容器运行 HttpServer&quot;&gt;&lt;/a&gt;在 docker 中启动 golang 容器运行 HttpServer&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -it --rm --name metrics_server &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -p 3000:3000                      ==&amp;gt; 为了容器外访问 http server 的端口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    --link influxdb:influxdb          ==&amp;gt; 为了访问 influxdb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -v $&amp;#123;PWD&amp;#125;:/go                     ==&amp;gt; 把当前目录映射到容器的默认初始目录 /go，目的是可以访问前面实现的 metrics_server.go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    golang:1.7.0-alpine-git sh        ==&amp;gt; 使用刚刚安装好 git 的 golang 镜像&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/go # go get github.com/GeertJohan/go-metrics/influxdb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/go # go get github.com/rcrowley/go-metrics&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/go # ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;metrics_server.go  pkg                src&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/go # go run metrics_server.go  报错！&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2016/08/25 01:41:57 Server returned (404): 404 page not found&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2016/08/25 01:41:57 Server returned (404): 404 page not found&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2016/08/25 01:41:57 Server returned (404): 404 page not found&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2016/08/25 01:41:57 Server returned (404): 404 page not found&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...............&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;退出容器，容器由于 --rm 选项自动清除&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;经 google，发现 &lt;a href=&quot;https://www.brianchristner.io/how-to-setup-docker-monitoring/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to setup Docker Monitoring&lt;/a&gt; 评论区中有人说这是 influxdb:0.9 的问题&lt;/p&gt;
&lt;p&gt;故此尝试调整到 influxdb:0.8.8&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;关闭已有 0.9.6 的 influxdb 容器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker rm -f influxdb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;尝试运行 0.8.8 版本的 influxdb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run --name influxdb -d -p 8083:8083 -p 8086:8086 -e PRE_CREATE_DB=&amp;quot;metric&amp;quot; tutum/influxdb:0.8.8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;然后再次运行 golang with git 容器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -it --rm --name metrics_server -p 3000:3000 --link influxdb:influxdb -v $&amp;#123;PWD&amp;#125;:/go golang:1.7.0-alpine-git sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这次不需要再 go get github models 了，因为上次 get 到的新 models 都放到当前目录的 pkg &amp;amp; src 子目录下，而这个目录是通过 -v 和宿主连接，自动 persist&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/go # go run metrics_server.go&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这次 http server 不再报错了&lt;/p&gt;
&lt;p&gt;然后在其他 shell 执行  $ curl 10.88.147.128:3000，看到输出  Hello World!  说明 Http Server 正常运行； 浏览器上也可以正常看到输出 Hello World! 了&lt;/p&gt;
&lt;p&gt;再次查看 influxdb web 管理界面，使用 root/root 可以正常登录，并看到 metric 数据库已经在列&lt;/p&gt;
&lt;p&gt;善后，清除不好用的 influxdb 0.9.6 版本： $ docker rmi ${label of influxdb:latest}&lt;/p&gt;
&lt;p&gt;至此，框架已经搭好，后面就是看看如何通过这个框架添加对事件的监控和统计了&lt;/p&gt;
&lt;h3 id=&quot;监控事件&quot;&gt;&lt;a href=&quot;#监控事件&quot; class=&quot;headerlink&quot; title=&quot;监控事件&quot;&gt;&lt;/a&gt;监控事件&lt;/h3&gt;&lt;h5 id=&quot;HttpServer-中添加事件&quot;&gt;&lt;a href=&quot;#HttpServer-中添加事件&quot; class=&quot;headerlink&quot; title=&quot;HttpServer 中添加事件&quot;&gt;&lt;/a&gt;HttpServer 中添加事件&lt;/h5&gt;&lt;p&gt;修改 metrics_server.go 中的代码&lt;/p&gt;
&lt;p&gt;定义两个全局变量，分别代表首页访问次数，以及首页响应时间&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var requestCounter metrics.Counter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var responseTime metrics.Timer&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;IndexHandler() 函数中，加入两个全局变量的更新操作&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;requestCounter.Inc(1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;startReqTime := time.Now()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;defer responseTime.Update(time.Since(startReqTime))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;显然， requestCounter 比较简单，每次访问直接 inc(1) 即可； responseTime 这个用到了 defer，这样在函数结束之前会根据函数开始时的时间来计算响应时间&lt;/p&gt;
&lt;p&gt;main() 函数中，初始化并注册事件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;requestCounter = metrics.NewCounter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;metrics.Register(&amp;quot;count_request&amp;quot;, requestCounter)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;responseTime = metrics.NewTimer()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;metrics.Register(&amp;quot;response_time&amp;quot;, responseTime)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MetricToInfluxDB(time.Second * 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;看到，事件注册之后，调用 MetricToInfluxDB 函数，这个函数会把 metrics.DefaultRegistry 中注册的事件数据传到 influxdb 的对应数据库 metric 中&lt;/p&gt;
&lt;h5 id=&quot;启动-HttpServer&quot;&gt;&lt;a href=&quot;#启动-HttpServer&quot; class=&quot;headerlink&quot; title=&quot;启动 HttpServer&quot;&gt;&lt;/a&gt;启动 HttpServer&lt;/h5&gt;&lt;p&gt;这次在 docker run 中直接调用 go run metrics_server.go, 而不是像以前那样只是调用 sh&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;方法一：去掉 --rm，加上 -d，这样启动的容器在后台运行；之所以要去掉 --rm，是因为它和 -d 不兼容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -it -d --name metrics_server -p 3000:3000 --link influxdb:influxdb -v $&amp;#123;PWD&amp;#125;:/go golang:1.7.0-alpine-git go run metrics_server.go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;方法二：保留 --rm，不使用 -d，这样容器将直接在前台运行，整个 shell 阻塞住，一直等待接收请求&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -it --rm --name metrics_server -p 3000:3000 --link influxdb:influxdb -v $&amp;#123;PWD&amp;#125;:/go golang:1.7.0-alpine-git go run metrics_server.go&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里采用方法一，于是可以直接在同一个 shell 中查询容器状态&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker ps -a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CONTAINER ID        IMAGE                     COMMAND                  CREATED             STATUS              PORTS                                                      NAMES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3bcec22768d0        golang:1.7.0-alpine-git   &amp;quot;go run metrics_serve&amp;quot;   14 seconds ago      Up 13 seconds       0.0.0.0:3000-&amp;gt;3000/tcp                                     metrics_server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;db0eb6d58f8d        tutum/influxdb:0.8.8      &amp;quot;/run.sh&amp;quot;                3 hours ago         Up 3 hours          0.0.0.0:8083-&amp;gt;8083/tcp, 0.0.0.0:8086-&amp;gt;8086/tcp, 8084/tcp   influxdb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;461158dad923        hyperworks/grafana        &amp;quot;/run.sh&amp;quot;                29 hours ago        Up 29 hours         0.0.0.0:3300-&amp;gt;80/tcp                                       grafana&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;测试事件监控效果&quot;&gt;&lt;a href=&quot;#测试事件监控效果&quot; class=&quot;headerlink&quot; title=&quot;测试事件监控效果&quot;&gt;&lt;/a&gt;测试事件监控效果&lt;/h5&gt;&lt;p&gt;浏览器中连续访问 &lt;a href=&quot;http://10.88.147.128:3000/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://10.88.147.128:3000/&lt;/a&gt; 6 次&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;influxdb 网站 http://10.88.147.128:8083/ ，首页 Databases 部分，点击 metric 对应的 Explore Data，在查询页面中运行 **list series**，得到全部 series&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;list_series_result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;time  name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0     count_request.count&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0     response_time.timer&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;查询页面中查询 select value from response_time.timer，报错：ERROR: Field value doesn’t exist in series response_time.timer&lt;/p&gt;
&lt;p&gt;查询 select * from response_time.timer 得到一些图和表，发现 fields 中没有 value 字段，有的是 count 字段  (这个查询比较慢，要耐心 …)&lt;/p&gt;
&lt;p&gt;查询 select count from response_time.timer 得到 count 字段相关的图和表；下面去 grafana 中查看&lt;/p&gt;
&lt;p&gt;grafana 网站 &lt;a href=&quot;http://10.88.147.128:3300/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://10.88.147.128:3300/&lt;/a&gt; ，&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Home -&amp;gt; New (to create new dashboard) 进入新的 dashboard 页面&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;点击左边的小条处 -&amp;gt; Add Panel -&amp;gt; Graph -&amp;gt; Save Dashboard&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Graph 中间上方 &amp;quot;no title (click here)&amp;quot; 点击 -&amp;gt; Edit 打开 Edit form&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;选中 Metric Tab 页， Series 框输入 response_time.timer，select 框中选择 mean(count)，保持其他选项不变 (比如 group by time = 30s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;得到时序图，哈哈哈&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;`&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同理还可以查看 count_request.count 相关的图表和数据，从略&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Metrics in Go&lt;/p&gt;
    
    </summary>
    
      <category term="Microservice" scheme="http://ijustloveses.github.io/categories/Microservice/"/>
    
    
      <category term="笔记" scheme="http://ijustloveses.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Docker" scheme="http://ijustloveses.github.io/tags/Docker/"/>
    
      <category term="Microservice" scheme="http://ijustloveses.github.io/tags/Microservice/"/>
    
      <category term="Go" scheme="http://ijustloveses.github.io/tags/Go/"/>
    
      <category term="Influxdb" scheme="http://ijustloveses.github.io/tags/Influxdb/"/>
    
      <category term="Grafana" scheme="http://ijustloveses.github.io/tags/Grafana/"/>
    
      <category term="Metrics" scheme="http://ijustloveses.github.io/tags/Metrics/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes Microservices with Docker</title>
    <link href="http://ijustloveses.github.io/2016/07/27/Kubernetes-microservices-with-docker/"/>
    <id>http://ijustloveses.github.io/2016/07/27/Kubernetes-microservices-with-docker/</id>
    <published>2016-07-27T06:18:13.000Z</published>
    <updated>2016-07-27T06:18:54.000Z</updated>
    
    <content type="html">&lt;p&gt;Some tips on Kubernetes Microservices with Docker&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Why-Kubernetes&quot;&gt;&lt;a href=&quot;#Why-Kubernetes&quot; class=&quot;headerlink&quot; title=&quot;Why Kubernetes&quot;&gt;&lt;/a&gt;Why Kubernetes&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;便于把多个协作的应用整合为服务&lt;/li&gt;
&lt;li&gt;便于 Scale 服务&lt;/li&gt;
&lt;li&gt;解决 Docker 跨机器容器之间的通讯问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Docker 的 Image / Container 不说了&lt;/li&gt;
&lt;li&gt;Node 就是不同的物理/虚拟机器，同分布式中的概念&lt;/li&gt;
&lt;li&gt;Pods 就是相互协作并提供服务的若干容器的组合，Pod 内的容器运行在同一个 Minion 上，视为统一管理单元，共享 volumes &amp;amp; network &amp;amp; ip&lt;/li&gt;
&lt;li&gt;RC (Replication Controllers) 控制 Pods 的 replica 数量，实现 Rescheduling &amp;amp; Scaling.&lt;/li&gt;
&lt;li&gt;同一个 Node 同一个 Pods 的不同 replica 分别有各自的 network，&lt;strong&gt;提供完全相同的功能&lt;/strong&gt; ；看起来就像是多个不同 Nodes 上分别启动了同一个 Pods&lt;/li&gt;
&lt;li&gt;Service 是真实应用服务的抽象，是由 RC 暴露出来的 Endpoints，同一个 Pods 的不同 Replica 分别有各自的 Endpoint&lt;/li&gt;
&lt;li&gt;Pods / RC / Service 通过标签 Labels (key/value pair in nature) 相互识别&lt;/li&gt;
&lt;li&gt;Kubernetes 创建和管理服务的方式有两种：命令式和声明式；声明式采用配置文件，更灵活，更可控，功能也更多&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;集群中使用-Kubernates&quot;&gt;&lt;a href=&quot;#集群中使用-Kubernates&quot; class=&quot;headerlink&quot; title=&quot;集群中使用 Kubernates&quot;&gt;&lt;/a&gt;集群中使用 Kubernates&lt;/h3&gt;&lt;p&gt;先说下 Docker 的 network: 在 1.9 之后，Docker 通过 network 可以使得同一个 Node 节点上的多个容器通过其名字相互识别，相当于多个容器各自有不同的 ip&lt;/p&gt;
&lt;p&gt;但是，多个 Nodes 上启动多个容器，能够通过 network 相互识别并协同工作么？目前我还没找到合适的方法。&lt;/p&gt;
&lt;p&gt;使用 Kubernetes 集群，并 hack Docker 的默认网络设置，可以达到这个目的！具体步骤简略的说，如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install Master Kubernetes Node&lt;ul&gt;
&lt;li&gt;Install Docker&lt;/li&gt;
&lt;li&gt;Setup bootstrap instance of Docker, 这是指启动一个新的 Docker instance, 方法是指定 -H unix:///xxxxxx.sock，和默认的 Docker Instance 并存&lt;/li&gt;
&lt;li&gt;通过新的 Docker Instance 安装 Etcd，一个分布式 key/value Store，用于维护分布式集群的网络信息&lt;/li&gt;
&lt;li&gt;停止默认的 Docker Instance，然后通过新的 Docker Instance 安装 Flannel，后者会启动一个网络环境，记录在 /run/flannel/subnet.env&lt;/li&gt;
&lt;li&gt;修改默认的 Docker 配置，把 DOCKER_OPT 中的网络配置成 Flannel 启动的网络&lt;/li&gt;
&lt;li&gt;安装 bridge-util，并删除 Docker 安装上的默认的 docker0 subnet&lt;/li&gt;
&lt;li&gt;重新启动默认的 Docker Instance，那么此时这个 Docker 使用的就是 Flannel 创建的子网络&lt;/li&gt;
&lt;li&gt;安装 Kubernetes 及其 Service Proxy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Install Worker Kubernetes Node，完全类似上面，只是有一些不同&lt;ul&gt;
&lt;li&gt;不需要安装 Etcd 了&lt;/li&gt;
&lt;li&gt;安装 Flannel 的时候需要指定 Master Ip&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至此，Kubernetes 集群安装完毕，可以使用 kubectl get nodes 来确认集群节点都 OK，并可以管理 Pods 和 Services 了&lt;/p&gt;
&lt;h3 id=&quot;评价&quot;&gt;&lt;a href=&quot;#评价&quot; class=&quot;headerlink&quot; title=&quot;评价&quot;&gt;&lt;/a&gt;评价&lt;/h3&gt;&lt;p&gt;这本书 3+ 分吧，不能再多了，基本上就是操作手册，对于熟悉工具还是有一定帮助的，只不过实在是太啰嗦了，全书的知识点有限得很&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Some tips on Kubernetes Microservices with Docker&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://ijustloveses.github.io/categories/Docker/"/>
    
    
      <category term="笔记" scheme="http://ijustloveses.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Docker" scheme="http://ijustloveses.github.io/tags/Docker/"/>
    
      <category term="Kubernetes" scheme="http://ijustloveses.github.io/tags/Kubernetes/"/>
    
      <category term="Microservice" scheme="http://ijustloveses.github.io/tags/Microservice/"/>
    
      <category term="分布式" scheme="http://ijustloveses.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>7周7并发模型 P6 - Data Parallelism with GPU</title>
    <link href="http://ijustloveses.github.io/2016/07/06/7concurrent-models-in-7weeks-part6/"/>
    <id>http://ijustloveses.github.io/2016/07/06/7concurrent-models-in-7weeks-part6/</id>
    <published>2016-07-06T18:27:25.000Z</published>
    <updated>2016-07-07T05:52:02.000Z</updated>
    
    <content type="html">&lt;p&gt;Notes on 7 Concurrent Models in 7 Weeks - Part 6. Data Parallelism with GPU&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;GPGPU-Programming-Basis&quot;&gt;&lt;a href=&quot;#GPGPU-Programming-Basis&quot; class=&quot;headerlink&quot; title=&quot;GPGPU Programming Basis&quot;&gt;&lt;/a&gt;GPGPU Programming Basis&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;The amount of data that needs to be processed is huge, the actual operations on that data are relatively simple vector or matrix operations.&lt;/li&gt;
&lt;li&gt;This makes them very amenable to data parallelization, in which multiple computing units perform the same operations on different items of data in parallel.&lt;/li&gt;
&lt;li&gt;GPUs combine pipelining and multiple ALUs with a wide range of other techniques, unfortunately, which’s little commonality between different GPUs.&lt;/li&gt;
&lt;li&gt;OpenCL targets multiple architectures by defining a C-like language that allows us to express a parallel algorithm abstractly.&lt;/li&gt;
&lt;li&gt;Divide your problem into the smallest workitems you can, OpenCL compiler and runtime then worry about how best to schedule those work-items on the available hardware.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Our-First-OpenCL-Program-Pair-wise-Multiply&quot;&gt;&lt;a href=&quot;#Our-First-OpenCL-Program-Pair-wise-Multiply&quot; class=&quot;headerlink&quot; title=&quot;Our First OpenCL Program - Pair-wise Multiply&quot;&gt;&lt;/a&gt;Our First OpenCL Program - Pair-wise Multiply&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Implement a kernel which is the core work item algorithm.&lt;/li&gt;
&lt;li&gt;Create a context within which the kernel will run together with a command queue.&lt;/li&gt;
&lt;li&gt;Compile the kernel.&lt;/li&gt;
&lt;li&gt;Create buffers for input and output data.&lt;/li&gt;
&lt;li&gt;Enqueue a command that executes the kernel once for each work-item.&lt;/li&gt;
&lt;li&gt;Retrieve the results.&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;Kernel&quot;&gt;&lt;a href=&quot;#Kernel&quot; class=&quot;headerlink&quot; title=&quot;Kernel&quot;&gt;&lt;/a&gt;Kernel&lt;/h5&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;__&lt;span class=&quot;function&quot;&gt;kernel &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;multiply_arrays&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(__global &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;* inputA,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              __global &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;* inputB,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              __global &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;* output)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = get_global_id(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  output[i] = inputA[i] * inputB[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The OpenCL standard defines both C and C++ bindings. However, unofficial bindings are available for most major languages. We stick to C here.&lt;/p&gt;
&lt;p&gt;It calls get_global_id() to determine which work-item it’s handling.&lt;/p&gt;
&lt;h5 id=&quot;Context-and-Command-Queue&quot;&gt;&lt;a href=&quot;#Context-and-Command-Queue&quot; class=&quot;headerlink&quot; title=&quot;Context and Command Queue&quot;&gt;&lt;/a&gt;Context and Command Queue&lt;/h5&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cl_platform_id platform;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clGetPlatformIDs(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &amp;amp;platform, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cl_device_id device;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clGetDeviceIDs(platform, CL_DEVICE_TYPE_GPU, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &amp;amp;device, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cl_context context = clCreateContext(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &amp;amp;device, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cl_command_queue &lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt; = clCreateCommandQueue(context, device, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;We want a simple context that only contains a single GPU, so after identifying a platform with clGetPlatformIDs(), we pass CL_DEVICE_TYPE_GPU to clGetDeviceIDs() to get the ID of a GPU.&lt;/p&gt;
&lt;p&gt;The clCreateCommandQueue() method takes a context and a device and returns a queue that enables commands to be sent to that device.&lt;/p&gt;
&lt;h5 id=&quot;Compile-the-Kernel&quot;&gt;&lt;a href=&quot;#Compile-the-Kernel&quot; class=&quot;headerlink&quot; title=&quot;Compile the Kernel&quot;&gt;&lt;/a&gt;Compile the Kernel&lt;/h5&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* source = read_source(&lt;span class=&quot;string&quot;&gt;&quot;multiply_arrays.cl&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cl_program program = clCreateProgramWithSource(context, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, (&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;**)&amp;amp;source, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(source);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clBuildProgram(program, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cl_kernel kernel = clCreateKernel(program, &lt;span class=&quot;string&quot;&gt;&quot;multiply_arrays&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Create-Buffers&quot;&gt;&lt;a href=&quot;#Create-Buffers&quot; class=&quot;headerlink&quot; title=&quot;Create Buffers&quot;&gt;&lt;/a&gt;Create Buffers&lt;/h5&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; NUM_ELEMENTS 1024&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cl_float a[NUM_ELEMENTS], b[NUM_ELEMENTS];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;random_fill(a, NUM_ELEMENTS);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;random_fill(b, NUM_ELEMENTS);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cl_mem inputA = clCreateBuffer(context, CL_MEM_READ_ONLY | CL_MEM_COPY_HOST_PTR, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(cl_float) * NUM_ELEMENTS, a, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cl_mem inputB = clCreateBuffer(context, CL_MEM_READ_ONLY | CL_MEM_COPY_HOST_PTR, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(cl_float) * NUM_ELEMENTS, b, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cl_mem output = clCreateBuffer(context, CL_MEM_WRITE_ONLY, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(cl_float) * NUM_ELEMENTS, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Execute-the-Work-Items&quot;&gt;&lt;a href=&quot;#Execute-the-Work-Items&quot; class=&quot;headerlink&quot; title=&quot;Execute the Work Items&quot;&gt;&lt;/a&gt;Execute the Work Items&lt;/h5&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;clSetKernelArg(kernel, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(cl_mem), &amp;amp;inputA);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clSetKernelArg(kernel, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(cl_mem), &amp;amp;inputB);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clSetKernelArg(kernel, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(cl_mem), &amp;amp;output);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; work_units = NUM_ELEMENTS;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clEnqueueNDRangeKernel(&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;, kernel, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &amp;amp;work_units, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;First set the kernel’s arguments with clSetKernelArg(), then clEnqueueNDRangeKernel() queues an N-dimensional range (NDRange) of work-items.&lt;/p&gt;
&lt;p&gt;In our case, N is 1 (the 3rd argument to clEnqueueNDRangeKernel()) and the number of work-items is 1,024 (NUM_ELEMENTS).&lt;/p&gt;
&lt;h5 id=&quot;Retrieve-Results-and-Clean-up&quot;&gt;&lt;a href=&quot;#Retrieve-Results-and-Clean-up&quot; class=&quot;headerlink&quot; title=&quot;Retrieve Results and Clean up&quot;&gt;&lt;/a&gt;Retrieve Results and Clean up&lt;/h5&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cl_float results[NUM_ELEMENTS];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clEnqueueReadBuffer(&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;, output, CL_TRUE, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(cl_float) * NUM_ELEMENTS, results, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clReleaseMemObject(inputA);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clReleaseMemObject(inputB);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clReleaseMemObject(output);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clReleaseKernel(kernel);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clReleaseProgram(program);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clReleaseCommandQueue(&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clReleaseContext(context);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;We create the results array and copy from the output buffer with the clEnqueueReadBuffer() function.&lt;/p&gt;
&lt;h5 id=&quot;Profiling&quot;&gt;&lt;a href=&quot;#Profiling&quot; class=&quot;headerlink&quot; title=&quot;Profiling&quot;&gt;&lt;/a&gt;Profiling&lt;/h5&gt;&lt;p&gt;Simply change the last parameter of clEnqueueNDRangeKernel() to enable profiling, as below:&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cl_event timing_event;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; work_units = NUM_ELEMENTS;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clEnqueueNDRangeKernel(&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;, kernel, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &amp;amp;work_units, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &amp;amp;timing_event);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cl_float results[NUM_ELEMENTS];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clEnqueueReadBuffer(&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;, output, CL_TRUE, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(cl_float) * NUM_ELEMENTS, results, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cl_ulong starttime;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clGetEventProfilingInfo(timing_event, CL_PROFILING_COMMAND_START, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(cl_ulong), &amp;amp;starttime, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cl_ulong endtime;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clGetEventProfilingInfo(timing_event, CL_PROFILING_COMMAND_END, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(cl_ulong), &amp;amp;endtime, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Elapsed (GPU): %lu ns\n\n&quot;&lt;/span&gt;, (&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)(endtime - starttime));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clReleaseEvent(timing_event);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;For this task, the GPU is more than nine times faster than a single CPU core.&lt;/p&gt;
&lt;h5 id=&quot;What-if-there-are-multiple-devices&quot;&gt;&lt;a href=&quot;#What-if-there-are-multiple-devices&quot; class=&quot;headerlink&quot; title=&quot;What if there are multiple devices&quot;&gt;&lt;/a&gt;What if there are multiple devices&lt;/h5&gt;&lt;p&gt;To get fix number devices&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cl_device_id devices[&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cl_uint num_devices;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clGetDeviceIDs(platform, CL_DEVICE_TYPE_ALL, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, devices, &amp;amp;num_devices);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;num_devices will have been set to the number of available devices, and the first num_devices entries of the devices array will have been filled in.&lt;/p&gt;
&lt;p&gt;This works fine, but what if there are more than eight available devices?&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cl_uint num_devices;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clGetDeviceIDs(platform, CL_DEVICE_TYPE_ALL, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &amp;amp;num_devices);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cl_device_id* devices = (cl_device_id*)&lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(cl_device_id) * num_devices);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clGetDeviceIDs(platform, CL_DEVICE_TYPE_ALL, num_devices, devices, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;No explaination needed.&lt;/p&gt;
&lt;h5 id=&quot;Error-handling&quot;&gt;&lt;a href=&quot;#Error-handling&quot; class=&quot;headerlink&quot; title=&quot;Error handling&quot;&gt;&lt;/a&gt;Error handling&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;Some OpenCL functions return error codes, CL_SUCCESS indicates that the function succeeded; any other value indicates that it failed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So some kind of utility function or macro to simplify the error handling process, for example:&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; CHECK_STATUS(s) do &amp;#123; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cl_int ss = (s); \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; (ss != CL_SUCCESS) &amp;#123; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fprintf(stderr, &lt;span class=&quot;string&quot;&gt;&quot;Error %d at line %d\n&quot;&lt;/span&gt;, ss, __LINE__); \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        exit(1); \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; while (0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This allows us to write the following:&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CHECK_STATUS(clSetKernelArg(kernel, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(cl_mem), &amp;amp;inputA));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Some other OpenCL functions take an error_ret parameter.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here’s how we can call it with error handling:&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cl_int status;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cl_context context = clCreateContext(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &amp;amp;device, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &amp;amp;status);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CHECK_STATUS(status);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Multidimensional-Work-Item-Ranges&quot;&gt;&lt;a href=&quot;#Multidimensional-Work-Item-Ranges&quot; class=&quot;headerlink&quot; title=&quot;Multidimensional Work-Item Ranges&quot;&gt;&lt;/a&gt;Multidimensional Work-Item Ranges&lt;/h3&gt;&lt;p&gt;When executing a kernel via clEnqueueNDRangeKernel(), an index space is defined where each point is identified by a unique global ID that represents a work-item.&lt;/p&gt;
&lt;p&gt;A kernel can find the global ID of the work-item it’s executing by calling get_global_id().&lt;/p&gt;
&lt;p&gt;In the 1st example, the index space is unidimensional, and therefore the kernel only needed to call get_global_id() once.&lt;/p&gt;
&lt;p&gt;We will create a kernel that multiplies two-dimensional matrices and therefore calls get_global_id() twice.&lt;/p&gt;
&lt;h5 id=&quot;Parallel-Matrix-Multiplication&quot;&gt;&lt;a href=&quot;#Parallel-Matrix-Multiplication&quot; class=&quot;headerlink&quot; title=&quot;Parallel Matrix Multiplication&quot;&gt;&lt;/a&gt;Parallel Matrix Multiplication&lt;/h5&gt;&lt;p&gt;kernel is as below:&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;__&lt;span class=&quot;function&quot;&gt;kernel &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;matrix_multiplication&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(uint widthA,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    __global &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;* inputA,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    __global &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;* inputB,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    __global &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;* output)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = get_global_id(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = get_global_id(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Note that: outputWidth == widthB  &amp;amp;&amp;amp;  outputHeight == heightA  &amp;amp;&amp;amp;  widthA == heightB&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; outputWidth = get_global_size(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; outputHeight = get_global_size(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; widthB = outputWidth;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; total = &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; k &amp;lt; widthA; ++k) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    total += inputA[j * widthA + k] * inputB[k * widthB + i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  output[j * outputWidth + i] = total;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the kernel calculate the (j, i) item of A * B&lt;/li&gt;
&lt;li&gt;A, B &amp;amp; output Matrix are all save in a 1-dimensional array, instead of 2-demensional.&lt;/li&gt;
&lt;li&gt;This kernel executes within a two-dimensional index space, each point of which identifies a location in the output array.&lt;/li&gt;
&lt;li&gt;It can find out the range of the index space by calling get_global_size().&lt;/li&gt;
&lt;li&gt;This also gives us widthB, which is equal to outputWidth, but we have to pass widthA as a parameter.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Which is to say, if A is M&lt;em&gt;K dimension, B is K&lt;/em&gt;N dimension, then M &amp;amp; N are both global size, while K is a input parameter.&lt;/p&gt;
&lt;p&gt;To execute the kernal:&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; work_units[] = &amp;#123;WIDTH_OUTPUT, HEIGHT_OUTPUT&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CHECK_STATUS(clEnqueueNDRangeKernel(&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;, kernel, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, work_units, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This creates a 2-dimensional index space by setting work_dim to 2 and specifies the extent of each dimension by setting global_work_size to work_units.&lt;/p&gt;
&lt;h3 id=&quot;Data-Parallel-Reduce&quot;&gt;&lt;a href=&quot;#Data-Parallel-Reduce&quot; class=&quot;headerlink&quot; title=&quot;Data-Parallel Reduce&quot;&gt;&lt;/a&gt;Data-Parallel Reduce&lt;/h3&gt;&lt;h5 id=&quot;Query-Device-Info&quot;&gt;&lt;a href=&quot;#Query-Device-Info&quot; class=&quot;headerlink&quot; title=&quot;Query Device Info&quot;&gt;&lt;/a&gt;Query Device Info&lt;/h5&gt;&lt;p&gt;Uses clGetDeviceInfo() to query and print a device parameter with a value of type string.&lt;/p&gt;
&lt;p&gt;To wrap a function to query device info,&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;print_device_param_string&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(cl_device_id device, cl_device_info param_id, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* param_name)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; value[&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK_STATUS(clGetDeviceInfo(device, param_id, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(value), value, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%s: %s\n&quot;&lt;/span&gt;, param_name, value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;print_device_info&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(cl_device_id device)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print_device_param_string(device, CL_DEVICE_NAME, &lt;span class=&quot;string&quot;&gt;&quot;Name&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print_device_param_string(device, CL_DEVICE_VENDOR, &lt;span class=&quot;string&quot;&gt;&quot;Vendor&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print_device_param_uint(device, CL_DEVICE_MAX_COMPUTE_UNITS, &lt;span class=&quot;string&quot;&gt;&quot;Compute Units&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print_device_param_ulong(device, CL_DEVICE_GLOBAL_MEM_SIZE, &lt;span class=&quot;string&quot;&gt;&quot;Global Memory&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print_device_param_ulong(device, CL_DEVICE_LOCAL_MEM_SIZE, &lt;span class=&quot;string&quot;&gt;&quot;Local Memory&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print_device_param_sizet(device, CL_DEVICE_MAX_WORK_GROUP_SIZE, &lt;span class=&quot;string&quot;&gt;&quot;Workgroup size&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;So what is Compute Units and Workgroup size ? What is the difference between global and local memory ?&lt;/p&gt;
&lt;h5 id=&quot;Platform-Model&quot;&gt;&lt;a href=&quot;#Platform-Model&quot; class=&quot;headerlink&quot; title=&quot;Platform Model&quot;&gt;&lt;/a&gt;Platform Model&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;An OpenCL platform consists of a host that’s connected to one or more devices.&lt;/li&gt;
&lt;li&gt;Each device has one or more compute units, each of which provides a number of processing elements.&lt;/li&gt;
&lt;li&gt;Work-items execute on processing elements. A collection of work-items executing on a single compute unit is a work-group.&lt;/li&gt;
&lt;li&gt;The work-items in a workgroup share local memory, which can be used for communication between work-items executing in that work-group.&lt;/li&gt;
&lt;li&gt;A single work-item has its Private memory.&lt;/li&gt;
&lt;li&gt;Global memory is the memory available to all work-items executing on a device.&lt;/li&gt;
&lt;li&gt;Constant memory is a region of global memory that remains constant during execution of a kernel.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;So, Host =&amp;gt; Devices =&amp;gt; Compute Units =&amp;gt; WorkGroup =&amp;gt; WorkItem&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            GlobalMem                   LocalMem     PrivateMem&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;A-Single-Work-Group-Min&quot;&gt;&lt;a href=&quot;#A-Single-Work-Group-Min&quot; class=&quot;headerlink&quot; title=&quot;A Single Work-Group Min()&quot;&gt;&lt;/a&gt;A Single Work-Group Min()&lt;/h5&gt;&lt;p&gt;To simplify, assume that the number of elements in the array we want to reduce is a power of two and small enough to be processed by a single work-group.&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;__&lt;span class=&quot;function&quot;&gt;kernel &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;find_minimum&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(__global &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;* values,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           __global &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;* result,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           __local &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;* scratch)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = get_global_id(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n = get_global_size(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  scratch[i] = values[i]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  barrier(CLK_LOCAL_MEM_FENCE); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = n / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; j &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j /= &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i &amp;lt; j)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      scratch[i] = min(scratch[i], scratch[i + j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    barrier(CLK_LOCAL_MEM_FENCE); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *result = scratch[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;ATTENTION: all work-items are NOT running sequentially, but simultaneously! Say we have 8 elements in values, we will have 8 work-items running at the same time.&lt;/li&gt;
&lt;li&gt;A barrier is a synchronization mechanism that allows work-items to coordinate their use of local memory.&lt;/li&gt;
&lt;li&gt;If one work-item in a work-group executes barrier(), then all work-items in that work-group must execute the same barrier() before any of them can proceed beyond that point&lt;ul&gt;
&lt;li&gt;It ensures that one work-item doesn’t start reducing until all work-items have copied their value from global to local memory&lt;/li&gt;
&lt;li&gt;It ensures that one workitem doesn’t move on to loop iteration n + 1 until all work-items have finished loop iteration n.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example, we have 8 elements in values, which are [35, 9, 1, 100, 83, 7, 28, 15], then the running steps will be:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    Step                         scratch[i=0]       scratch[i=1]       scratch[i=2]      scratch[i=3]  scratch[i=4]  scratch[i=5]  scratch[i=6]  scratch[i=7]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scratch[i] = values[i]               35                 9                   1                100            83            7             28           15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;barrier(CLK_LOCAL_MEM_FENCE)  ------------------------------- wait all work-items to finish , then go the the next step -------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1st loop: j = 4                 min(s[0], s[4])      min(s[1], s[5])    min(s[2], s[6])   min(s[3], s[7])     Do Nth.    Do Nth.     Do Nth.     Do Nth. &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              = min(35, 83) = 35   = min(9, 7) = 7    = min(1, 28) = 1  = min(100, 15) = 15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;barrier(CLK_LOCAL_MEM_FENCE)  ------------------------------- wait all work-items to finish , then go the the next step -------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2nd loop: j = 2                 min(s[0], s[2])      min(s[1], s[3])       Do Nth.          Do Nth.           Do Nth.    Do Nth.     Do Nth.     Do Nth.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              = min(35, 1) = 1     = min(7, 15) = 7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;barrier(CLK_LOCAL_MEM_FENCE)  ------------------------------- wait all work-items to finish , then go the the next step -------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3rd loop: j = 1                 min(s[0], s[1])          Do Nth.           Do Nth.          Do Nth.           Do Nth.    Do Nth.     Do Nth.     Do Nth.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              = min(1, 7) = 1          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;barrier(CLK_LOCAL_MEM_FENCE)  ------------------------------- wait all work-items to finish , then go the the next step -------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if i == 0 &amp;#123;*result = scratch[0];&amp;#125;    1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;A-Multiple-Work-Group-Min&quot;&gt;&lt;a href=&quot;#A-Multiple-Work-Group-Min&quot; class=&quot;headerlink&quot; title=&quot;A Multiple-Work-Group Min()&quot;&gt;&lt;/a&gt;A Multiple-Work-Group Min()&lt;/h5&gt;&lt;p&gt;The above example works fine, but work-groups are restricted in size (such as no more than 1024 elements), so how to parallelize over multiple work-groups?&lt;/p&gt;
&lt;p&gt;Extending our reduce across multiple work-groups is a simple matter of dividing the input array into work-groups and reducing each independently&lt;/p&gt;
&lt;p&gt;If, for example, each work-group operates on 64 values at a time, this will reduce an array of N items to N/64 items. This smaller array can then be reduced in turn, and so on, until only a single result remains.&lt;/p&gt;
&lt;p&gt;Each work-group has its local id and represents a section of a larger problem.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;global id 0   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |&amp;lt;---------------------------- global size --------------------------------------------&amp;gt;|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |                                                                                       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [[      group 0      ],[      group 1      ],[      group 2      ],[      group 3      ]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                             |&amp;lt;--- local size --&amp;gt;|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                             |                   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        local id 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;so, kernel will be modified as below:&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;__&lt;span class=&quot;function&quot;&gt;kernel &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;find_minimum&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(__global &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;* values,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           __global &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;* results,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           __local &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;* scratch)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = get_local_id(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n = get_local_size(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  scratch[i] = values[get_global_id(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  barrier(CLK_LOCAL_MEM_FENCE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = n / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; j &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j /= &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i &amp;lt; j)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      scratch[i] = min(scratch[i], scratch[i + j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    barrier(CLK_LOCAL_MEM_FENCE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    results[get_group_id(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)] = scratch[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;This kernel is only for one iteration, but not the whole process, and the result of its work-group will be saved into results[get_group_id(0)].&lt;/li&gt;
&lt;li&gt;To get the final result, we must run several iterations, and use results[] as the input parameter &lt;strong&gt;values&lt;/strong&gt;, until one work-group is enough to hold values.&lt;/li&gt;
&lt;li&gt;This kernel is for one group identified by get_group_id(0), and the work-item is identified by get_local_id(0)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To execute it&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; work_units[] = &amp;#123;NUM_VALUES&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; workgroup_size[] = &amp;#123;WORKGROUP_SIZE&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CHECK_STATUS(clEnqueueNDRangeKernel(&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;, kernel, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, work_units, workgroup_size, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Notes on 7 Concurrent Models in 7 Weeks - Part 6. Data Parallelism with GPU&lt;/p&gt;
    
    </summary>
    
      <category term="并发" scheme="http://ijustloveses.github.io/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="并发" scheme="http://ijustloveses.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="7日7并发模型" scheme="http://ijustloveses.github.io/tags/7%E6%97%A57%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="笔记" scheme="http://ijustloveses.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Parallelism" scheme="http://ijustloveses.github.io/tags/Parallelism/"/>
    
  </entry>
  
  <entry>
    <title>7周7并发模型 P5 - CSP with Clojure</title>
    <link href="http://ijustloveses.github.io/2016/07/01/7concurrent-models-in-7weeks-part5/"/>
    <id>http://ijustloveses.github.io/2016/07/01/7concurrent-models-in-7weeks-part5/</id>
    <published>2016-07-01T00:27:25.000Z</published>
    <updated>2016-07-07T05:52:09.000Z</updated>
    
    <content type="html">&lt;p&gt;Notes on 7 Concurrent Models in 7 Weeks - Part 5. Communicating Sequential Processes&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;core-async-in-Clojure&quot;&gt;&lt;a href=&quot;#core-async-in-Clojure&quot; class=&quot;headerlink&quot; title=&quot;core.async in Clojure&quot;&gt;&lt;/a&gt;core.async in Clojure&lt;/h3&gt;&lt;p&gt;CSP’s (Short for Communicating Sequential Processes) recent popularity is largely due to the Go language. &lt;/p&gt;
&lt;p&gt;We’re going to cover CSP by examining the core.async library, which brings Go’s concurrency model to Clojure.&lt;/p&gt;
&lt;p&gt;core.async defines a few functions with names that clash with core Clojure library functions.&lt;/p&gt;
&lt;p&gt;We could import core.async like below:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(ns channels.core&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (:require [clojure.core.async :as async :refer :all&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        :exclude [map into reduce merge partition partition-by take]]))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Channels&quot;&gt;&lt;a href=&quot;#Channels&quot; class=&quot;headerlink&quot; title=&quot;Channels&quot;&gt;&lt;/a&gt;Channels&lt;/h3&gt;&lt;p&gt;A channel is a thread-safe queue, which messages could be added to one end and removed from the other.&lt;/p&gt;
&lt;p&gt;Unlike actors, where messages are sent to and from specific actors, senders don’t have to know about receivers, or vice versa.&lt;/p&gt;
&lt;p&gt;We can write to a channel with &amp;gt;!! and read from it with &amp;lt;!!&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (def c (chan))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;channels.core/c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (thread (println &amp;quot;Read:&amp;quot; (&amp;lt;!! c) &amp;quot;from c&amp;quot;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;ManyToManyChannel clojure.core.async.impl.channels.ManyToManyChannel@78fcc563&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;gt;!! c &amp;quot;Hello thread&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Read: Hello thread from c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;core.async provides the handy thread utility macro which runs its code on a separate thread.&lt;/p&gt;
&lt;p&gt;The thread prints a message containing whatever it reads from the channel, and will blocks until we actually write to the channel.&lt;/p&gt;
&lt;h5 id=&quot;Buffering&quot;&gt;&lt;a href=&quot;#Buffering&quot; class=&quot;headerlink&quot; title=&quot;Buffering&quot;&gt;&lt;/a&gt;Buffering&lt;/h5&gt;&lt;p&gt;By default, channels are synchronous (or unbuffered), which means writing to a channel blocks until something reads from it.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (thread (&amp;gt;!! c &amp;quot;Hello&amp;quot;) (println &amp;quot;Write completed&amp;quot;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;ManyToManyChannel clojure.core.async.impl.channels.ManyToManyChannel@78fcc563&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;lt;!! c)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Write completed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;We can create a buffered channel by passing a buffer size to chan:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (def bc (chan 5))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;channels.core/bc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;gt;!! bc 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;gt;!! bc 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (close! bc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;lt;!! bc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;lt;!! bc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;lt;!! bc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;As above, we can close a chan with close!. Reading from an empty closed channel returns nil, and writing to a closed channel silently discards the message.&lt;/p&gt;
&lt;h5 id=&quot;readall-and-writeall&quot;&gt;&lt;a href=&quot;#readall-and-writeall&quot; class=&quot;headerlink&quot; title=&quot;readall!! and writeall!!&quot;&gt;&lt;/a&gt;readall!! and writeall!!&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn readall!! [ch]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (loop [coll []]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (if-let [x (&amp;lt;!! ch)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (recur (conj coll x))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            coll)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This loops with coll initially bound to the empty vector []. Each iteration reads a value from ch.&lt;/p&gt;
&lt;p&gt;If the value is not nil, it’s added to coll and go to the next iteration; otherwise (the channel has been closed), coll is returned.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn writeall!! [ch coll]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (doseq [x coll]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (&amp;gt;!! ch x))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (close! ch))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;core.async provides utilities that perform similar tasks to save us the trouble of writing our own:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (def ch (chan 10))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;channels.core/ch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (onto-chan ch (range 0 10))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;ManyToManyChannel clojure.core.async.impl.channels.ManyToManyChannel@6b16d3cf&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;lt;!! (async/into [] ch))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[0 1 2 3 4 5 6 7 8 9]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;Full-Buffer-Strategies&quot;&gt;&lt;a href=&quot;#Full-Buffer-Strategies&quot; class=&quot;headerlink&quot; title=&quot;Full Buffer Strategies&quot;&gt;&lt;/a&gt;Full Buffer Strategies&lt;/h5&gt;&lt;p&gt;By default, writing to a full channel will block. But we can choose an alternative strategy by passing a buffer to chan:&lt;/p&gt;
&lt;p&gt;A dropping buffer doesn’t block, even though the channel cannot hold so many messages, and drops all subsequent messages when channel is full.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (def dc (chan (dropping-buffer 5)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;channels.core/dc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (onto-chan dc (range 0 10))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;ManyToManyChannel clojure.core.async.impl.channels.ManyToManyChannel@147c0def&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;lt;!! (async/into [] dc))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[0 1 2 3 4]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;A sliding buffer will drop oldest message to hold recent message.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (def sc (chan (sliding-buffer 5)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;channels.core/sc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (onto-chan sc (range 0 10))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;ManyToManyChannel clojure.core.async.impl.channels.ManyToManyChannel@3071908b&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;lt;!! (async/into [] sc))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[5 6 7 8 9]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Go-Blocks&quot;&gt;&lt;a href=&quot;#Go-Blocks&quot; class=&quot;headerlink&quot; title=&quot;Go Blocks&quot;&gt;&lt;/a&gt;Go Blocks&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Threads have both an overhead and a startup cost, so modern programs avoid creating threads directly and use a thread pool instead.&lt;/li&gt;
&lt;li&gt;Thread pools are a great way to handle CPU-intensive tasks which often tie a thread up for a brief period and then return it to the poll to be reused.&lt;/li&gt;
&lt;li&gt;Typically event-driven model will be used for IO-intensive task involving communication, but it breaks up the natural flow of control, and worse it leads to an excess of global state.&lt;/li&gt;
&lt;li&gt;Go blocks to rescue, which provide an alternative that gives us efficiency of event-driven code without having to compromise its structure or readability.&lt;/li&gt;
&lt;li&gt;Code within a go block is transformed into a state machine. &lt;ul&gt;
&lt;li&gt;Instead of blocking when it reads from or writes to a channel, the state machine parks, relinquishing control of the thread it’s executing on. &lt;/li&gt;
&lt;li&gt;When it’s next able to run, it performs a state transition and continues execution, potentially on another thread.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;Parking&quot;&gt;&lt;a href=&quot;#Parking&quot; class=&quot;headerlink&quot; title=&quot;Parking&quot;&gt;&lt;/a&gt;Parking&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (def ch (chan))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;channels.core/ch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           #_=&amp;gt;     (let [x (&amp;lt;! ch)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           #_=&amp;gt;           y (&amp;lt;! ch)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           #_=&amp;gt;         (println &amp;quot;Sum:&amp;quot; (+ x y))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;ManyToManyChannel clojure.core.async.impl.channels.ManyToManyChannel@13ac7b98&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;gt;!! ch 3)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;gt;!! ch 4)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Sum: 7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The go block that reads two values from ch, then prints their sum. The single exclamation mark (&amp;lt;! or &amp;gt;!) means parking version instead of blocking version.&lt;/p&gt;
&lt;p&gt;The go macro converts this sequential code into a state machine with three states:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;parking  --------&amp;gt;  [  &amp;lt;!ch  ]  -------&amp;gt;  [  &amp;lt;!ch  ]  -------&amp;gt; [  output results  ]  -------&amp;gt;  terminating&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;So what is the different between parking and blocking version of channel reading/writing? &lt;/p&gt;
&lt;p&gt;If we use blocking &amp;gt;!! or &amp;lt;!! in go block, we might deadlock because too many go blocks are running and blocking enough threads so no more are available.&lt;/p&gt;
&lt;p&gt;The point of all the go macro’s cleverness is efficiency, go blocks are cheap, we can create many of them without running out of resources.&lt;/p&gt;
&lt;h5 id=&quot;Go-Blocks-Are-Cheap&quot;&gt;&lt;a href=&quot;#Go-Blocks-Are-Cheap&quot; class=&quot;headerlink&quot; title=&quot;Go Blocks Are Cheap&quot;&gt;&lt;/a&gt;Go Blocks Are Cheap&lt;/h5&gt;&lt;p&gt;Go macro returns a channel.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;lt;!! (go (+ 3 4)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;We can use this fact to create a function that creates a very large number of go blocks, allowing us to see just how inexpensive go blocks are&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn go-add [x y]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&amp;lt;!! (nth (iterate #(go (inc (&amp;lt;! %))) (go x)) y)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;That is the world’s most inefficient addition function:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;#(go (inc (&amp;lt;! %))) is an anonymous func which reads a single value from input chan %, then incr the value and create a new chan to return the increased value.&lt;/li&gt;
&lt;li&gt;(iterate $ANONYMOUSFUNC (go x)) will return a lazy sequence of the form (x, f(x), f(f(x)), ….), where the initial value is (go x)&lt;/li&gt;
&lt;li&gt;nth $LAZYSEQ y will return the y-th element of the lazy sequence, which is the return value of a go block (so, it is a channel)&lt;/li&gt;
&lt;li&gt;Finally, read the result from the chan.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (time (go-add 10 10))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Elapsed time: 1.935 msecs&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (time (go-add 10 100000))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Elapsed time: 734.91 msecs&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100010&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;So, it takes 734.91 msecs to create 100000 go blocks! Wonderful!&lt;/p&gt;
&lt;h5 id=&quot;Operations-over-Channels&quot;&gt;&lt;a href=&quot;#Operations-over-Channels&quot; class=&quot;headerlink&quot; title=&quot;Operations over Channels&quot;&gt;&lt;/a&gt;Operations over Channels&lt;/h5&gt;&lt;p&gt;Mapping over a Channel&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn map-chan [f from]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (let [to (chan)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (go-loop []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (when-let [x (&amp;lt;! from)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (&amp;gt;! to (f x))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (recur))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (close! to))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        to))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;go-loop is an utility function that’s equivalent to (go (loop …)).&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (def ch (chan 10))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;channels.core/ch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (def mapped (map-chan (partial * 2) ch))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;channels.core/mapped&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (onto-chan ch (range 0 10))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;ManyToManyChannel clojure.core.async.impl.channels.ManyToManyChannel@9f3d43e&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;lt;!! (async/into [] mapped))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[0 2 4 6 8 10 12 14 16 18]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;core.async provides its own version of map-chan, called map&amp;lt; as well as channel-oriented filter called filter&amp;lt;, mapcat called mapcat&amp;lt;, and so on.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (def ch (to-chan (range 0 10)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;channels.core/ch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;lt;!! (async/into [] (map&amp;lt; (partial * 2) (filter&amp;lt; even? ch))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[0 4 8 12 16]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;to-chan (range 0 10) is an utility function that is equivalent to ((def ch (chan 10)) (onto-chan ch (range 0 10)))&lt;/p&gt;
&lt;h5 id=&quot;Example-A-Concurrent-Sieve-of-Eratosthenes&quot;&gt;&lt;a href=&quot;#Example-A-Concurrent-Sieve-of-Eratosthenes&quot; class=&quot;headerlink&quot; title=&quot;Example: A Concurrent Sieve of Eratosthenes&quot;&gt;&lt;/a&gt;Example: A Concurrent Sieve of Eratosthenes&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn factor? [x y]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (zero? (mod y x)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn get-primes [limit]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (let [primes (chan)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          numbers (to-chan (range 2 limit))]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (go-loop [ch numbers]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (when-let [prime (&amp;lt;! ch)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (&amp;gt;! primes prime)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (recur (remove&amp;lt; (partial factor? prime) ch)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (close! primes))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        primes))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;In the go-loop, we copy numbers to ch, then iteratelly read a prime from ch; whenever a prime is read, remove numbers which matches (partial factor? prime).&lt;/p&gt;
&lt;h3 id=&quot;Handling-Multiple-Channels&quot;&gt;&lt;a href=&quot;#Handling-Multiple-Channels&quot; class=&quot;headerlink&quot; title=&quot;Handling Multiple Channels&quot;&gt;&lt;/a&gt;Handling Multiple Channels&lt;/h3&gt;&lt;h5 id=&quot;the-alt-function&quot;&gt;&lt;a href=&quot;#the-alt-function&quot; class=&quot;headerlink&quot; title=&quot;the alt! function&quot;&gt;&lt;/a&gt;the alt! function&lt;/h5&gt;&lt;p&gt;The alt! function allows us to write code that can deal with more than one channel at a time.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (def ch1 (chan))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;channels.core/ch1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (def ch2 (chan))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;channels.core/ch2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (go-loop []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                #_=&amp;gt; (alt!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                #_=&amp;gt;    ch1 ([x] (println &amp;quot;Read&amp;quot; x &amp;quot;from channel 1&amp;quot;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                #_=&amp;gt;    ch2 ([x] (println &amp;quot;Twice&amp;quot; x &amp;quot;is&amp;quot; (* x 2))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                #_=&amp;gt; (recur))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;ManyToManyChannel clojure.core.async.impl.channels.ManyToManyChannel@d8fd215&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;gt;!! ch1 &amp;quot;foo&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Read foo from channel 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (&amp;gt;!! ch2 21)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Twice 21 is 42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The alt! macro takes pairs of arguments, the first is a channel and the second is code executed if there’s anything to read from that channel.&lt;/p&gt;
&lt;h5 id=&quot;Timeouts&quot;&gt;&lt;a href=&quot;#Timeouts&quot; class=&quot;headerlink&quot; title=&quot;Timeouts&quot;&gt;&lt;/a&gt;Timeouts&lt;/h5&gt;&lt;p&gt;The timeout function returns a channel that closes after a certain number of milliseconds.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (time (&amp;lt;!! (timeout 10000)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Elapsed time: 10001.662 msecs&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Use timeout in conjunction with alt! to allow timeout operations.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;channels.core=&amp;gt; (let [t (timeout 10000)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             #_=&amp;gt; (go (alt!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             #_=&amp;gt;   ch ([x] (println &amp;quot;Read&amp;quot; x &amp;quot;from channel&amp;quot;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             #_=&amp;gt;   t (println &amp;quot;Timed out&amp;quot;))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;Reified-Timeouts&quot;&gt;&lt;a href=&quot;#Reified-Timeouts&quot; class=&quot;headerlink&quot; title=&quot;Reified Timeouts&quot;&gt;&lt;/a&gt;Reified Timeouts&lt;/h5&gt;&lt;p&gt;Normally timeouts are used on a per-request basis, but what if we want to limit the total time taken by a series of requests? Reified timeout to rescue!&lt;/p&gt;
&lt;p&gt;Let’s modify the sieve example, instead of taking a numeric limit, it will simply generates as many prime numbers as it can in a given number of seconds.&lt;/p&gt;
&lt;p&gt;Instead of initializing channel by (range 2 limit), we use the infinite sequence (iterate inc 2)&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn get-primes []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (let [primes (chan)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          numbers (to-chan (iterate inc 2))]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (go-loop [ch numbers]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (when-let [prime (&amp;lt;! ch)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (&amp;gt;! primes prime)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (recur (remove&amp;lt; (partial factor? prime) ch)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (close! primes))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        primes))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Here is how we call this function:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn -main [seconds]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (let [primes (get-primes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          limit (timeout (* (edn/read-string seconds) 1000))]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (loop []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (alt!! :priority true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                limit nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                primes ([prime] (println prime) (recur))))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Here we use blocking version of alt!, which blocks until either a new prime is available or limit hits, in which case it simply return nil without recur.&lt;/p&gt;
&lt;p&gt;The :priority true option ensures that the clauses passed to alt!! are evaluated in order (by default, if two clause both meet, one is chosen randomly)&lt;/p&gt;
&lt;p&gt;This avoids the event of primes being generated so quickly that there’s always one available and the timeout clause never gets evaluated.&lt;/p&gt;
&lt;h5 id=&quot;Asynchronous-Polling&quot;&gt;&lt;a href=&quot;#Asynchronous-Polling&quot; class=&quot;headerlink&quot; title=&quot;Asynchronous Polling&quot;&gt;&lt;/a&gt;Asynchronous Polling&lt;/h5&gt;&lt;p&gt;It seems simple enough to implement a timely polling&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn poll-fn [interval action]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (let [seconds (* interval 1000)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (go (while true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (action)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (&amp;lt;! (timeout seconds))))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;polling.core=&amp;gt; (poll-fn 10 #(println &amp;quot;Polling at:&amp;quot; (System/currentTimeMillis)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;ManyToManyChannel clojure.core.async.impl.channels.ManyToManyChannel@6e624159&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;polling.core=&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Polling at: 1388827086165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Polling at: 1388827096166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Polling at: 1388827106168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;............&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;But the problem is, the action can’t call parking functions&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;polling.core=&amp;gt; (def ch (to-chan (iterate inc 0)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;polling.core/ch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;polling.core=&amp;gt; (poll-fn 10 #(println &amp;quot;Read:&amp;quot; (&amp;lt;! ch)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Exception in thread &amp;quot;async-dispatch-1&amp;quot; java.lang.AssertionError:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Assert failed: &amp;lt;! used not in (go ...) block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;As the error says: The problem is that parking calls need to be made directly within a go block.&lt;/p&gt;
&lt;p&gt;Fix it with Clojure’s macro&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defmacro poll [interval &amp;amp; body]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    `(let [seconds# (* ~interval 1000)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (go (while true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (do ~@body)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (&amp;lt;! (timeout seconds#))))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Like c/cpp, the macro is directly replaced into the code level, so the action body will be put directly within the go block.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The backtick (`) is the syntax quote operator. It takes source code and, instead of executing it, returns a representation of it that can be subsequently compiled.&lt;/li&gt;
&lt;li&gt;Within that code, we can use the ~ (unquote) and ~@ (unquote splice) operators to refer to arguments passed to the macro.&lt;/li&gt;
&lt;li&gt;The # (auto-gensym) suffix indicates that Clojure should automatically generate a unique name to avoid name conflict.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s see it in action&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;polling.core=&amp;gt; (poll 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            #_=&amp;gt; (println &amp;quot;Polling at:&amp;quot; (System/currentTimeMillis))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            #_=&amp;gt; (println (&amp;lt;! ch)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;ManyToManyChannel clojure.core.async.impl.channels.ManyToManyChannel@1bec079e&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;polling.core=&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Polling at: 1388829368011&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Polling at: 1388829378018&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;..........&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;A-Practical-Example-–-Asynchronous-IO&quot;&gt;&lt;a href=&quot;#A-Practical-Example-–-Asynchronous-IO&quot; class=&quot;headerlink&quot; title=&quot;A Practical Example – Asynchronous IO&quot;&gt;&lt;/a&gt;A Practical Example – Asynchronous IO&lt;/h3&gt;&lt;h5 id=&quot;Basic-Http-Get-Url&quot;&gt;&lt;a href=&quot;#Basic-Http-Get-Url&quot; class=&quot;headerlink&quot; title=&quot;Basic Http Get Url&quot;&gt;&lt;/a&gt;Basic Http Get Url&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(require &amp;apos;[org.httpkit.client :as http])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn http-get [url]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (let [ch (chan)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (http/get url (fn [response]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        (if (= 200 (:status response))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            (put! ch response)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            (do (report-error response) (close! ch)))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ch))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;httpkit is an asynchronous IO library, and http/get expects a callback function to run when GET request is processed.&lt;/li&gt;
&lt;li&gt;put! doesn’t have to be called within a go block, and implements a ‘fire and forget’ write to a channel (so, it neither block nor park)&lt;/li&gt;
&lt;li&gt;This func creates a channel, calls http/get, which return immediately. When GET completes, callback is called, which put response in channel if OK, report error otherwise.&lt;/li&gt;
&lt;li&gt;Return the channel at last.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;Feed-polling&quot;&gt;&lt;a href=&quot;#Feed-polling&quot; class=&quot;headerlink&quot; title=&quot;Feed polling&quot;&gt;&lt;/a&gt;Feed polling&lt;/h5&gt;&lt;p&gt;With http-get &amp;amp; poll, we can do below:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(def poll-interval 60)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn poll-feed [url]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (let [ch (chan)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (poll poll-interval&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (when-let [response (&amp;lt;! (http-get url))]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (let [feed (parse-feed (:body response))]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    (onto-chan ch (get-links feed) false))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ch))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;parse-feed &amp;amp; get-links functions use the Rome library to parse XML returned by the news feed response, and I will not discuss them here.&lt;/p&gt;
&lt;p&gt;The list of links returned by get-links is written to ch with onto-chan, and the last argument is set to false to not to auto-close chanenl by onto-chan.&lt;/p&gt;
&lt;p&gt;Normally onto-chan will close ch when the source is exhausted, we disable this behavior by passing false to the final argument.&lt;/p&gt;
&lt;h5 id=&quot;Unique-Links&quot;&gt;&lt;a href=&quot;#Unique-Links&quot; class=&quot;headerlink&quot; title=&quot;Unique Links&quot;&gt;&lt;/a&gt;Unique Links&lt;/h5&gt;&lt;p&gt;poll-feed function could return duplicate urls. We need a channel that contains just the new links.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn new-links [url]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (let [in (poll-feed url)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          out (chan)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (go-loop [links #&amp;#123;&amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (let [link (&amp;lt;! in)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (if (contains? links link)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    (recur links)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    (do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        (&amp;gt;! out link)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        (recur (conj links link))))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        out))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Use a temporary dict variable link (initialized to empty set #{}) to check whether a link is a new one. If so, do nth; otherwise, put link into out chan and dict.&lt;/p&gt;
&lt;h5 id=&quot;Word-Counting&quot;&gt;&lt;a href=&quot;#Word-Counting&quot; class=&quot;headerlink&quot; title=&quot;Word Counting&quot;&gt;&lt;/a&gt;Word Counting&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn get-counts [urls]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (let [counts (chan)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (go (while true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (let [url (&amp;lt;! urls)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (when-let [response (&amp;lt;! (http-get url))]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    (let [c (count (get-words (:body response)))]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        (&amp;gt;! counts [url c]))))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        counts))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This code will return a channel whose elements are pairs of url and its word-count.&lt;/p&gt;
&lt;h5 id=&quot;Put-it-all-together&quot;&gt;&lt;a href=&quot;#Put-it-all-together&quot; class=&quot;headerlink&quot; title=&quot;Put it all together&quot;&gt;&lt;/a&gt;Put it all together&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn -main [feeds-file]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (with-open [rdr (io/reader feeds-file)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (let [feed-urls (line-seq rdr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              article-urls (doall (map new-links feed-urls))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              article-counts (doall (map get-counts article-urls))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              counts (async/merge article-counts)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (while true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (println (&amp;lt;!! counts))))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;with-open opens and reads a file containing a list of news-feed urls, one on each line, and ensure the file will e closed safely. &lt;/li&gt;
&lt;li&gt;line-seq convert file content into feed-urls list.&lt;/li&gt;
&lt;li&gt;Mapping new-links over feed-urls, turn it into a sequence of channels, each of which contains links to new articles.&lt;/li&gt;
&lt;li&gt;Mapping get-counts over that channel sequence, give us a sequence of channels, each of which contains word-counts of the links.&lt;/li&gt;
&lt;li&gt;Finally, async/merge merge this sequence of channels into a single channel that contains anything written to any of its source channels.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;file content ==&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [feed1, feed2, ...] ==&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [(link11, link12, ..), (link21, link22, ...), ..] ==&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [([link11, count11], [link12, count12], ..), ([link21, count21], ..), ..] ==&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                final result after merging&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The code loops forever, printing anything that’s written to that merged channel.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Notes on 7 Concurrent Models in 7 Weeks - Part 5. Communicating Sequential Processes&lt;/p&gt;
    
    </summary>
    
      <category term="并发" scheme="http://ijustloveses.github.io/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="并发" scheme="http://ijustloveses.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="7日7并发模型" scheme="http://ijustloveses.github.io/tags/7%E6%97%A57%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="笔记" scheme="http://ijustloveses.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="CSP" scheme="http://ijustloveses.github.io/tags/CSP/"/>
    
  </entry>
  
  <entry>
    <title>Tricks and Tips on Hexo</title>
    <link href="http://ijustloveses.github.io/2016/06/28/hexo-tricks/"/>
    <id>http://ijustloveses.github.io/2016/06/28/hexo-tricks/</id>
    <published>2016-06-28T19:14:10.000Z</published>
    <updated>2016-06-30T05:21:36.000Z</updated>
    
    <content type="html">&lt;p&gt;Tricks and Tips on Hexo&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Tags-amp-Categories&quot;&gt;&lt;a href=&quot;#Tags-amp-Categories&quot; class=&quot;headerlink&quot; title=&quot;Tags &amp;amp; Categories&quot;&gt;&lt;/a&gt;Tags &amp;amp; Categories&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Next 主题需要手动生成 tags &amp;amp; categories，使用 hexo new page tags(categories) 命令，以 page 为模版&lt;/li&gt;
&lt;li&gt;categories 分类，我通常只设置一个；据说设置多个时可能变成分级分类，而不是多个分类并列，未实践&lt;/li&gt;
&lt;li&gt;tags &amp;amp; categories 是中文时，如果想要 url 中是英文，可以在 _config.yml 的 category_map &amp;amp; tag_map 中设置&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;静态博客文件和代码分开版本管理&quot;&gt;&lt;a href=&quot;#静态博客文件和代码分开版本管理&quot; class=&quot;headerlink&quot; title=&quot;静态博客文件和代码分开版本管理&quot;&gt;&lt;/a&gt;静态博客文件和代码分开版本管理&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;hexo g 生成的静态页面，通常在 master 分支管理&lt;/li&gt;
&lt;li&gt;源码另外在 src 分支管理&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;SEO-搜索引擎优化&quot;&gt;&lt;a href=&quot;#SEO-搜索引擎优化&quot; class=&quot;headerlink&quot; title=&quot;SEO 搜索引擎优化&quot;&gt;&lt;/a&gt;SEO 搜索引擎优化&lt;/h3&gt;&lt;p&gt;参见&lt;br&gt;&lt;a href=&quot;http://www.arao.me/2015/hexo-next-theme-optimize-seo/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;动动手指，不限于NexT主题的Hexo优化（SEO篇）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/619dab2d3c08&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo干货系列：（六）hexo提交搜索引擎（百度+谷歌）&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;常见问题解决&quot;&gt;&lt;a href=&quot;#常见问题解决&quot; class=&quot;headerlink&quot; title=&quot;常见问题解决&quot;&gt;&lt;/a&gt;常见问题解决&lt;/h3&gt;&lt;p&gt;Refer: &lt;a href=&quot;http://theme-next.iissnan.com/faqs.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;常见问题&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;TypeError-Cannot-set-property-‘lastIndex’-of-undefined&quot;&gt;&lt;a href=&quot;#TypeError-Cannot-set-property-‘lastIndex’-of-undefined&quot; class=&quot;headerlink&quot; title=&quot;TypeError: Cannot set property ‘lastIndex’ of undefined&quot;&gt;&lt;/a&gt;TypeError: Cannot set property ‘lastIndex’ of undefined&lt;/h5&gt;&lt;p&gt;这个错误在 hexo g 生成静态网页时发生，在 _config.yml 中，找到 auto_detect 并设置为 false，解决&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Tricks and Tips on Hexo&lt;/p&gt;
    
    </summary>
    
      <category term="misc" scheme="http://ijustloveses.github.io/categories/misc/"/>
    
    
      <category term="hexo" scheme="http://ijustloveses.github.io/tags/hexo/"/>
    
      <category term="blog" scheme="http://ijustloveses.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>7周7并发模型 P2 - FP with Clojure</title>
    <link href="http://ijustloveses.github.io/2016/06/28/7concurrent-models-in-7weeks-part2/"/>
    <id>http://ijustloveses.github.io/2016/06/28/7concurrent-models-in-7weeks-part2/</id>
    <published>2016-06-28T18:27:25.000Z</published>
    <updated>2016-06-29T06:24:10.000Z</updated>
    
    <content type="html">&lt;p&gt;Notes on 7 Concurrent Models in 7 Weeks - Part 2. Functional Programming with Clojure&lt;/p&gt;
&lt;p&gt;The rules about locking apply only to data that is both shared between threads and might change, in other words shared mutable state.&lt;/p&gt;
&lt;p&gt;Functional programs have no mutable state, so they cannot suffer from any of the problems associated with shared mutable state.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;The-Perils-of-Mutable-State&quot;&gt;&lt;a href=&quot;#The-Perils-of-Mutable-State&quot; class=&quot;headerlink&quot; title=&quot;The Perils of Mutable State&quot;&gt;&lt;/a&gt;The Perils of Mutable State&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Hidden Mutable State&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DateParser&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; DateFormat format = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;string&quot;&gt;&quot;yyyy-MM-dd&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Date &lt;span class=&quot;title&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String s)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; ParseException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; format.parse(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;It looks like thread-safe, but it is &lt;strong&gt;NOT&lt;/strong&gt;, because SimpleDateFormat() has mutable state buried deep within.&lt;/p&gt;
&lt;p&gt;In Java or C, there’s no way to tell from its API that SimpleDateFormat isn’t thread-safe.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Escapologist Mutable State&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Tournament&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; List&amp;lt;Player&amp;gt; players = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedList&amp;lt;Player&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addPlayer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Player p)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        players.add(p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; Iterator&amp;lt;Player&amp;gt; &lt;span class=&quot;title&quot;&gt;getPlayerIterator&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; players.iterator();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;It looks like thread-safe, single private variable protected by synchronized functions, but it is &lt;strong&gt;NOT&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The iterator returned by getPlayerIterator() still references the mutable state contained within players.&lt;/p&gt;
&lt;p&gt;If another thread calls addPlayer() while the iterator is in use, we’ll see a ConcurrentModificationException or worse. &lt;/p&gt;
&lt;h3 id=&quot;Parallelism-with-Clojure&quot;&gt;&lt;a href=&quot;#Parallelism-with-Clojure&quot; class=&quot;headerlink&quot; title=&quot;Parallelism with Clojure&quot;&gt;&lt;/a&gt;Parallelism with Clojure&lt;/h3&gt;&lt;h5 id=&quot;different-version-of-sum&quot;&gt;&lt;a href=&quot;#different-version-of-sum&quot; class=&quot;headerlink&quot; title=&quot;different version of sum&quot;&gt;&lt;/a&gt;different version of sum&lt;/h5&gt;&lt;p&gt;recursive version&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn recursive-sum [numbers]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (if (empty? numbers)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        0(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        + (first numbers) (recursive-sum (rest numbers)))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;full reduce version&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn reduce-sum [numbers]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (reduce (fn [acc x] (+ acc x)) 0 numbers))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;simple reduce version&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn sum [numbers]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (reduce + numbers))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;parallel version&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(ns sum.core&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (:require [clojure.core.reducers :as r]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn parallel-sum [numbers]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (r/fold + numbers))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;performance compare between sum &amp;amp; parallel-sum&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sum.core=&amp;gt; (def numbers (into []  (range 0 10000000)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sum.core=&amp;gt; (time (sum numbers))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Elapsed time: 1099.154 msecs&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49999995000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sum.core=&amp;gt; (time (sum numbers))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Elapsed time: 125.349 msecs&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49999995000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sum.core=&amp;gt; (time (parallel-sum numbers))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Elapsed time: 236.609 msecs&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49999995000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sum.core=&amp;gt; (time (parallel-sum numbers))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Elapsed time: 49.835 msecs&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49999995000000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;As is often the case with code on JVM, we have to run more than once to give the JIT optimizer a chance to kick in and get a representative time.&lt;/p&gt;
&lt;h5 id=&quot;Counting-Words-Functionally-sequential-version&quot;&gt;&lt;a href=&quot;#Counting-Words-Functionally-sequential-version&quot; class=&quot;headerlink&quot; title=&quot;Counting Words Functionally - sequential version&quot;&gt;&lt;/a&gt;Counting Words Functionally - sequential version&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;Map basis&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (def counts &amp;#123;&amp;quot;apple&amp;quot; 2 &amp;quot;orange&amp;quot; 1&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;user/counts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (get counts &amp;quot;apple&amp;quot; 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (get counts &amp;quot;banana&amp;quot; 0)           &amp;lt;-- get simply looks up a key in the map and either returns its value or returns a default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (assoc counts &amp;quot;banana&amp;quot; 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;banana&amp;quot; 1, &amp;quot;orange&amp;quot; 1, &amp;quot;apple&amp;quot; 2&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (assoc counts &amp;quot;apple&amp;quot; 3)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;orange&amp;quot; 1, &amp;quot;apple&amp;quot; 3&amp;#125;                  &amp;lt;-- assoc takes a map with a key/value and returns a NEW map with the key mapped to the value.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Frequency&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn word-frequencies [words]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (reduce&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (fn [counts word] (assoc counts word (inc (get counts word 0))))           &amp;lt;-- for each word, update frequency from counts and make a new map&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&amp;#125; words))                                                                 &amp;lt;-- init value = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;And actually clojure has a standard lib called frequencies(), does the exactly same thing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;get words&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn get-words [text] (re-seq #&amp;quot;\w+&amp;quot; text))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;map &amp;amp;&amp;amp; mapcat&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (map get-words [&amp;quot;one two three&amp;quot; &amp;quot;four five six&amp;quot; &amp;quot;seven eight nine&amp;quot;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;((&amp;quot;one&amp;quot; &amp;quot;two&amp;quot; &amp;quot;three&amp;quot;) (&amp;quot;four&amp;quot; &amp;quot;five&amp;quot; &amp;quot;six&amp;quot;) (&amp;quot;seven&amp;quot; &amp;quot;eight&amp;quot; &amp;quot;nine&amp;quot;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (mapcat get-words [&amp;quot;one two three&amp;quot; &amp;quot;four five six&amp;quot; &amp;quot;seven eight nine&amp;quot;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&amp;quot;one&amp;quot; &amp;quot;two&amp;quot; &amp;quot;three&amp;quot; &amp;quot;four&amp;quot; &amp;quot;five&amp;quot; &amp;quot;six&amp;quot; &amp;quot;seven&amp;quot; &amp;quot;eight&amp;quot; &amp;quot;nine&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;finally, sequential counting function&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn count-words-sequential [pages]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (frequencies (mapcat get-words pages)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;There might be a problem: If pages are huge, since count-words starts by collating words into a huge sequence, maybe end up running out of memory.&lt;/p&gt;
&lt;p&gt;As long as the pages variables (returned by get_pages(), which is not covered in this doc) is LAZY, there will be no problem.&lt;/p&gt;
&lt;h5 id=&quot;Counting-Words-Functionally-parallel-version&quot;&gt;&lt;a href=&quot;#Counting-Words-Functionally-parallel-version&quot; class=&quot;headerlink&quot; title=&quot;Counting Words Functionally - parallel version&quot;&gt;&lt;/a&gt;Counting Words Functionally - parallel version&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;count pages in parallel&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(pmap #(frequencies (get-words %)) pages)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;pmap function is applied in parallel and semi-lazy, in that the parallel computation stays ahead of the consumption, but it won’t realize result unless required.&lt;/li&gt;
&lt;li&gt;#(…) reader macro is short for an anonymous function. Arguments are specified with %1, %2, …, and % if it takes only a single argument&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;merge maps with specific merge function&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (def merge-counts (partial merge-with +))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;user/merge-counts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (merge-counts &amp;#123;:x 1 :y 2&amp;#125; &amp;#123;:y 1 :z 1&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;:z 1, :y 3, :x 1&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;put them together&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn count-words-parallel [pages]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (reduce (partial merge-with +)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (pmap #(frequencies (get-words %)) pages)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;performance&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The sequential version takes 140 seconds to count 100,000 pages while the parallel version takes 94 s – a 1.5x speedup. Not very Ideal, why ?&lt;/p&gt;
&lt;p&gt;We’re counting and merging on a page-by-page basis, which results in a large number of merges. We can reduce those merges by counting batches of pages instead of a single page at a time.&lt;/p&gt;
&lt;h5 id=&quot;Counting-Words-Functionally-batch-parallel-version&quot;&gt;&lt;a href=&quot;#Counting-Words-Functionally-batch-parallel-version&quot; class=&quot;headerlink&quot; title=&quot;Counting Words Functionally - batch parallel version&quot;&gt;&lt;/a&gt;Counting Words Functionally - batch parallel version&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;100 pages at a time&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn count-words [pages]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (reduce (partial merge-with +)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (pmap count-words-sequential (partition-all 100 pages))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This version counts the same 100,000 pages in forty-four seconds – a 3.2x speedup. Perfect!&lt;/p&gt;
&lt;h5 id=&quot;Fold&quot;&gt;&lt;a href=&quot;#Fold&quot; class=&quot;headerlink&quot; title=&quot;Fold&quot;&gt;&lt;/a&gt;Fold&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn parallel-frequencies [coll]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (r/fold&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (partial merge-with +)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (fn [counts x] (assoc counts x (inc (get counts x 0))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        coll))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;fold - divide and conquer&lt;/li&gt;
&lt;li&gt;1st func is the combine function&lt;/li&gt;
&lt;li&gt;2nd func is the reduce function&lt;/li&gt;
&lt;li&gt;Above function doesn’t work for word count problem, coz no way to perform binary chop on a lazy sequence (pages)&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;Same-Structure-Different-Evaluation-Order&quot;&gt;&lt;a href=&quot;#Same-Structure-Different-Evaluation-Order&quot; class=&quot;headerlink&quot; title=&quot;Same Structure, Different Evaluation Order&quot;&gt;&lt;/a&gt;Same Structure, Different Evaluation Order&lt;/h5&gt;&lt;p&gt;That is why functional programming allows us to parallelize code so easily.&lt;/p&gt;
&lt;p&gt;The following code snippets all perform the same calculation, return the same result, but they execute in very different orders.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1.  (reduce + (map (partial * 2) (range 10000)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.  (reduce + (doall (map (partial * 2) (range 10000))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.  (reduce + (pmap (partial * 2) (range 10000)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.  (reduce + (r/map (partial * 2) (range 10000)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5.  (r/fold + (r/map (partial * 2) (into [] (range 10000))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;lazy sequence, map &amp;amp; reduce sequentially&lt;/li&gt;
&lt;li&gt;doall forces a lazy sequence to fully realized, then reduce on it&lt;/li&gt;
&lt;li&gt;reduces a semi-lazy sequence, which is generated in parallel&lt;/li&gt;
&lt;li&gt;reduce a single lazy sequence with reduce function constructed by + &amp;amp; (partial*2)&lt;/li&gt;
&lt;li&gt;into force to realize a full sequence, and then reduce in parallel by r/fold which creates a tree of reduce and combine ops&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Future-amp-amp-Promise&quot;&gt;&lt;a href=&quot;#Future-amp-amp-Promise&quot; class=&quot;headerlink&quot; title=&quot;Future &amp;amp;&amp;amp; Promise&quot;&gt;&lt;/a&gt;Future &amp;amp;&amp;amp; Promise&lt;/h3&gt;&lt;h5 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h5&gt;&lt;p&gt;A future takes a body of code and executes it &lt;strong&gt;in another thread&lt;/strong&gt;. Its return value is a future object&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (def sum (future (+ 1 2 3 4 5)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; sum&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;core$future_call$reify__6110@5d4ee7d0: 15&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;We can retrieve the value of a future by dereferencing it with either deref or the shorthand @:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (deref sum)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; @sum&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Dereferencing a future will block until the value is available (or realized).&lt;/p&gt;
&lt;p&gt;A promise is similar to a future in that it’s a value that’s realized asynchronously and accessed with deref or @, which will block until it’s realized. The difference is that creating a promise does not cause any code to run, instead its value is set with deliver.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (def meaning-of-life (promise))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (future (println &amp;quot;The meaning of life is:&amp;quot; @meaning-of-life))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;core$future_call$reify__6110@224e59d9: :pending&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (deliver meaning-of-life 42)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;core$promise$reify__6153@52c9f3c7: 42&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The meaning of life is: 42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Service-with-Future-amp-Promise&quot;&gt;&lt;a href=&quot;#Service-with-Future-amp-Promise&quot; class=&quot;headerlink&quot; title=&quot;Service with Future &amp;amp; Promise&quot;&gt;&lt;/a&gt;Service with Future &amp;amp; Promise&lt;/h5&gt;&lt;p&gt;To create a service that accepts data labled by id number, and processes the data sequentially.&lt;/p&gt;
&lt;p&gt;Problem is that the data don’t arrive at server sequentially.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(def snippets (repeatedly promise))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn accept-snippet [n text]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (deliver (nth snippets n) text))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(future&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (doseq [snippet (map deref snippets)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (println snippet)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This uses doseq, which processes a sequence sequentially. In this case, the sequence it’s processing is a lazy sequence of dereferenced promises, each one of which is bound to snippet.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Notes on 7 Concurrent Models in 7 Weeks - Part 2. Functional Programming with Clojure&lt;/p&gt;
&lt;p&gt;The rules about locking apply only to data that is both shared between threads and might change, in other words shared mutable state.&lt;/p&gt;
&lt;p&gt;Functional programs have no mutable state, so they cannot suffer from any of the problems associated with shared mutable state.&lt;/p&gt;
    
    </summary>
    
      <category term="并发" scheme="http://ijustloveses.github.io/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="并发" scheme="http://ijustloveses.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="7日7并发模型" scheme="http://ijustloveses.github.io/tags/7%E6%97%A57%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="笔记" scheme="http://ijustloveses.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="FP" scheme="http://ijustloveses.github.io/tags/FP/"/>
    
      <category term="Clojure" scheme="http://ijustloveses.github.io/tags/Clojure/"/>
    
  </entry>
  
  <entry>
    <title>7周7并发模型 P7 - The Lambda Architecture</title>
    <link href="http://ijustloveses.github.io/2016/06/28/7concurrent-models-in-7weeks-part7/"/>
    <id>http://ijustloveses.github.io/2016/06/28/7concurrent-models-in-7weeks-part7/</id>
    <published>2016-06-28T18:27:25.000Z</published>
    <updated>2016-06-29T06:24:08.000Z</updated>
    
    <content type="html">&lt;p&gt;Notes on 7 Concurrent Models in 7 Weeks - Part 7. The Lambda Architecture&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;The-Batch-Layer-–-MapReduce&quot;&gt;&lt;a href=&quot;#The-Batch-Layer-–-MapReduce&quot; class=&quot;headerlink&quot; title=&quot;The Batch Layer – MapReduce&quot;&gt;&lt;/a&gt;The Batch Layer – MapReduce&lt;/h3&gt;&lt;h3 id=&quot;The-Speed-Layer-–-Counting-Wiki-Contributions-with-Storm&quot;&gt;&lt;a href=&quot;#The-Speed-Layer-–-Counting-Wiki-Contributions-with-Storm&quot; class=&quot;headerlink&quot; title=&quot;The Speed Layer – Counting Wiki Contributions with Storm&quot;&gt;&lt;/a&gt;The Speed Layer – Counting Wiki Contributions with Storm&lt;/h3&gt;&lt;p&gt;Simulate Logs  –&amp;gt;  Parse Logs  –&amp;gt;  Record Contributions&lt;/p&gt;
&lt;h5 id=&quot;Simulating-the-Contribution-Logs&quot;&gt;&lt;a href=&quot;#Simulating-the-Contribution-Logs&quot; class=&quot;headerlink&quot; title=&quot;Simulating the Contribution Logs&quot;&gt;&lt;/a&gt;Simulating the Contribution Logs&lt;/h5&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RandomContributorSpout&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BaseRichSpout&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Random rand = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Random();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; DateTimeFormatter isoFormat = ISODateTimeFormat.dateTimeNoMillis();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; SpoutOutputCollector collector;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; contributionId = &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/// open() is used during initialization&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Map conf, TopologyContext context, SpoutOutputCollector collector)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.collector = collector;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;declareOutputFields&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(OutputFieldsDeclarer declarer)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        declarer.declare(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Fields(&lt;span class=&quot;string&quot;&gt;&quot;line&quot;&lt;/span&gt;));    &lt;span class=&quot;comment&quot;&gt;/// the tuples have a single field called line&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;nextTuple&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Utils.sleep(rand.nextInt(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ++contributionId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String line = isoFormat.print(DateTime.now()) + &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt; + contributionId + &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt; + rand.nextInt(&lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;dummyusername&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        collector.emit(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Values(line));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Parsing-Log-Entries&quot;&gt;&lt;a href=&quot;#Parsing-Log-Entries&quot; class=&quot;headerlink&quot; title=&quot;Parsing Log Entries&quot;&gt;&lt;/a&gt;Parsing Log Entries&lt;/h5&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// parses log, and outputs tuples with four fields, one for each component of the log line&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ContributionParser&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BaseBasicBolt&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;declareOutputFields&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(OutputFieldsDeclarer declarer)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        declarer.declare(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Fields(&lt;span class=&quot;string&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;contributorId&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;username&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Tuple tuple, BasicOutputCollector collector)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Contribution contribution = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Contribution(tuple.getString(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));    &lt;span class=&quot;comment&quot;&gt;/// Contribution class will convert string into four fields, skip.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        collector.emit(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Values(contribution.timestamp, contribution.id, contribution.contributorId, contribution.username));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Recording-Contributions&quot;&gt;&lt;a href=&quot;#Recording-Contributions&quot; class=&quot;headerlink&quot; title=&quot;Recording Contributions&quot;&gt;&lt;/a&gt;Recording Contributions&lt;/h5&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ContributionRecord&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BaseBasicBolt&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/// why set?? adding an item to a set is idempotent. -- At least once !&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; HashMap&amp;lt;Integer, HashSet&amp;lt;Long&amp;gt;&amp;gt; timestamps = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;Integer, HashSet&amp;lt;Long&amp;gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;declareOutputFields&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(OutputFieldsDeclarer declarer)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Tuple tuple, BasicOutputCollector collector)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        addTimestamp(tuple.getInteger(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;), tuple.getLong(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));    &lt;span class=&quot;comment&quot;&gt;/// contributorId &amp;amp; timestamp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addTimestamp&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; contributorId, &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; timestamp)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        HashSet&amp;lt;Long&amp;gt; contributorTimestamps = timestamps.get(contributorId);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (contributorTimestamps == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            contributorTimestamps = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashSet&amp;lt;Long&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            timestamps.put(contributorId, contributorTimestamps);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        contributorTimestamps.add(timestamp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Building-the-Topology&quot;&gt;&lt;a href=&quot;#Building-the-Topology&quot; class=&quot;headerlink&quot; title=&quot;Building the Topology&quot;&gt;&lt;/a&gt;Building the Topology&lt;/h5&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WikiContributorsTopology&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TopologyBuilder builder = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TopologyBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        builder.setSpout(&lt;span class=&quot;string&quot;&gt;&quot;contribution_spout&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RandomContributorSpout(), &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);    &lt;span class=&quot;comment&quot;&gt;/// 4 is a hint instructing Storm to create 4 workers for our spout&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/// simply sends tuples to a random worker&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        builder.setBolt(&lt;span class=&quot;string&quot;&gt;&quot;contribution_parser&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ContributionParser(), &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;).shuffleGrouping(&lt;span class=&quot;string&quot;&gt;&quot;contribution_spout&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/// all tuples with the same values for a set of fields (in our case, the contributorId field)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        builder.setBolt(&lt;span class=&quot;string&quot;&gt;&quot;contribution_recorder&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ContributionRecord(), &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;).fieldsGrouping(&lt;span class=&quot;string&quot;&gt;&quot;contribution_parser&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Fields(&lt;span class=&quot;string&quot;&gt;&quot;contributorId&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        LocalCluster cluster = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LocalCluster();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Config conf = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Config();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cluster.submitTopology(&lt;span class=&quot;string&quot;&gt;&quot;wiki-contributors&quot;&lt;/span&gt;, conf, builder.createTopology());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Thread.sleep(&lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cluster.shutdown();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Notes on 7 Concurrent Models in 7 Weeks - Part 7. The Lambda Architecture&lt;/p&gt;
    
    </summary>
    
      <category term="并发" scheme="http://ijustloveses.github.io/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="并发" scheme="http://ijustloveses.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="7日7并发模型" scheme="http://ijustloveses.github.io/tags/7%E6%97%A57%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="笔记" scheme="http://ijustloveses.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Lambda Architecture" scheme="http://ijustloveses.github.io/tags/Lambda-Architecture/"/>
    
  </entry>
  
  <entry>
    <title>7周7并发模型 P4 - Actors with Elixir</title>
    <link href="http://ijustloveses.github.io/2016/06/28/7concurrent-models-in-7weeks-part4/"/>
    <id>http://ijustloveses.github.io/2016/06/28/7concurrent-models-in-7weeks-part4/</id>
    <published>2016-06-28T18:27:25.000Z</published>
    <updated>2016-06-29T06:22:40.000Z</updated>
    
    <content type="html">&lt;p&gt;Notes on 7 Concurrent Models in 7 Weeks - Part 4. Actors with Elixir&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Functional programming avoids the problems associated with shared mutable state by avoiding mutable state. &lt;/p&gt;
&lt;p&gt;Actor programming, by contrast, retains mutable state but avoids sharing it.&lt;/p&gt;
&lt;p&gt;An actor is like an object in an OO program, it encapsulates state and communicates with other actors by exchanging messages.&lt;/p&gt;
&lt;h3 id=&quot;Basic-Messages-and-Mailboxes&quot;&gt;&lt;a href=&quot;#Basic-Messages-and-Mailboxes&quot; class=&quot;headerlink&quot; title=&quot;Basic: Messages and Mailboxes&quot;&gt;&lt;/a&gt;Basic: Messages and Mailboxes&lt;/h3&gt;&lt;h5 id=&quot;First-Actor&quot;&gt;&lt;a href=&quot;#First-Actor&quot; class=&quot;headerlink&quot; title=&quot;First Actor&quot;&gt;&lt;/a&gt;First Actor&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defmodule Talker do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def loop do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        receive do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:greet, name&amp;#125; -&amp;gt; IO.puts(&amp;quot;Hello #&amp;#123;name&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:celebrate, name, age&amp;#125; -&amp;gt; IO.puts(&amp;quot;Here&amp;apos;s to another #&amp;#123;age&amp;#125; years, #&amp;#123;name&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        loop                        --- Note: implements an infinite loop by calling itself recursively&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pid = spawn(&amp;amp;Talker.loop/0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;send(pid, &amp;#123;:greet, &amp;quot;Huey&amp;quot;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;send(pid, &amp;#123;:celebrate, &amp;quot;Louie&amp;quot;, 16&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sleep(1000)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Messages are sent asynchronously. Instead of being sent directly to an actor, they are placed in a mailbox.&lt;/li&gt;
&lt;li&gt;This means that actors are decoupled, actors run at their own speed and don’t block when sending messages.&lt;/li&gt;
&lt;li&gt;An actor runs concurrently with other actors but handles messages sequentially, in the order they were added to the mailbox.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Above sample uses sleeps(1000) for a second to allow messages to be processed before exiting. This is an unsatisfactory solution.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defmodule Talker do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def loop do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        receive do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:greet, name&amp;#125; -&amp;gt; IO.puts(&amp;quot;Hello #&amp;#123;name&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:celebrate, name, age&amp;#125; -&amp;gt; IO.puts(&amp;quot;Here&amp;apos;s to another #&amp;#123;age&amp;#125; years, #&amp;#123;name&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:shutdown&amp;#125; -&amp;gt; exit(:normal)        --- Note: an explicit way to stop an actor when it finishes all the messages in its queue.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end                                               Remember, an actor will handle messages in its queue sequentially.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       loop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Process.flag(:trap_exit, true)         --- Note: we’ll be notified when the spawned process terminates.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pid = spawn_link(&amp;amp;Talker.loop/0)                 The message that’s sent is a triple form &amp;#123;:EXIT, pid, reason&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;send(pid, &amp;#123;:greet, &amp;quot;Huey&amp;quot;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;send(pid, &amp;#123;:praise, &amp;quot;Dewey&amp;quot;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;send(pid, &amp;#123;:celebrate, &amp;quot;Louie&amp;quot;, 16&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;send(pid, &amp;#123;:shutdown&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;receive do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;:EXIT, ^pid, reason&amp;#125; -&amp;gt; IO.puts(&amp;quot;Talker has exited (#&amp;#123;reason&amp;#125;)&amp;quot;)            --- Note: block here, until it receives exit message&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The ^ (caret) in the receive pattern indicates that instead of binding the second element of the tuple to pid, we want to match a message where the second element has the value that’s already bound to pid.&lt;/p&gt;
&lt;h5 id=&quot;Stateful-Actors&quot;&gt;&lt;a href=&quot;#Stateful-Actors&quot; class=&quot;headerlink&quot; title=&quot;Stateful Actors&quot;&gt;&lt;/a&gt;Stateful Actors&lt;/h5&gt;&lt;p&gt;We don’t need mutable variables to create a stateful actor, but in fact all we need is recursion.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defmodule Counter do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def loop(count) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        receive do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:next&amp;#125; -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                IO.puts(&amp;quot;Current count: #&amp;#123;count&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                loop(count + 1)                     --- Note: loop with count + 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(1)&amp;gt; counter = spawn(Counter, :loop, [1])        --- Note: initialize count to 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(2)&amp;gt; send(counter, &amp;#123;:next&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Current count: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(3)&amp;gt; send(counter, &amp;#123;:next&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Current count: 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Hiding-Messages-Behind-an-API&quot;&gt;&lt;a href=&quot;#Hiding-Messages-Behind-an-API&quot; class=&quot;headerlink&quot; title=&quot;Hiding Messages Behind an API&quot;&gt;&lt;/a&gt;Hiding Messages Behind an API&lt;/h5&gt;&lt;p&gt;A common practice is to provide a set of API, and hide details behind the curtain&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defmodule Counter do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def start(count) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        spawn(__MODULE__, :loop, [count])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def next(counter) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        send(counter, &amp;#123;:next&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def loop(count) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        receive do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:next&amp;#125; -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                IO.puts(&amp;quot;Current count: #&amp;#123;count&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                loop(count + 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(1)&amp;gt; counter = Counter.start(42)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#PID&amp;lt;0.44.0&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(2)&amp;gt; Counter.next(counter)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Current count: 42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(3)&amp;gt; Counter.next(counter)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Current count: 43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Bidirectional-Communication&quot;&gt;&lt;a href=&quot;#Bidirectional-Communication&quot; class=&quot;headerlink&quot; title=&quot;Bidirectional Communication&quot;&gt;&lt;/a&gt;Bidirectional Communication&lt;/h5&gt;&lt;p&gt;What happens if we want to receive a reply? For example, we want Counter actor to return the next number rather than just printing it?&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defmodule Counter do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def start(count) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        spawn(__MODULE__, :loop, [count])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def next(counter) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ref = make_ref()                      --- Note: ref is a unique reference generated by the sender with make_ref(), which is used to ensure that&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        send(counter, &amp;#123;:next, self(), ref&amp;#125;)             the reply will be correctly identified even if there are multiple messages waiting in the client’s mailbox.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        receive do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:ok, ^ref, count&amp;#125; -&amp;gt; count&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def loop(count) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        receive do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:next, sender, ref&amp;#125; -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                send(sender, &amp;#123;:ok, ref, count&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                loop(count + 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Naming-Processes&quot;&gt;&lt;a href=&quot;#Naming-Processes&quot; class=&quot;headerlink&quot; title=&quot;Naming Processes&quot;&gt;&lt;/a&gt;Naming Processes&lt;/h5&gt;&lt;p&gt;What if we don’t know the identifier of the actor to communicate ?&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iex(1)&amp;gt; pid = Counter.start(42)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#PID&amp;lt;0.47.0&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(2)&amp;gt; Process.register(pid, :counter)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(3)&amp;gt; counter = Process.whereis(:counter)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#PID&amp;lt;0.47.0&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(4)&amp;gt; Counter.next(counter)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(6)&amp;gt; send(:counter, &amp;#123;:next, self(), make_ref()&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;:next, #PID&amp;lt;0.45.0&amp;gt;, #Reference&amp;lt;0.0.0.107&amp;gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(7)&amp;gt; receive do msg -&amp;gt; msg end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;:ok, #Reference&amp;lt;0.0.0.107&amp;gt;, 43&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Use this to modify Counter’s API so that it doesn’t require a process identifier each time we call it&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def start(count) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pid = spawn(__MODULE__, :loop, [count])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Process.register(pid, :counter)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pid&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def next do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ref = make_ref()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    send(:counter, &amp;#123;:next, self(), ref&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    receive do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;:ok, ^ref, count&amp;#125; -&amp;gt; count&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Parallel-Map&quot;&gt;&lt;a href=&quot;#Parallel-Map&quot; class=&quot;headerlink&quot; title=&quot;Parallel Map&quot;&gt;&lt;/a&gt;Parallel Map&lt;/h3&gt;&lt;h5 id=&quot;First-class-functions&quot;&gt;&lt;a href=&quot;#First-class-functions&quot; class=&quot;headerlink&quot; title=&quot;First class functions&quot;&gt;&lt;/a&gt;First class functions&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iex(1)&amp;gt; Enum.map([1, 2, 3, 4], fn(x) -&amp;gt; x * 2 end)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[2, 4, 6, 8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(2)&amp;gt; Enum.map([1, 2, 3, 4], &amp;amp;(&amp;amp;1 * 2))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[2, 4, 6, 8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(3)&amp;gt; Enum.reduce([1, 2, 3, 4], 0, &amp;amp;(&amp;amp;1 + &amp;amp;2))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(4)&amp;gt; double = &amp;amp;(&amp;amp;1 * 2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#Function&amp;lt;erl_eval.6.80484245&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(5)&amp;gt; double.(3)                   &amp;lt;-- call anonymous function with the . (apply) operator&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(6)&amp;gt; twice = fn(fun) -&amp;gt; fn(x) -&amp;gt; fun.(fun.(x)) end end        &amp;lt;-- a function that takes an anonymous function as parameter and returns a function&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#Function&amp;lt;erl_eval.6.80484245&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(7)&amp;gt; twice.(double).(3)             &amp;lt;--- equals (twice.(double)).(3)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Parallel-Map-Implementation&quot;&gt;&lt;a href=&quot;#Parallel-Map-Implementation&quot; class=&quot;headerlink&quot; title=&quot;Parallel Map Implementation&quot;&gt;&lt;/a&gt;Parallel Map Implementation&lt;/h5&gt;&lt;p&gt;Enum.map can be used to map a function over a collection sequentially, and here’s an alternative that do it in parallel&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defmodule Parallel do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def map(collection, fun) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        parent = self()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        processes = Enum.map(collection, fn(e) -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            spawn_link(fn() -&amp;gt;                          &amp;lt;-- create a process for each element.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                send(parent, &amp;#123;self(), fun.(e)&amp;#125;)         &amp;lt;-- each of processes applies fun to the element and sends result back&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            end)                                        &amp;lt;-- self() here is the process, not parent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Enum.map(processes, fn(pid) -&amp;gt;                  &amp;lt;-- in parent process, block and wait&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            receive do                                  &amp;lt;-- parent wait result sequentially&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;^pid, result&amp;#125; -&amp;gt; result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The whole logic is like spawning multiple process to handle multiple elements, and join the result together. Test it:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iex(1)&amp;gt; slow_double = fn(x) -&amp;gt; :timer.sleep(1000); x * 2 end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#Function&amp;lt;6.80484245 in :erl_eval.expr/5&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(2)&amp;gt; :timer.tc(fn() -&amp;gt; Enum.map([1, 2, 3, 4], slow_double) end)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;4003414, [2, 4, 6, 8]&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(3)&amp;gt; :timer.tc(fn() -&amp;gt; Parallel.map([1, 2, 3, 4], slow_double) end)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;1001131, [2, 4, 6, 8]&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Error-Handling-and-Resilience&quot;&gt;&lt;a href=&quot;#Error-Handling-and-Resilience&quot; class=&quot;headerlink&quot; title=&quot;Error Handling and Resilience&quot;&gt;&lt;/a&gt;Error Handling and Resilience&lt;/h3&gt;&lt;h5 id=&quot;Example-of-HashDict&quot;&gt;&lt;a href=&quot;#Example-of-HashDict&quot; class=&quot;headerlink&quot; title=&quot;Example of HashDict&quot;&gt;&lt;/a&gt;Example of HashDict&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iex(1)&amp;gt; d = HashDict.new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#HashDict&amp;lt;[]&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(2)&amp;gt; d1 = Dict.put(d, :a, &amp;quot;A value for a&amp;quot;)           &amp;lt;-- we can see, d is immutable, and Dict.put will create a new HashDict instance&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#HashDict&amp;lt;[a: &amp;quot;A value for a&amp;quot;]&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(4)&amp;gt; d1[:a]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;A value for a&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;A-Cache-Actor&quot;&gt;&lt;a href=&quot;#A-Cache-Actor&quot; class=&quot;headerlink&quot; title=&quot;A Cache Actor&quot;&gt;&lt;/a&gt;A Cache Actor&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defmodule Cache do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def loop(pages, size) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        receive do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:put, url, page&amp;#125; -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                new_pages = Dict.put(pages, url, page)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                new_size = size + byte_size(page)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                loop(new_pages, new_size)            &amp;lt;-- loop with new pages and size&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:get, sender, ref, url&amp;#125; -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                send(sender, &amp;#123;:ok, ref, pages[url]&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                loop(pages, size)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:size, sender, ref&amp;#125; -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                send(sender, &amp;#123;:ok, ref, size&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                loop(pages, size)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:terminate&amp;#125; -&amp;gt;                  &amp;lt;-- Terminate request - don&amp;apos;t recurse&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def start_link do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pid = spawn_link(__MODULE__, :loop, [HashDict.new, 0])     &amp;lt;-- init values&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Process.register(pid, :cache)               &amp;lt;-- register a name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pid&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def put(url, page) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        send(:cache, &amp;#123;:put, url, page&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def get(url) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ref = make_ref()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        send(:cache, &amp;#123;:get, self(), ref, url&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        receive do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:ok, ^ref, page&amp;#125; -&amp;gt; page&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def size do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ......         &amp;lt;-- just like get()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def terminate do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        send(:cache, &amp;#123;:terminate&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Actor-fails-when-putting-cache-invalid-data&quot;&gt;&lt;a href=&quot;#Actor-fails-when-putting-cache-invalid-data&quot; class=&quot;headerlink&quot; title=&quot;Actor fails when putting cache invalid data&quot;&gt;&lt;/a&gt;Actor fails when putting cache invalid data&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(5)&amp;gt; Cache.put(&amp;quot;paulbutcher.com&amp;quot;, nil)         &amp;lt;-- use nil as value to put&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;:put, &amp;quot;paulbutcher.com&amp;quot;, nil&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(6)&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=ERROR REPORT==== 22-Aug-2013::16:18:41 ===&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Error in process &amp;lt;0.47.0&amp;gt; with exit value: &amp;#123;badarg,[&amp;#123;erlang,byte_size,[nil],[]&amp;#125; …&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;** (EXIT from #PID&amp;lt;0.47.0&amp;gt;) &amp;#123;:badarg, [&amp;#123;:erlang, :byte_size, [nil], []&amp;#125;, …&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;How Elixir handle failures? Separating error handling out into a separate supervisor process.&lt;/p&gt;
&lt;p&gt;To see how to write such a supervisor, we need to understand links between processes in more detail.&lt;/p&gt;
&lt;h5 id=&quot;Links-Propagate-Abnormal-Termination&quot;&gt;&lt;a href=&quot;#Links-Propagate-Abnormal-Termination&quot; class=&quot;headerlink&quot; title=&quot;Links Propagate Abnormal Termination&quot;&gt;&lt;/a&gt;Links Propagate Abnormal Termination&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defmodule LinkTest do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def loop do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        receive do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:exit_because, reason&amp;#125; -&amp;gt; exit(reason)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:link_to, pid&amp;#125; -&amp;gt; Process.link(pid)         &amp;lt;-- link two processes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:EXIT, pid, reason&amp;#125; -&amp;gt; IO.puts(&amp;quot;#&amp;#123;inspect(pid)&amp;#125; exited because #&amp;#123;reason&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        loop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(1)&amp;gt; pid1 = spawn(&amp;amp;LinkTest.loop/0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(2)&amp;gt; pid2 = spawn(&amp;amp;LinkTest.loop/0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(3)&amp;gt; send(pid1, &amp;#123;:link_to, pid2&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(4)&amp;gt; send(pid2, &amp;#123;:exit_because, :bad_thing_happened&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;:exit_because, :bad_thing_happened&amp;#125;          &amp;lt;--- no message printed by pid1 describing why pid2 exited&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(5)&amp;gt; Process.info(pid2, :status)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(6)&amp;gt; Process.info(pid1, :status)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil                                           &amp;lt;--- both our processes have terminated, not just pid2.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(1)&amp;gt; pid1 = spawn(&amp;amp;LinkTest.loop/0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(2)&amp;gt; pid2 = spawn(&amp;amp;LinkTest.loop/0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(3)&amp;gt; send(pid1, &amp;#123;:link_to, pid2&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(4)&amp;gt; send(pid1, &amp;#123;:exit_because, :another_bad_thing_happened&amp;#125;)        &amp;lt;-- links are bidirectional&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(5)&amp;gt; Process.info(pid1, :status)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(6)&amp;gt; Process.info(pid2, :status)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil                                           &amp;lt;--- both our processes have terminated, not just pid1.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(1)&amp;gt; pid1 = spawn(&amp;amp;LinkTest.loop/0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#PID&amp;lt;0.47.0&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(2)&amp;gt; pid2 = spawn(&amp;amp;LinkTest.loop/0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#PID&amp;lt;0.49.0&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(3)&amp;gt; send(pid1, &amp;#123;:link_to, pid2&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;:link_to, #PID&amp;lt;0.49.0&amp;gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(4)&amp;gt; send(pid2, &amp;#123;:exit_because, :normal&amp;#125;)    &amp;lt;--- pid2 exit normally&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;:exit_because, :normal&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(5)&amp;gt; Process.info(pid2, :status)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(6)&amp;gt; Process.info(pid1, :status)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;:status, :waiting&amp;#125;                             &amp;lt;--- normal termination does not result in linked processes terminating.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;System-Processes&quot;&gt;&lt;a href=&quot;#System-Processes&quot; class=&quot;headerlink&quot; title=&quot;System Processes&quot;&gt;&lt;/a&gt;System Processes&lt;/h5&gt;&lt;p&gt;A process to trap another’s exit by setting its :trap_exit flag, and this is making it into a system process&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def loop_system do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Process.flag(:trap_exit, true)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    loop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(1)&amp;gt; pid1 = spawn(&amp;amp;LinkTest.loop_system/0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#PID&amp;lt;0.47.0&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(2)&amp;gt; pid2 = spawn(&amp;amp;LinkTest.loop/0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#PID&amp;lt;0.49.0&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(3)&amp;gt; send(pid1, &amp;#123;:link_to, pid2&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;:link_to, #PID&amp;lt;0.49.0&amp;gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(4)&amp;gt; send(pid2, &amp;#123;:exit_because, :yet_another_bad_thing_happened&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;:exit_because, :yet_another_bad_thing_happened&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#PID&amp;lt;0.49.0&amp;gt; exited because yet_another_bad_thing_happened      &amp;lt;-- pid1 gets :EXIT message&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(5)&amp;gt; Process.info(pid2, :status)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(6)&amp;gt; Process.info(pid1, :status)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;:status, :waiting&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;cache-supervisor&quot;&gt;&lt;a href=&quot;#cache-supervisor&quot; class=&quot;headerlink&quot; title=&quot;cache supervisor&quot;&gt;&lt;/a&gt;cache supervisor&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defmodule CacheSupervisor do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def start do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        spawn(__MODULE__, :loop_system, [])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def loop do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pid = Cache.start_link        &amp;lt;-- create Cache Actor and link it with spawn_link&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        receive do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:EXIT, ^pid, :normal&amp;#125; -&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                IO.puts(&amp;quot;Cache exited normally&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                :ok                &amp;lt;-- don&amp;apos;t loop when Cache exited normally&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:EXIT, ^pid, reason&amp;#125; -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                IO.puts(&amp;quot;Cache failed with reason #&amp;#123;inspect reason&amp;#125; - restarting it&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                loop               &amp;lt;-- loop when Cache exited abnormally, and that will recreate Cache Actor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def loop_system do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Process.flag(:trap_exit, true)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        loop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Timeout&quot;&gt;&lt;a href=&quot;#Timeout&quot; class=&quot;headerlink&quot; title=&quot;Timeout&quot;&gt;&lt;/a&gt;Timeout&lt;/h5&gt;&lt;p&gt;Automatically restarting the cache is great, but it’s not a panacea. See example below:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Process 1 sends a :put message to the cache.&lt;/li&gt;
&lt;li&gt;Process 2 sends a :get message to the cache.&lt;/li&gt;
&lt;li&gt;The cache crashes while processing process 1’s message.&lt;/li&gt;
&lt;li&gt;The supervisor restarts the cache, but process 2’s message is lost.&lt;/li&gt;
&lt;li&gt;Process 2 is now deadlocked in a receive, waiting for a reply that will never arrive.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Timeout to rescue&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def get(url) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ref = make_ref()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    send(:cache, &amp;#123;:get, self(), ref, url&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    receive do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;:ok, ^ref, page&amp;#125; -&amp;gt; page&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        after 1000 -&amp;gt; nil              &amp;lt;-- timeout here&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;OTP-Intro&quot;&gt;&lt;a href=&quot;#OTP-Intro&quot; class=&quot;headerlink&quot; title=&quot;OTP Intro&quot;&gt;&lt;/a&gt;OTP Intro&lt;/h3&gt;&lt;h5 id=&quot;Functions-and-Pattern-Matching&quot;&gt;&lt;a href=&quot;#Functions-and-Pattern-Matching&quot; class=&quot;headerlink&quot; title=&quot;Functions and Pattern Matching&quot;&gt;&lt;/a&gt;Functions and Pattern Matching&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defmodule Patterns do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def foo(&amp;#123;x, y&amp;#125;) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        IO.puts(&amp;quot;Got a pair, first element #&amp;#123;x&amp;#125;, second #&amp;#123;y&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def foo(&amp;#123;x, y, z&amp;#125;) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        IO.puts(&amp;quot;Got a triple: #&amp;#123;x&amp;#125;, #&amp;#123;y&amp;#125;, #&amp;#123;z&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(1)&amp;gt; Patterns.foo(&amp;#123;:a, 42, &amp;quot;yahoo&amp;quot;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Got a triple: a, 42, yahoo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(2)&amp;gt; Patterns.foo(&amp;#123;:x, :y&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Got a pair, first element x, second y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(3)&amp;gt; Patterns.foo(&amp;quot;something else&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;** (FunctionClauseError) no function clause matching in Patterns.foo/1  ......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Reimplementing-Cache-with-GenServer&quot;&gt;&lt;a href=&quot;#Reimplementing-Cache-with-GenServer&quot; class=&quot;headerlink&quot; title=&quot;Reimplementing Cache with GenServer&quot;&gt;&lt;/a&gt;Reimplementing Cache with GenServer&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defmodule Cache do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    use GenServer.Behaviour&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def handle_cast(&amp;#123;:put, url, page&amp;#125;, &amp;#123;pages, size&amp;#125;) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        new_pages = Dict.put(pages, url, page)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        new_size = size + byte_size(page)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;:noreply, &amp;#123;new_pages, new_size&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def handle_call(&amp;#123;:get, url&amp;#125;, _from, &amp;#123;pages, size&amp;#125;) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;:reply, pages[url], &amp;#123;pages, size&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def handle_call(&amp;#123;:size&amp;#125;, _from, &amp;#123;pages, size&amp;#125;) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;:reply, size, &amp;#123;pages, size&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;handle_cast(), handles messages that do not require a reply. &lt;/li&gt;
&lt;li&gt;It takes two arguments: the first is the message and the second is the current actor state. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;The return value is a pair of the form {:noreply, new_state}.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;handle_call(), handles messages that require a reply. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;It takes three arguments, the message, the sender, and the current state. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;The return value is a triple of the form {:reply, reply_value, new_state}.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Elixir uses variable names that start with an underscore (“_”) to indicate that they’re unused here, say _from.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;wrapper API to call a GenServer&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def start_link do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    :gen_server.start_link(&amp;#123;:local, :cache&amp;#125;, __MODULE__, &amp;#123;HashDict.new, 0&amp;#125;, [])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def put(url, page) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    :gen_server.cast(:cache, &amp;#123;:put, url, page&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def get(url) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    :gen_server.call(:cache, &amp;#123;:get, url&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def size do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    :gen_server.call(:cache, &amp;#123;:size&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;An-OTP-Supervisor&quot;&gt;&lt;a href=&quot;#An-OTP-Supervisor&quot; class=&quot;headerlink&quot; title=&quot;An OTP Supervisor&quot;&gt;&lt;/a&gt;An OTP Supervisor&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defmodule CacheSupervisor do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def init(_args) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        workers = [worker(Cache, [])]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        supervise(workers, strategy: :one_for_one)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;init() function is called during startup. It takes a single argument (unused here) and simply creates a number of workers and sets them up to be supervised.&lt;/li&gt;
&lt;li&gt;The OTP supervisor behaviour supports a number of different restart strategies, the two most common being one-for-one and one-for-all.&lt;/li&gt;
&lt;li&gt;If a single worker fails, a supervisor using the one-for-all strategy will stop and restart all its workers (even those that didn’t fail). &lt;/li&gt;
&lt;li&gt;A supervisor using a one-for-one strategy, by contrast, will only restart the failed worker.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;wrapper API&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def start_link do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    :supervisor.start_link(__MODULE__, [])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;Nodes&quot;&gt;&lt;a href=&quot;#Nodes&quot; class=&quot;headerlink&quot; title=&quot;Nodes&quot;&gt;&lt;/a&gt;Nodes&lt;/h5&gt;&lt;p&gt;Whenever we create an instance of the Erlang virtual machine, we create a node. Now we’ll see how to create and connect multiple nodes.&lt;/p&gt;
&lt;p&gt;For one node to connect to another, they both need to be named. We name a node by starting the Erlang VM with the –name or –sname options.&lt;/p&gt;
&lt;p&gt;create two nodes&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iex --sname node1@10.99.1.50 --cookie yumyum         &amp;lt;-- an Erlang node will accept connection requests only from nodes that have the same cookie.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex --sname node2@10.99.1.92 --cookie yumyum&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;from the first node&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iex(node1@10.99.1.50)1&amp;gt; Node.self                   &amp;lt;-- query its name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:&amp;quot;node1@10.99.1.50&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(node1@10.99.1.50)2&amp;gt; Node.list                   &amp;lt;-- list the other nodes it knows about, so 1.50 don&amp;apos;t know about 1.92 yet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;connect nodes&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iex(node1@10.99.1.50)3&amp;gt; Node.connect(:&amp;quot;node2@10.99.1.92&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(node1@10.99.1.50)4&amp;gt; Node.list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[:&amp;quot;node2@10.99.1.92&amp;quot;]                               &amp;lt;-- now it knows&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(node2@10.99.1.92)1&amp;gt; Node.list                   &amp;lt;-- Connections are bidirectional&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[:&amp;quot;node1@10.99.1.50&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;remote execution&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iex(node1@10.99.1.50)5&amp;gt; whoami = fn() -&amp;gt; IO.puts(Node.self) end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#Function&amp;lt;20.80484245 in :erl_eval.expr/5&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(node1@10.99.1.50)6&amp;gt; Node.spawn(:&amp;quot;node2@10.99.1.92&amp;quot;, whoami)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#PID&amp;lt;8242.50.0&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node2@10.99.1.92                   &amp;lt;-- not only has one node executed code on another, but the output appeared on the first node.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;remote messaging&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iex(node2@10.99.1.92)1&amp;gt; pid = spawn(Counter, :loop, [42])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#PID&amp;lt;0.51.0&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(node2@10.99.1.92)2&amp;gt; :global.register_name(:counter, pid)       &amp;lt;-- similar to Process.register(), except that the name is cluster-global&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(node1@10.99.1.50)1&amp;gt; Node.connect(:&amp;quot;node2@10.99.1.92&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(node1@10.99.1.50)2&amp;gt; pid = :global.whereis_name(:counter)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#PID&amp;lt;7856.51.0&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(node1@10.99.1.50)3&amp;gt; send(pid, &amp;#123;:next&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;:next&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iex(node1@10.99.1.50)4&amp;gt; send(pid, &amp;#123;:next&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;:next&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Distributed-Word-Count&quot;&gt;&lt;a href=&quot;#Distributed-Word-Count&quot; class=&quot;headerlink&quot; title=&quot;Distributed Word Count&quot;&gt;&lt;/a&gt;Distributed Word Count&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Our solution is divided into three types of actors: one Parser, multiple Counters, and one Accumulator. &lt;/li&gt;
&lt;li&gt;The Parser is responsible for parsing a Wikipedia dump into pages.&lt;/li&gt;
&lt;li&gt;Counters count words within pages.&lt;/li&gt;
&lt;li&gt;The Accumulator keeps track of total word counts across pages.&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;Counter-–-counting-words&quot;&gt;&lt;a href=&quot;#Counter-–-counting-words&quot; class=&quot;headerlink&quot; title=&quot;Counter – counting words&quot;&gt;&lt;/a&gt;Counter – counting words&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defmodule Counter do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    use GenServer.Behaviour&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def start_link do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        :gen_server.start_link(__MODULE__, nil, [])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def deliver_page(pid, ref, page) do                &amp;lt;-- will be called by Parser to reply request_page() request&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        :gen_server.cast(pid, &amp;#123;:deliver_page, ref, page&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def init(_args) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Parser.request_page(self())      &amp;lt;-- kicks things off by calling Parser.request_page() during initialization&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;:ok, nil&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def handle_cast(&amp;#123;:deliver_page, ref, page&amp;#125;, state) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Parser.request_page(self())          &amp;lt;-- starts by requesting another page&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        words = String.split(page)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        counts = Enum.reduce(words, HashDict.new, fn(word, counts) -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Dict.update(counts, word, 1, &amp;amp;(&amp;amp;1 + 1))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            end)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Accumulator.deliver_counts(ref, counts)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;:noreply, state&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Counter-Supervisor&quot;&gt;&lt;a href=&quot;#Counter-Supervisor&quot; class=&quot;headerlink&quot; title=&quot;Counter Supervisor&quot;&gt;&lt;/a&gt;Counter Supervisor&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defmodule CounterSupervisor do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    use Supervisor.Behaviour&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def start_link(num_counters) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        :supervisor.start_link(__MODULE__, num_counters)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def init(num_counters) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        workers = Enum.map(1..num_counters, fn(n) -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            worker(Counter, [], id: &amp;quot;counter#&amp;#123;n&amp;#125;&amp;quot;)         &amp;lt;-- create num_counters Counters with distince id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        supervise(workers, strategy: :one_for_one)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Accumulator-keeps-track-of-Totals&quot;&gt;&lt;a href=&quot;#Accumulator-keeps-track-of-Totals&quot; class=&quot;headerlink&quot; title=&quot;Accumulator keeps track of Totals&quot;&gt;&lt;/a&gt;Accumulator keeps track of Totals&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defmodule Accumulator do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    use GenServer.Behaviour&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def start_link do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        :gen_server.start_link(&amp;#123;:global, :wc_accumulator&amp;#125;, __MODULE__,       &amp;lt;-- it is global&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;HashDict.new, HashSet.new&amp;#125;, [])           &amp;lt;-- hashdict for total counts &amp;amp; hashset for processed pages&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def deliver_counts(ref, counts) do         &amp;lt;-- called by Counter after it counts the page&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        :gen_server.cast(&amp;#123;:global, :wc_accumulator&amp;#125;, &amp;#123;:deliver_counts, ref, counts&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def handle_cast(&amp;#123;:deliver_counts, ref, counts&amp;#125;, &amp;#123;totals, processed_pages&amp;#125;) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if Set.member?(processed_pages, ref) do       &amp;lt;-- in case that the count are received multi times&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:noreply, &amp;#123;totals, processed_pages&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            new_totals = Dict.merge(totals, counts, fn(_k, v1, v2) -&amp;gt; v1 + v2 end)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            new_processed_pages = Set.put(processed_pages, ref)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Parser.processed(ref)              &amp;lt;-- call this after processing pages&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;:noreply, &amp;#123;new_totals, new_processed_pages&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Parser-Parsing-and-Fault-Tolerance&quot;&gt;&lt;a href=&quot;#Parser-Parsing-and-Fault-Tolerance&quot; class=&quot;headerlink&quot; title=&quot;Parser - Parsing and Fault Tolerance&quot;&gt;&lt;/a&gt;Parser - Parsing and Fault Tolerance&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defmodule Parser do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    use GenServer.Behaviour&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def start_link(filename) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        :gen_server.start_link(&amp;#123;:global, :wc_parser&amp;#125;, __MODULE__, filename, [])    &amp;lt;-- global&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def request_page(pid) do      &amp;lt;-- called by Counter, pid is the id of Counter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        :gen_server.cast(&amp;#123;:global, :wc_parser&amp;#125;, &amp;#123;:request_page, pid&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def processed(ref) do      &amp;lt;-- called by Accumulator after merge page count&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        :gen_server.cast(&amp;#123;:global, :wc_parser&amp;#125;, &amp;#123;:processed, ref&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def init(filename) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        xml_parser = Pages.start_link(filename)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;:ok, &amp;#123;ListDict.new, xml_parser&amp;#125;&amp;#125;     &amp;lt;-- ListDict for pending pages which have been sent but not yet processed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def handle_cast(&amp;#123;:request_page, pid&amp;#125;, &amp;#123;pending, xml_parser&amp;#125;) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        new_pending = deliver_page(pid, pending, Pages.next(xml_parser))     &amp;lt;-- implemented below&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;:noreply, &amp;#123;new_pending, xml_parser&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def handle_cast(&amp;#123;:processed, ref&amp;#125;, &amp;#123;pending, xml_parser&amp;#125;) do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        new_pending = Dict.delete(pending, ref)      &amp;lt;-- if processed, removed from pending pages&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;:noreply, &amp;#123;new_pending, xml_parser&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    defp deliver_page(pid, pending, page) when nil?(page) do    &amp;lt;-- abnormal workflow when no new pages to sent, in this case send pending pages&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if Enum.empty?(pending) do         &amp;lt;-- no pages pending, do nothing&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pending # Nothing to do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;ref, prev_page&amp;#125; = List.last(pending)      &amp;lt;-- ref is also saved in pending, so ref will always be the same for the same page&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Counter.deliver_page(pid, ref, prev_page)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Dict.put(Dict.delete(pending, ref), ref, prev_page)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    defp deliver_page(pid, pending, page) do     &amp;lt;-- normal workflow when there are still pages not sent yet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ref = make_ref()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Counter.deliver_page(pid, ref, page)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Dict.put(pending, ref, page)            &amp;lt;-- not processed yet, so add to pending pages&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;From the code, the whole framework works in “At Least Once” strategy for false tolerance, which means the page could be sent to different Counter for multiple times.&lt;/p&gt;
&lt;p&gt;To avoid duplicity, the same page is always linked to the same ref, which is kept by Parser’s pending page variable and Accumulator’s proessed pages variable.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Counter (multiple)                                 Parser (Only one global)                      Accumulator (Only one global)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   |   --------- Parser.request_page ---------&amp;gt;      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   |                                                 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   |   &amp;lt;--- Counter.deliver_page(pid, ref, page) --- |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   |  (could be new page or old page with old ref)   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   |                                                                                                  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   |   ----------------------------------------Accumulator.deliver_counts(ref, counts) ------------&amp;gt;  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   |                                                                                                  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   |                                                 |  &amp;lt;------- Parser.processed(ref)  ------------  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   |                                                 |                                                |&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Notes on 7 Concurrent Models in 7 Weeks - Part 4. Actors with Elixir&lt;/p&gt;
    
    </summary>
    
      <category term="并发" scheme="http://ijustloveses.github.io/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="并发" scheme="http://ijustloveses.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="7日7并发模型" scheme="http://ijustloveses.github.io/tags/7%E6%97%A57%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="笔记" scheme="http://ijustloveses.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Actor" scheme="http://ijustloveses.github.io/tags/Actor/"/>
    
      <category term="Elixir" scheme="http://ijustloveses.github.io/tags/Elixir/"/>
    
  </entry>
  
  <entry>
    <title>7周7并发模型 P3 - Seperate Identity from State in Clojure Way</title>
    <link href="http://ijustloveses.github.io/2016/06/28/7concurrent-models-in-7weeks-part3/"/>
    <id>http://ijustloveses.github.io/2016/06/28/7concurrent-models-in-7weeks-part3/</id>
    <published>2016-06-28T18:27:25.000Z</published>
    <updated>2016-06-29T06:21:10.000Z</updated>
    
    <content type="html">&lt;p&gt;Notes on 7 Concurrent Models in 7 Weeks - Part 3. Seperate Identity from State in Clojure Way&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Atoms-and-Persistent-Data-Structures&quot;&gt;&lt;a href=&quot;#Atoms-and-Persistent-Data-Structures&quot; class=&quot;headerlink&quot; title=&quot;Atoms and Persistent Data Structures&quot;&gt;&lt;/a&gt;Atoms and Persistent Data Structures&lt;/h3&gt;&lt;p&gt;A pure functional language provides no support for mutable data whatsoever. Clojure, by contrast, provides a number of different types of concurrency-aware mutable variables. Clojure’s mutable variables allow us to handle real-world side effects while&lt;br&gt;remaining safe and consistent.&lt;/p&gt;
&lt;h5 id=&quot;Atom-Intro&quot;&gt;&lt;a href=&quot;#Atom-Intro&quot; class=&quot;headerlink&quot; title=&quot;Atom Intro&quot;&gt;&lt;/a&gt;Atom Intro&lt;/h5&gt;&lt;p&gt;An atom is an atomic variable, which is built on top of java.util.concurrent.atomic&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (def my-atom (atom 42))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;user/my-atom&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (deref my-atom)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; @my-atom&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (swap! my-atom inc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; @my-atom&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (swap! my-atom + 2)     ---&amp;gt;  + my-atom 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (reset! my-atom 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; @my-atom&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (def session (atom &amp;#123;&amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;user/session&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (swap! session assoc :username &amp;quot;paul&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;:username &amp;quot;paul&amp;quot;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (swap! session assoc :session-id 1234)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;:session-id 1234, :username &amp;quot;paul&amp;quot;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;A-Multithreaded-Web-Service-with-Mutable-State&quot;&gt;&lt;a href=&quot;#A-Multithreaded-Web-Service-with-Mutable-State&quot; class=&quot;headerlink&quot; title=&quot;A Multithreaded Web Service with Mutable State&quot;&gt;&lt;/a&gt;A Multithreaded Web Service with Mutable State&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(def players (atom ()))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn list-players []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	(response (json/encode @players)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn create-player [player-name]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	(swap! players conj player-name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	(status (response &amp;quot;&amp;quot;) 201))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defroutes app-routes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (GET &amp;quot;/players&amp;quot; [] (list-players))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (PUT &amp;quot;/players/:player-name&amp;quot; [player-name] (create-player player-name)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn -main [&amp;amp; args]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (run-jetty (site app-routes) &amp;#123;:port 3000&amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The embedded Jetty server is multithreaded, so our code will need to be thread-safe.&lt;/p&gt;
&lt;p&gt;What happens if one thread adds an entry to the players list while another is iterating over it?&lt;/p&gt;
&lt;p&gt;This code is thread-safe because all of Clojure’s data structures and collections are persistent, ectors, maps, and sets …&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;They makes use of structure sharing, makes use of part of the original, and try to avoid copying when necessary&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;They provide similar performance bounds to their nonpersistent equivalents in languages like Ruby and Java.&lt;/p&gt;
&lt;p&gt;Once a thread has a reference to a data structure, it will see no changes made by any other thread. (works just like Copy On Write)&lt;/p&gt;
&lt;p&gt;Persistent data structures separate identity from state.&lt;/p&gt;
&lt;h5 id=&quot;Retries&quot;&gt;&lt;a href=&quot;#Retries&quot; class=&quot;headerlink&quot; title=&quot;Retries&quot;&gt;&lt;/a&gt;Retries&lt;/h5&gt;&lt;p&gt;Atoms can be lockless, internally they make use of the compareAndSet() method in java.util.concurrent.AtomicReference, fast and don’t block.&lt;/p&gt;
&lt;p&gt;swap! needs to handle the case where the atom has been changed by another thread in between it generating a new value and trying to change that value.&lt;/p&gt;
&lt;p&gt;If that case happens, swap! will retry, discard the value returned by the function and call it again with the atom’s new value.&lt;/p&gt;
&lt;p&gt;We saw something very similar to this already when using ConcurrentHashMap&lt;/p&gt;
&lt;h5 id=&quot;validators&quot;&gt;&lt;a href=&quot;#validators&quot; class=&quot;headerlink&quot; title=&quot;validators&quot;&gt;&lt;/a&gt;validators&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (def non-negative (atom 0 :validator #(&amp;gt;= % 0)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;user/non-negative&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (reset! non-negative 42)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (reset! non-negative -1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IllegalStateException Invalid reference state&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;A validator is a function that’s called whenever an attempt is made to change the value of the atom.&lt;/p&gt;
&lt;p&gt;The validator is called before the value of the atom has been changed and, just like the function that’s passed to swap!,&lt;/p&gt;
&lt;p&gt;it might be called more than once if swap! retries. Therefore, validators also must not have any side effects.&lt;/p&gt;
&lt;h5 id=&quot;Watchers&quot;&gt;&lt;a href=&quot;#Watchers&quot; class=&quot;headerlink&quot; title=&quot;Watchers&quot;&gt;&lt;/a&gt;Watchers&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (def a (atom 0))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;user/a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (add-watch a :print #(println &amp;quot;Changed from &amp;quot; %3 &amp;quot; to &amp;quot; %4))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;Atom@542ab4b1: 0&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (swap! a + 2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Changed from 0 to 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;A watcher is added by providing both a key and a watch function. The key is used to identify the watcher (to delete etc …). &lt;/p&gt;
&lt;p&gt;The watch function is called whenever the value of the atom changes. &lt;/p&gt;
&lt;p&gt;It is given four arguments — the key that was given to add-watch, a reference to the atom, the previous value, and the new value.&lt;/p&gt;
&lt;p&gt;Watch functions are called after the value has changed and will only be called once, no matter how often swap! retries. So side effect is allowed.&lt;/p&gt;
&lt;p&gt;When the watch function is called, the atom’s value may already have changed again, so watch functions should always use the values passed as arguments and never dereference the atom.&lt;/p&gt;
&lt;h5 id=&quot;hybrid-web-server-example&quot;&gt;&lt;a href=&quot;#hybrid-web-server-example&quot; class=&quot;headerlink&quot; title=&quot;hybrid web server example&quot;&gt;&lt;/a&gt;hybrid web server example&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;session id&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(def last-session-id (atom 0))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn next-session-id []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (swap! last-session-id inc))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;session, renew&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(def sessions (atom &amp;#123;&amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn now []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (System/currentTimeMillis))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn new-session [initial]           &amp;lt;-- it is a hash map&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (let [session-id (next-session-id)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          session (assoc initial :last-referenced (atom (now)))]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (swap! sessions assoc session-id session)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    session-id))                     &amp;lt;-- return &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn get-session [id]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (let [session (@sessions id)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (reset! (:last-referenced session) (now))    &amp;lt;-- renew&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        session))                    &amp;lt;-- return&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;session expire scheduler&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn session-expiry-time []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (- (now) (* 10 60 1000)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn expired? [session]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&amp;lt; @(:last-referenced session) (session-expiry-time)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn sweep-sessions []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (swap! sessions #(remove-vals % expired?)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(def session-sweeper&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (schedule &amp;#123;:min (range 0 60 5)&amp;#125; sweep-sessions))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;put snippet into session&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn create-session []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (let [snippets (repeatedly promise)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          translations (delay (map translate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                   (strings-&amp;gt;sentences (map deref snippets))))]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (new-session &amp;#123;:snippets snippets :translations translations&amp;#125;)))          &amp;lt;-- snippets and transactions in session&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Still using an infinite lazy sequence of promises to represent incoming snippets and a map over snippets to represent translations&lt;/p&gt;
&lt;p&gt;But these are now both stored in a session, together with the :last-referenced&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn accept-snippet [session n text]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (deliver (nth (:snippets session) n) text))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn get-translation [session n]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @(nth @(:translations session) n))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;gents&quot;&gt;&lt;a href=&quot;#gents&quot; class=&quot;headerlink&quot; title=&quot;gents&quot;&gt;&lt;/a&gt;gents&lt;/h3&gt;&lt;h5 id=&quot;Agents-Intro&quot;&gt;&lt;a href=&quot;#Agents-Intro&quot; class=&quot;headerlink&quot; title=&quot;Agents Intro&quot;&gt;&lt;/a&gt;Agents Intro&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (def my-agent (agent 0))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;user/my-agent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; @my-agent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (send my-agent inc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;Agent@2cadd45e: 1&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; @my-agent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (send my-agent + 2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;Agent@2cadd45e: 1&amp;gt;              &amp;lt;-- still 1, return before agent has been changed by the asynchronous func&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; @my-agent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;send() returns immediately (before the value of the agent has been changed), the function passed to send is called sometime afterward.&lt;/p&gt;
&lt;p&gt;If multiple threads call send concurrently, execution of the functions passed to send is serialized: only one will execute at a time. &lt;/p&gt;
&lt;p&gt;This means that they will not be retried and can therefore contain side effects.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (def my-agent (agent 0))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;user/my-agent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (send my-agent #((Thread/sleep 2000) (inc %)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;Agent@224e59d9: 0&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; @my-agent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (await my-agent)   &amp;lt;-- use await(), which blocks until all actions dispatched from the current thread to the given agent(s) have completed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; @my-agent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Error-Handling&quot;&gt;&lt;a href=&quot;#Error-Handling&quot; class=&quot;headerlink&quot; title=&quot;Error Handling&quot;&gt;&lt;/a&gt;Error Handling&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (def non-negative (agent 1 :validator (fn [new-val] (&amp;gt;= new-val 0))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;user/non-negative&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (send non-negative dec)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;Agent@6257d812: 0&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; @non-negative&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (send non-negative dec)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;Agent@6257d812: 0&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; @non-negative&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;As we hoped, the value won’t go negative. But what happens if we try to use an agent after it’s experienced an error?&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (send non-negative inc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IllegalStateException Invalid reference state clojure.lang.ARef.validate…&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; @non-negative&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Once an agent experiences an error, it enters a failed state by default, and attempts to dispatch new actions fail. &lt;/p&gt;
&lt;p&gt;We can find out if an agent is failed (and if it is, why) with agent-error, and we can restart it with restart-agent:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (agent-error non-negative)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;IllegalStateException java.lang.IllegalStateException: Invalid reference state&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (restart-agent non-negative 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (agent-error non-negative)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (send non-negative inc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;lt;Agent@6257d812: 1&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; @non-negative&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;By default, agents are created with the :fail error mode. &lt;/p&gt;
&lt;p&gt;Alternatively, you can set the error mode to :continue, in which case you don’t need to call restart-agent to recover an agent.&lt;/p&gt;
&lt;p&gt;The :continue error mode is the default if you set an error handler which is automatically called whenever the agent experiences an error.&lt;/p&gt;
&lt;h5 id=&quot;Example-An-In-Memory-Log&quot;&gt;&lt;a href=&quot;#Example-An-In-Memory-Log&quot; class=&quot;headerlink&quot; title=&quot;Example: An In-Memory Log&quot;&gt;&lt;/a&gt;Example: An In-Memory Log&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(def log-entries (agent []))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn log [entry]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (send log-entries conj [(now) entry]))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Ref-Software-Transactional-Memory&quot;&gt;&lt;a href=&quot;#Ref-Software-Transactional-Memory&quot; class=&quot;headerlink&quot; title=&quot;Ref - Software Transactional Memory&quot;&gt;&lt;/a&gt;Ref - Software Transactional Memory&lt;/h3&gt;&lt;h5 id=&quot;Ref-Intro&quot;&gt;&lt;a href=&quot;#Ref-Intro&quot; class=&quot;headerlink&quot; title=&quot;Ref Intro&quot;&gt;&lt;/a&gt;Ref Intro&lt;/h5&gt;&lt;p&gt;Refs are more sophisticated than atoms and agents, providing software transactional memory (STM). &lt;/p&gt;
&lt;p&gt;STM allows us to make concurrent, coordinated changes to multiple variables, much like a database’s transaction.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (def my-ref (ref 0))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&amp;apos;user/my-ref&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; @my-ref&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (ref-set my-ref 42)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IllegalStateException No transaction running       &amp;lt;-- Modifying the value of a ref is possible only inside a transaction.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (alter my-ref inc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IllegalStateException No transaction running&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;STM transactions are atomic, consistent, and isolated:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Atomic: Either all of the side effects of a transaction take place, or none of them do.&lt;/li&gt;
&lt;li&gt;Consistent: Transactions guarantee preservation of invariants specified through validators.&lt;br&gt;  If any of the changes attempted by a transaction fail to validate, none of the changes will be made.&lt;/li&gt;
&lt;li&gt;Isolated: multiple transactions can execute concurrently, the effect of concurrent transactions will be the same as they are running sequentially.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The missing property is durability, STM data will not survive power loss or crashes.&lt;/p&gt;
&lt;p&gt;A transaction is created with dosync&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (dosync (ref-set my-ref 42))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; @my-ref&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (dosync (alter my-ref inc))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; @my-ref&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Example-Retry-Transactions&quot;&gt;&lt;a href=&quot;#Example-Retry-Transactions&quot; class=&quot;headerlink&quot; title=&quot;Example - Retry Transactions&quot;&gt;&lt;/a&gt;Example - Retry Transactions&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(def attempts (atom 0))       &amp;lt;-- atom&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(def transfers (agent 0))     &amp;lt;-- agent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn transfer [from to amount]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (dosync&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (swap! attempts inc)   // Side-effect in transaction - DON&amp;apos;T DO THIS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (send transfers inc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (alter from - amount)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (alter to + amount)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;stress-tests&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(def checking (ref 10000))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(def savings (ref 20000))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn stress-thread [from to iterations amount]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (Thread. #(dotimes [_ iterations] (transfer from to amount))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn -main [&amp;amp; args]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (println &amp;quot;Before: Checking =&amp;quot; @checking &amp;quot; Savings =&amp;quot; @savings)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (let [t1 (stress-thread checking savings 100 100)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          t2 (stress-thread savings checking 200 100)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (.start t1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (.start t2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (.join t1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (.join t2))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (await transfers)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (println &amp;quot;Attempts: &amp;quot; @attempts)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (println &amp;quot;Transfers: &amp;quot; @transfers)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (println &amp;quot;After: Checking =&amp;quot; @checking &amp;quot; Savings =&amp;quot; @savings))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;result:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Before: Checking = 10000 Savings = 20000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Attempts: 638      --- side effect, break the idea of transaction, a big change that it will change when running the stress-test again&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Transfers: 300     --- 638 - 300 = 338 retires happened&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;After: Checking = 20000 Savings = 10000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Good news: agents are transaction-aware.&lt;/p&gt;
&lt;p&gt;If you use send to modify an agent within a transaction, that send will take place only if the transaction succeeds.&lt;/p&gt;
&lt;p&gt;Clojure uses an exclamation mark to indicate that functions like swap! and reset! are not transaction-safe. &lt;/p&gt;
&lt;p&gt;We can safely update an agent within a transaction because the function that updates an agent’s value is send instead of send!.&lt;/p&gt;
&lt;h5 id=&quot;Atoms-Agents-and-Refs&quot;&gt;&lt;a href=&quot;#Atoms-Agents-and-Refs&quot; class=&quot;headerlink&quot; title=&quot;Atoms, Agents and Refs&quot;&gt;&lt;/a&gt;Atoms, Agents and Refs&lt;/h5&gt;&lt;p&gt;An atom allows you to make synchronous changes to a single value, synchronous because when swap! returns, the update has taken place. &lt;/p&gt;
&lt;p&gt;Updates to one atom are not coordinated with other updates.&lt;/p&gt;
&lt;p&gt;An agent allows you to make asynchronous changes to a single value, asynchronous because the update takes place after send returns. &lt;/p&gt;
&lt;p&gt;Updates to one agent are not coordinated with other updates.&lt;/p&gt;
&lt;p&gt;Refs allow you to make synchronous, coordinated changes to multiple values.&lt;/p&gt;
&lt;h3 id=&quot;In-Depth-Dining-Philosophers-Problem&quot;&gt;&lt;a href=&quot;#In-Depth-Dining-Philosophers-Problem&quot; class=&quot;headerlink&quot; title=&quot;In Depth - Dining Philosophers Problem&quot;&gt;&lt;/a&gt;In Depth - Dining Philosophers Problem&lt;/h3&gt;&lt;h5 id=&quot;Dining-Philosophers-with-STM&quot;&gt;&lt;a href=&quot;#Dining-Philosophers-with-STM&quot; class=&quot;headerlink&quot; title=&quot;Dining Philosophers with STM&quot;&gt;&lt;/a&gt;Dining Philosophers with STM&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(def philosophers (into [] (repeatedly 5 #(ref :thinking))))         &amp;lt;-- a ref per philosopher&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn think []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (Thread/sleep (rand 1000)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn eat []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (Thread/sleep (rand 1000)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn philosopher-thread [n]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (Thread.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #(let [philosopher (philosophers n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               left (philosophers (mod (- n 1) 5))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               right (philosophers (mod (+ n 1) 5))]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (while true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (think)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (when (claim-chopsticks philosopher left right)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (eat)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (release-chopsticks philosopher))))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn -main [&amp;amp; args]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (let [threads (map philosopher-thread (range 5))]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (doseq [thread threads] (.start thread))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (doseq [thread threads] (.join thread))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn release-chopsticks [philosopher]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (dosync (ref-set philosopher :thinking)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;A First Attempt&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn claim-chopsticks [philosopher left right]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (dosync&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (when (and (= @left :thinking) (= @right :thinking))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (ref-set philosopher :eating))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This solution is wrong, and the problem is that we’re accessing the values of left and right with @.&lt;/p&gt;
&lt;p&gt;STM guarantees that no two transactions will make inconsistent modifications to the same ref, but we’re not modifying left or right, just examining their values.&lt;/p&gt;
&lt;p&gt;So, some other transaction could modify them, invalidating the condition that adjacent philosophers can’t eat simultaneously.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ensuring ref doesn’t change in STM&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn claim-chopsticks [philosopher left right]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (dosync&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (when (and (= (ensure left) :thinking) (= (ensure right) :thinking))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (ref-set philosopher :eating))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ensure ensures that the value of the ref it returns won’t be changed by another transaction. &lt;/p&gt;
&lt;p&gt;It is significantly simpler than lock-based solution, and it’s impossible to deadlock coz it is lockless.&lt;/p&gt;
&lt;h5 id=&quot;Dining-Philosophers-Without-STM&quot;&gt;&lt;a href=&quot;#Dining-Philosophers-Without-STM&quot; class=&quot;headerlink&quot; title=&quot;Dining Philosophers Without STM&quot;&gt;&lt;/a&gt;Dining Philosophers Without STM&lt;/h5&gt;&lt;p&gt;Previous section we represents each philosopher as a ref and using transactions to ensure that updates to those refs are coordinated.&lt;/p&gt;
&lt;p&gt;This section we use a single atom to represent the state of all the philosophers as below:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(def philosophers (atom (into [] (repeat 5 :thinking))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn philosopher-thread [philosopher]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (Thread.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #(let [left (mod (- philosopher 1) 5)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               right (mod (+ philosopher 1) 5)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (while true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (think)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (when (claim-chopsticks! philosopher left right)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (eat)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (release-chopsticks! philosopher))))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defn release-chopsticks! [philosopher]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (swap! philosophers assoc philosopher :thinking))        &amp;lt;-- assoc use be apply to array too&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The most interesting function to implement is chaim-chopsticks!&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn claim-chopsticks! [philosopher left right]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (swap! philosophers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (fn [ps]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (if (and (= (ps left) :thinking) (= (ps right) :thinking))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (assoc ps philosopher :eating)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ps)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (= (@philosophers philosopher) :eating))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Works but not elegant. Can we avoid the check after calling swap! to see if the chopsticks are claimed?&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn claim-chopsticks! [philosopher left right]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (swap-when! philosophers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #(and (= (%1 left) :thinking) (= (%1 right) :thinking))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        assoc philosopher :eating))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defn swap-when!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;If (pred current-value-of-atom) is true, atomically swaps the value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    of the atom to become (apply f current-value-of-atom args). Note that&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    both pred and f may be called multiple times and thus should be free&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    of side effects. Returns the value that was swapped in if the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    predicate was true, nil otherwise.&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [a pred f &amp;amp; args]      &amp;lt;-- arr, predictor and arguments (&amp;amp; means any number of arguments)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (loop []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (let [old @a]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (if (pred old)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (let [new (apply f old args)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    (if (compare-and-set! a old new)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        (recur)))    &amp;lt;-- if compare-and-set! fails, recur to loop back&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                nil))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Notes on 7 Concurrent Models in 7 Weeks - Part 3. Seperate Identity from State in Clojure Way&lt;/p&gt;
    
    </summary>
    
      <category term="并发" scheme="http://ijustloveses.github.io/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="并发" scheme="http://ijustloveses.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="7日7并发模型" scheme="http://ijustloveses.github.io/tags/7%E6%97%A57%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="笔记" scheme="http://ijustloveses.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Clojure" scheme="http://ijustloveses.github.io/tags/Clojure/"/>
    
  </entry>
  
  <entry>
    <title>7周7并发模型 P1 - Thread and Lock</title>
    <link href="http://ijustloveses.github.io/2016/06/28/7concurrent-models-in-7weeks-part1/"/>
    <id>http://ijustloveses.github.io/2016/06/28/7concurrent-models-in-7weeks-part1/</id>
    <published>2016-06-28T18:27:25.000Z</published>
    <updated>2016-06-29T06:17:47.000Z</updated>
    
    <content type="html">&lt;p&gt;Notes on 7 Concurrent Models in 7 Weeks - Part 1. Thread and Lock&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;strong&gt;How to create a thread&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HelloWorld&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Thread myThread = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Hello from new thread&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myThread.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Thread.yield();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Hello from main thread&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myThread.join();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Why Thread.yield();&lt;br&gt;yield() is a hint to the scheduler that the current thread is willing to yield the current use of a processor.&lt;br&gt;Without this call, the startup overhead of the new thread would mean that the main thread would almost certainly print first.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Intrinsic Lock&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Counter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; ++count; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getCount&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; count; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Intrinsic lock comes built into every Java object.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;synchronized&lt;/em&gt; claims that the Counter object’ lock when it is called and released when it returns.&lt;/p&gt;
&lt;p&gt;The code has some flaws which will be revealed later.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mysterious Memory&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Puzzle&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; answerReady = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; answer = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Thread t1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        answer = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        answerReady = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Thread t2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (answerReady)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;The meaning of life is: &quot;&lt;/span&gt; + answer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;I don&#39;t know the answer&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t1.start(); t2.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t1.join(); t2.join();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The output could be: “The meaning of life is: 0”, how is it possible? Because line 6 &amp;amp; 7 could be swipped due to&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Compiler statically optimization by reordering&lt;/li&gt;
&lt;li&gt;JVM dynamically optimization&lt;/li&gt;
&lt;li&gt;Hardware is allowded to optimize performance&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And it goes further than just reordering, sometimes it could even change the logic … &lt;/p&gt;
&lt;p&gt;Take above example, the line 7 could even be skipped and answerReady might not be true forever …&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Memory Visibility&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The java memory model defines when changes to memory made by one thread become visible to another thread.&lt;/p&gt;
&lt;p&gt;The bottom line is that there are no guarantees unless both the &lt;em&gt;reading and writing&lt;/em&gt; threads use synchronization.&lt;/p&gt;
&lt;p&gt;The flaw in the code of &lt;em&gt;Intrinsic Lock&lt;/em&gt; section&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Counter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; ++count; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getCount&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; count; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Yep, getCount() needs to be synchronized as well, or a thread calling getCount() may see a stale (not fresh) value.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dead Lock when there are multiple locks&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Based on previous sections, it is the only safe way in a multithread world to make every method synchronized, but:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;it is dreadfully inefficient.&lt;/li&gt;
&lt;li&gt;as soon as you have more than one lock, the opportunity is created for the threads to become deadlocked.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;Dining Philosophers - dead locked version&lt;/em&gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Philosopher&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Thread&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Chopstick left, right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Random random;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Philosopher&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Chopstick left, Chopstick right)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.left = left; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.right = right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    random = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Random();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Thread.sleep(random.nextInt(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;));     &lt;span class=&quot;comment&quot;&gt;// Think for a while&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt;(left) &amp;#123;                    &lt;span class=&quot;comment&quot;&gt;// Grab left chopstick&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt;(right) &amp;#123;                 &lt;span class=&quot;comment&quot;&gt;// Grab right chopstick&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Thread.sleep(random.nextInt(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;// Eat for a while&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(InterruptedException e) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The alternative way of claiming an object’s intrinsic lock: synchronized(object)  &lt;/p&gt;
&lt;p&gt;— claiming an object’s intrinsic lock from outer (by other objects)&lt;/p&gt;
&lt;p&gt;The main role of the thread is a philosopher which holds two Chopsticks, and the philosopher will lock left one and the right one in a row.&lt;br&gt;If 5 philosophers going simultaneousely, then they will lock their left Chopsticks at the same time, and try to lock their right ones,&lt;br&gt;which have been already locked by the philosophers on their right side —- BOOM, dead lock !!&lt;/p&gt;
&lt;p&gt;Dead lock is a danger whenever a thread tries to hold more than one lock.&lt;/p&gt;
&lt;p&gt;How to fix it ??&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Order the chopstick by some rules.&lt;/li&gt;
&lt;li&gt;Instead of lock chopstick from left to right, lock them in ascending or descending order.&lt;br&gt;Done !&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;The peril of Alien Method&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Downloader&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Thread&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; ArrayList&amp;lt;ProgressListener&amp;gt; listeners;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Downloader&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(URL url, String outputFilename)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    listeners = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;ProgressListener&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addListener&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ProgressListener listener)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    listeners.add(listener);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;removeListener&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ProgressListener listener)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    listeners.remove(listener);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;updateProgress&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (ProgressListener listener: listeners)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      listener.onProgress(n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;((n = in.read(buffer)) != -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        out.write(buffer, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        total += n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        updateProgress(total);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      out.flush();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IOException e) &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3 public method are all synchronized, looks good !&lt;/p&gt;
&lt;p&gt;The problem is that the updateProgress() calls an alien method - a method it knows nothing about.&lt;/p&gt;
&lt;p&gt;listener.onProgress() could do anything, including acquiring another lock, which make this a multiple locks case, and dead lock could happen.&lt;/p&gt;
&lt;p&gt;How to fixed it? Defensive copy!&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;updateProgress&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ArrayList&amp;lt;ProgressListener&amp;gt; listenersCopy;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    listenersCopy = (ArrayList&amp;lt;ProgressListener&amp;gt;)listeners.clone();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (ProgressListener listener: listenersCopy)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    listener.onProgress(n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This fix kills several birds with one stone:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Avoid calling an alien method with a lock held.&lt;/li&gt;
&lt;li&gt;Minimizes the period during which we hold the lock.&lt;/li&gt;
&lt;li&gt;A listener could now call removeListener() within its onProgress() method without modifying the copy of listener that is mid-iteration.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;Drawback of Intrinsic Lock&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;No way to interrupt a thread that’s blocked as a result of trying to acquire an intrinsic lock.&lt;/li&gt;
&lt;li&gt;No way to time out while trying to acquire an intrinsic lock.&lt;/li&gt;
&lt;li&gt;Only one way to acquire an intrinsic lock: synchronized block, so lock acquisition and release have to take place in the same method and strictly nested.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;ReentrantLock to rescue&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pattern:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Lock lock = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ReentrantLock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lock.lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;&amp;lt;use shared resources&amp;gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  lock.unlock():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reentrant Lock is interruptable&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Interruptible&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; ReentrantLock l1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ReentrantLock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; ReentrantLock l2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ReentrantLock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Thread t1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          l1.lockInterruptibly();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          Thread.sleep(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          l2.lockInterruptibly();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123; System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;t1 interrupted&quot;&lt;/span&gt;); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Thread t2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          l2.lockInterruptibly();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          Thread.sleep(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          l1.lockInterruptibly();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123; System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;t2 interrupted&quot;&lt;/span&gt;); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t1.start(); t2.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Thread.sleep(&lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t1.interrupt(); t2.interrupt();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t1.join(); t2.join();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;It supposed to be deadlocked, but with the help of {$lock.}lockInterruptibly() and {$thead.}interrupt(), dead lock could be interrupted.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reentrant lock supports timeout&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Another solution fo Dining Philosopher problem – Timeout if the philosophers could not acquire some of their chopstick.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Philosopher&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Thread&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; ReentrantLock leftChopstick, rightChopstick;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Philosopher&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ReentrantLock leftChopstick, ReentrantLock rightChopstick)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.leftChopstick = leftChopstick; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.rightChopstick = rightChopstick;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    random = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Random();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Thread.sleep(random.nextInt(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;// Think for a while&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        leftChopstick.lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rightChopstick.tryLock(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;, TimeUnit.MILLISECONDS)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Got the right chopstick&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              Thread.sleep(random.nextInt(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;// Eat for a while&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123; rightChopstick.unlock(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Didn&#39;t get the right chopstick - give up and go back to thinking&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Philosopher &quot;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot; timed out&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123; leftChopstick.unlock(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(InterruptedException e) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;rightChopstick.tryLock(1000, TimeUnit.MILLISECONDS) supports timeout.&lt;/p&gt;
&lt;p&gt;Although the tryLock() solution avoids infinite deadlock, that doesn’t mean it is a good solution.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It doesn’t avoid deadlock, but simple provides a way to recover when deadlock happens.&lt;/li&gt;
&lt;li&gt;It is susceptible to &lt;em&gt;livelock&lt;/em&gt; phenomenon – if all the threads timeout at the same time, it is possible for them to immediately deadlock again.&lt;br&gt;Although the deadlock doesn’t last forever, no progress is made either. (solve livelock by using different timeout.)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Hand-over-Hand Locking for a linked-list&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To insert a node, instead of lock the whole linked-list, we only lock the two nodes on either side of the point we’re going to insert.&lt;/p&gt;
&lt;p&gt;It is impossible to do it with Intrinsic Lock.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ConcurrentSortedList&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Node&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Node prev;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Node next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ReentrantLock lock = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ReentrantLock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Node() &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Node(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value, Node prev, Node next) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.value = value; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.prev = prev; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.next = next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Node head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Node tail;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ConcurrentSortedList&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    head = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Node(); tail = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Node();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    head.next = tail; tail.prev = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Node current = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    current.lock.lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Node next = current.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        next.lock.lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (next == tail || next.value &amp;lt; value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Node node = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Node(value, current, next);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            next.prev = node;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            current.next = node;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123; current.lock.unlock(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        current = next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        next = current.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123; next.lock.unlock(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Node current = tail;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (current.prev != head) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ReentrantLock lock = current.lock;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      lock.lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ++count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        current = current.prev;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123; lock.unlock(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Each node has a Reentrant Lock.&lt;/p&gt;
&lt;p&gt;insert() iterates linked-list from head to tail, whereas size() iterate from tail to head.&lt;/p&gt;
&lt;p&gt;So, doesn’t these different iterate directions violate the “Always acquire multiple locks in a fixed global order” rule? &lt;/p&gt;
&lt;p&gt;(Remember that this rule fixed Dining Philosophers problem)&lt;/p&gt;
&lt;p&gt;No, it doesn’t violate the rule, coz the size() method never holds more than a single lock at a time&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Condition Variable&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Concurrent programming often involves waiting for something to happen, and this type of situation is what condition variables are designed to address.&lt;/p&gt;
&lt;p&gt;Pattern:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ReentrantLock lock = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ReentrantLock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Condition condition = lock.newCondition();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lock.lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (!&amp;lt;&amp;lt;condition is &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&amp;gt;&amp;gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    condition.await();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;&amp;lt;use shared resources&amp;gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123; lock.unlock(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;A condition variable is associated with a lock, and a thread must hold that lock before being able to wait on the condition.&lt;/p&gt;
&lt;p&gt;Once it holds the lock, it checks to see if the condition is already true,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if true, use shared resources and then unlock&lt;/li&gt;
&lt;li&gt;otherwise, it calls await(), which automatically unlocks the lock and blocks on the condition variable. The unlock and blocks operation is atomic.&lt;/li&gt;
&lt;li&gt;when another thread calls signal() or signalAll() to set condition to true, await() unblocks and automatically reacquires the lock.&lt;/li&gt;
&lt;li&gt;await() is called within a loop, coz we need to go back and recheck whether the condition is true.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dining Philosopher with condition&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Philosopher&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Thread&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; eating;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Philosopher left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Philosopher right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; ReentrantLock table;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Condition condition;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Random random;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Philosopher&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ReentrantLock table)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    eating = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.table = table;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    condition = table.newCondition();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    random = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Random();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setLeft&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Philosopher left)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.left = left; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setRight&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Philosopher right)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.right = right; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        think();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        eat();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;think&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    table.lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      eating = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      left.condition.signal();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      right.condition.signal();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123; table.unlock(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Thread.sleep(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;eat&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    table.lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (left.eating || right.eating)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        condition.await();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      eating = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123; table.unlock(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Thread.sleep(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Still, a thread represents a philosopher, yet in this version, a philosopher no longer tries to hold two chopsticks.&lt;/p&gt;
&lt;p&gt;Instead, the lock is acted on the table, which means the status of all of the 5 philosophers (or 5 chopsticks).&lt;/p&gt;
&lt;p&gt;In think(), a philosopher first lock the current status of table, then he send signal the the philosophers sit beside him that he will unlock the table.&lt;/p&gt;
&lt;p&gt;In eat(), a philosopher first lock the current status, then he waits for his neighbors to finish eating; if so, he will enter eat stat, and unlock the table.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Atomic Variables&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Counting&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; AtomicInteger counter = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AtomicInteger();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CountingThread&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Thread&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; x &amp;lt; &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;; ++x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          counter.incrementAndGet();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CountingThread t1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CountingThread();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CountingThread t2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CountingThread();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t1.start(); t2.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t1.join(); t2.join();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(counter.get());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;incrementAndGet() &amp;amp;&amp;amp; getAndIncrement() are atomic functions for Atomic Variable counter. Using an atomic variable instead of locks has many benefits:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Not possible to forget to acquire locks when necessary.&lt;/li&gt;
&lt;li&gt;No locks are involves, so dead-lock free.&lt;/li&gt;
&lt;li&gt;Atomic varaibles are the foundation of non-blocking algorithm, for example the classes in java.util.concurrent model.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Thread-Creation Redux&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A better way to create thread:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;EchoServer&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ConnectionHandler&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Runnable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ConnectionHandler(Socket socket) &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ServerSocket server = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ServerSocket(&lt;span class=&quot;number&quot;&gt;4567&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Socket socket = server.accept();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Thread handler = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConnectionHandler(socket));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      handler.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Works fine, but suffers from a couple of issues:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Although thread creation is cheap, it is not free, still pay the price for each connection.&lt;/li&gt;
&lt;li&gt;It create as many threads as connections, and when connections come in faster than they could be handled, server will break – DDOS&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Better way to go?&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ServerSocket server = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ServerSocket(&lt;span class=&quot;number&quot;&gt;4567&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; threadPoolSize = Runtime.getRuntime().availableProcessors() * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ExecutorService executor = Executors.newFixedThreadPool(threadPoolSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Socket socket = server.accept();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  executor.execute(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConnectionHandler(socket));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Using a thread pool with twice as many threads as there are available processors.&lt;/p&gt;
&lt;p&gt;If connections come in fast, they will be queued until a thread become free.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Copy on Write&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Recall the &lt;em&gt;The peril of Alien Method&lt;/em&gt; section, we use a temporary list to hold listeners; Better way to go??&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; CopyOnWriteArrayList&amp;lt;ProgressListener&amp;gt; listeners;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Downloader&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(URL url, String outputFilename)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  listeners = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CopyOnWriteArrayList&amp;lt;ProgressListener&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;updateProgress&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (ProgressListener listener: listeners)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    listener.onProgress(n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;It results in very clear and concise code, and more important, it don’t make a copy each time updateProgress() is called,&lt;br&gt;but only when listeners is modified (some listeners’ updateProgress() func may not change the listeners).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Word Count - Sequential&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; HashMap&amp;lt;String, Integer&amp;gt; counts = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;String, Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Iterable&amp;lt;Page&amp;gt; pages = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Pages(&lt;span class=&quot;number&quot;&gt;100000&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;enwiki.xml&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(Page page: pages) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Iterable&amp;lt;String&amp;gt; words = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Words(page.getText());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (String word: words)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      countWord(word);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;countWord&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String word)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Integer currentCount = counts.get(word);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (currentCount == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    counts.put(word, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    counts.put(word, currentCount + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;105 seconds to finish.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Word Count - Producer &amp;amp; Consumer threads&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;producer:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Runnable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; BlockingQueue&amp;lt;Page&amp;gt; queue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(BlockingQueue&amp;lt;Page&amp;gt; queue)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.queue = queue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Iterable&amp;lt;Page&amp;gt; pages = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Pages(&lt;span class=&quot;number&quot;&gt;100000&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;enwiki.xml&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Page page: pages)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        queue.put(page);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) &amp;#123; e.printStackTrace(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;consumer:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Runnable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; BlockingQueue&amp;lt;Page&amp;gt; queue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Map&amp;lt;String, Integer&amp;gt; counts;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(BlockingQueue&amp;lt;Page&amp;gt; queue, Map&amp;lt;String, Integer&amp;gt; counts)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.queue = queue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.counts = counts;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Page page = queue.take();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (page.isPoisonPill())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Iterable&amp;lt;String&amp;gt; words = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Words(page.getText());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (String word: words)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          countWord(word);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) &amp;#123; e.printStackTrace(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;countWord&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String word)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;main thread:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ArrayBlockingQueue&amp;lt;Page&amp;gt; queue = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayBlockingQueue&amp;lt;Page&amp;gt;(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  HashMap&amp;lt;String, Integer&amp;gt; counts = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;String, Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Thread counter = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Counter(queue, counts));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Thread parser = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Parser(queue));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  counter.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  parser.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  parser.join();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  queue.put(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PoisonPill());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  counter.join();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;95 seconds to finish, and we found that parsing wiki pages will only take 10 seconds to finish.&lt;/p&gt;
&lt;p&gt;Since producer &amp;amp; consumer start at the same time, so producer(parse pages) take 10 seconds and consumer(count words) takes 95 seconds.&lt;/p&gt;
&lt;p&gt;Good, but not good enough.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Word Count – multiple consumers using synchronized map&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Synchronized collections don’t provide atomic read-modify-write methods. so locks are necessary.&lt;/p&gt;
&lt;p&gt;consumer:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Runnable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; ReentrantLock lock;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(BlockingQueue&amp;lt;Page&amp;gt; queue, Map&amp;lt;String, Integer&amp;gt; counts)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lock = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ReentrantLock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;countWord&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String word)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lock.lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Integer currentCount = counts.get(word);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (currentCount == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        counts.put(word, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        counts.put(word, currentCount + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123; lock.unlock(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Notes that the lock is static, so the lock is shared among all consumers.&lt;/p&gt;
&lt;p&gt;main thread:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; NUM_COUNTERS = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ArrayBlockingQueue&amp;lt;Page&amp;gt; queue = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayBlockingQueue&amp;lt;Page&amp;gt;(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  HashMap&amp;lt;String, Integer&amp;gt; counts = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;String, Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ExecutorService executor = Executors.newCachedThreadPool();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; NUM_COUNTERS; ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    executor.execute(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Counter(queue, counts));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Thread parser = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Parser(queue));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  parser.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  parser.join();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; NUM_COUNTERS; ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    queue.put(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PoisonPill());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  executor.shutdown();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  executor.awaitTermination(&lt;span class=&quot;number&quot;&gt;10L&lt;/span&gt;, TimeUnit.MINUTES);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;212 seconds to finish using 2 consumers, even longer than the sequential version.&lt;/p&gt;
&lt;p&gt;Why?? Excessive contention - too many threads are trying to access a single shared resource simultaneousely, so lock / unlock takes too many time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Word Count - Multi consumers using ConcurrentHashMap&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ConcurrentHashMap to rescue – which provide atomic functions.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;countWord&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String word)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Integer currentCount = counts.get(word);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (currentCount == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (counts.putIfAbsent(word, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (counts.replace(word, currentCount, currentCount + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;It is faster cause it is lock free.&lt;/p&gt;
&lt;p&gt;The workflow in countWord function is changed, the modification process of the varaible counts is held in a loop.&lt;/p&gt;
&lt;p&gt;First it will get the current value of counts, then it will *update it based on the current value, for example:&lt;/p&gt;
&lt;p&gt;When current is null, update it with putIfAbsent(). If putIfAbsent() is actually called AFTER some thread increases counts, it will fail.&lt;/p&gt;
&lt;p&gt;When current is currentCount, update it with replace() parametrized with currentCount. If replace() is called AFTER current value is changed, it will fail.&lt;/p&gt;
&lt;p&gt;In the case that the update function fails, the update process will loop again and get the updated current value of counts.&lt;/p&gt;
&lt;p&gt;Even the putIfAbsent() or replace() could fail and re-run, this version is still much more faster because it is LOCK-FREE.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Consumers   Time(s)   Speedup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1           120       0.87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2           83        1.26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3           65        1.61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4           63        1.67    &amp;lt;-- best one&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5           70        1.50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6           79        1.33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Word Count - local counts and merge at last&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Instead of each consumers updating a shared set of counts concurrently, each should maintain its own local set, then merge these local sets in the end.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mergeCounts&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Map.Entry&amp;lt;String, Integer&amp;gt; e: localCounts.entrySet()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String word = e.getKey();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Integer count = e.getValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Integer currentCount = counts.get(word);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (currentCount == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (counts.putIfAbsent(word, count) == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (counts.replace(word, currentCount, currentCount + count)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;mergeCounts is called by every consumer after it has already get to the end of the queue (page.isPoisonPill()).&lt;/p&gt;
&lt;p&gt;So ConcurrentHashMap &amp;amp;&amp;amp; Atomic functions are still necessary.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Consumers   Time(s)   Speedup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1           95        1.10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2           57        1.83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3           40        2.62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4           39        2.69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5           35        2.96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6           33        3.14    &amp;lt;-- best one&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7           41        2.55&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Notes on 7 Concurrent Models in 7 Weeks - Part 1. Thread and Lock&lt;/p&gt;
    
    </summary>
    
      <category term="并发" scheme="http://ijustloveses.github.io/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="并发" scheme="http://ijustloveses.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="多线程" scheme="http://ijustloveses.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="7日7并发模型" scheme="http://ijustloveses.github.io/tags/7%E6%97%A57%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="笔记" scheme="http://ijustloveses.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
